# 1 "silkdust1_no_UTF8.c"
 

# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 1 3
 








# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 1 3
 

 











# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/newlib.h" 1 3
 




 
 

 


 


 
 

 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



# 15 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 2 3

# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/config.h" 1 3



# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/ieeefp.h" 1 3



 






















































































# 100 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/ieeefp.h" 3














































 






































# 193 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/ieeefp.h" 3






































































# 4 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/config.h" 2 3


 







 














































# 76 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/config.h" 3















 









# 111 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/config.h" 3


 
























 




























 













# 16 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 2 3


 
 































# 68 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 3


 







 

# 90 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 3






# 10 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3




# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 


# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

 


































typedef long unsigned int  size_t;






















 




 





























 


























typedef short int wchar_t;

















# 283 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 





















# 14 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3


# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 1 3
 

 










# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/_types.h" 1 3
 

 








typedef long _off_t;
__extension__ typedef long long _off64_t;




typedef long _ssize_t;



# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 


# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

 

# 190 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 




 

# 271 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3









typedef unsigned int  wint_t;




 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 





















# 22 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/_types.h" 2 3


 
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;		 
} _mbstate_t;

typedef int _flock_t;

 
typedef void *_iconv_t;


# 14 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 2 3





typedef unsigned long  __ULong;















 




struct _Bigint 
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};

 
struct __tm
{
  int   __tm_sec;
  int   __tm_min;
  int   __tm_hour;
  int   __tm_mday;
  int   __tm_mon;
  int   __tm_year;
  int   __tm_wday;
  int   __tm_yday;
  int   __tm_isdst;
};

 





struct _on_exit_args {
	void *  _fnargs[32 ];	         
	__ULong _fntypes;           	         

};








struct _atexit {
	struct	_atexit *_next;			 
	int	_ind;				 
	void	(*_fns[32 ])(void);	 
        struct _on_exit_args _on_exit_args;
};


 






struct __sbuf {
	unsigned char *_base;
	int	_size;
};

 




typedef long _fpos_t;		 
				 





 
























# 156 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 3




struct __sFILE {
  unsigned char *_p;	 
  int	_r;		 
  int	_w;		 
  short	_flags;		 
  short	_file;		 
  struct __sbuf _bf;	 
  int	_lbfsize;	 





   
  void * 	_cookie;	 

  int   (*_read)   (void *  _cookie, char *_buf, int _n)  ;
  int   (*_write)   (void *  _cookie, const char *_buf,
					    int _n)  ;
  _fpos_t  (*_seek)   (void *  _cookie, _fpos_t _offset, int _whence)  ;
  int	 (*_close)   (void *  _cookie)  ;

   
  struct __sbuf _ub;	 
  unsigned char *_up;	 
  int	_ur;		 

   
  unsigned char _ubuf[3];	 
  unsigned char _nbuf[1];	 

   
  struct __sbuf _lb;	 

   
  int	_blksize;	 
  int	_offset;	 


  struct _reent *_data;	 



  _flock_t _lock;	 

};

# 252 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 3

typedef struct __sFILE   __FILE;


struct _glue 
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};

 




















struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};

 




 







# 531 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 3


struct _reent
{
  int _errno;			 

   


  __FILE *_stdin, *_stdout, *_stderr;

  int  _inc;			 
  char _emergency[25 ];
 
  int _current_category;	 
  const  char *_current_locale;

  int __sdidinit;		 

  void  (*__cleanup)   (struct _reent *)  ;

   
  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;

   
  int _cvtlen;			 
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26 ];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24 ];
          int _getdate_err;  
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
        } _reent;
   

 
      struct
        {

          unsigned char * _nextf[30 ];
          unsigned int _nmalloc[30 ];
        } _unused;
    } _new;

   
  struct _atexit *_atexit;	 
  struct _atexit _atexit0;	 

   
  void (**(_sig_func))(int);

   


  struct _glue __sglue;		 
  __FILE __sf[3];  		 
};










# 683 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 3






































 








extern struct _reent *_impure_ptr  ;

void _reclaim_reent  (struct _reent *)  ;

 


















# 16 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3

# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/stdlib.h" 1 3



 




# 17 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3


# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/alloca.h" 1 3
 

 
 















# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3



 

typedef struct 
{
  int quot;  
  int rem;  
} div_t;

typedef struct 
{
  long quot;  
  long rem;  
} ldiv_t;


typedef struct
{
  long long int quot;  
  long long int rem;  
} lldiv_t;











extern   int __mb_cur_max;



void 	 abort   (void ) __attribute__ ( (noreturn) )   ;
int	 abs   (int)  ;
int	 atexit   (void  (*__func)(void ))  ;
double	 atof   (const char *__nptr)  ;

float	 atoff   (const char *__nptr)  ;

int	 atoi   (const char *__nptr)  ;
int	 _atoi_r   (struct _reent *, const char *__nptr)  ;
long	 atol   (const char *__nptr)  ;
long	 _atol_r   (struct _reent *, const char *__nptr)  ;
void * 	 bsearch   (const void *  __key,
		       const void *  __base,
		       size_t __nmemb,
		       size_t __size,
		       int (*  _compar )  (const void * , const void * )  )  ;
void * 	 calloc   (size_t __nmemb, size_t __size)  ;
div_t	 div   (int __numer, int __denom)  ;
void 	 exit   (int __status) __attribute__ ( (noreturn) )   ;
void 	 free   (void * )  ;
char *   getenv   (const char *__string)  ;
char *	 _getenv_r   (struct _reent *, const char *__string)  ;



char *	 _findenv   (const  char *, int *)  ;
char *	 _findenv_r   (struct _reent *, const  char *, int *)  ;
long	 labs   (long)  ;
ldiv_t	 ldiv   (long __numer, long __denom)  ;
void * 	 malloc   (size_t __size)  ;
int	 mblen   (const char *, size_t)  ;
int	 _mblen_r   (struct _reent *, const char *, size_t, _mbstate_t *)  ;
int	 mbtowc   (wchar_t *, const char *, size_t)  ;
int	 _mbtowc_r   (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *)  ;
int	 wctomb   (char *, wchar_t)  ;
int	 _wctomb_r   (struct _reent *, char *, wchar_t, _mbstate_t *)  ;
size_t	 mbstowcs   (wchar_t *, const char *, size_t)  ;
size_t	 _mbstowcs_r   (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *)  ;
size_t	 wcstombs   (char *, const wchar_t *, size_t)  ;
size_t	 _wcstombs_r   (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *)  ;


int      mkstemp   (char *)  ;
char *   mktemp   (char *)  ;


void 	 qsort   (void *  __base, size_t __nmemb, size_t __size, int(*_compar)(const void * , const void * ))  ;
int	 rand   (void )  ;
void * 	 realloc   (void *  __r, size_t __size)  ;



void 	 srand   (unsigned __seed)  ;
double	 strtod   (const char *__n, char **__end_PTR)  ;
double	 _strtod_r   (struct _reent *,const char *__n, char **__end_PTR)  ;
float	 strtof   (const char *__n, char **__end_PTR)  ;

 




long	 strtol   (const char *__n, char **__end_PTR, int __base)  ;
long	 _strtol_r   (struct _reent *,const char *__n, char **__end_PTR, int __base)  ;
unsigned long  strtoul   (const char *__n, char **__end_PTR, int __base)  ;
unsigned long  _strtoul_r   (struct _reent *,const char *__n, char **__end_PTR, int __base)  ;

int	 system   (const char *__string)  ;


long     a64l   (const char *__input)  ;
char *   l64a   (long __input)  ;
char *   _l64a_r   (struct _reent *,long __input)  ;
int	 on_exit   (void  (*__func)(int, void * ),void *  __arg)  ;
void 	 _Exit   (int __status) __attribute__ ( (noreturn) )   ;
int	 putenv   (const char *__string)  ;
int	 _putenv_r   (struct _reent *, const char *__string)  ;
int	 setenv   (const char *__string, const char *__value, int __overwrite)  ;
int	 _setenv_r   (struct _reent *, const char *__string, const char *__value, int __overwrite)  ;

char *	 gcvt   (double,int,char *)  ;
char *	 gcvtf   (float,int,char *)  ;
char *	 fcvt   (double,int,int *,int *)  ;
char *	 fcvtf   (float,int,int *,int *)  ;
char *	 ecvt   (double,int,int *,int *)  ;
char *	 ecvtbuf   (double, int, int*, int*, char *)  ;
char *	 fcvtbuf   (double, int, int*, int*, char *)  ;
char *	 ecvtf   (float,int,int *,int *)  ;
char *	 dtoa   (double, int, int, int *, int*, char**)  ;
int	 rand_r   (unsigned *__seed)  ;

double  drand48   (void )  ;
double  _drand48_r   (struct _reent *)  ;
double  erand48   (unsigned short [3])  ;
double  _erand48_r   (struct _reent *, unsigned short [3])  ;
long    jrand48   (unsigned short [3])  ;
long    _jrand48_r   (struct _reent *, unsigned short [3])  ;
void    lcong48   (unsigned short [7])  ;
void    _lcong48_r   (struct _reent *, unsigned short [7])  ;
long    lrand48   (void )  ;
long    _lrand48_r   (struct _reent *)  ;
long    mrand48   (void )  ;
long    _mrand48_r   (struct _reent *)  ;
long    nrand48   (unsigned short [3])  ;
long    _nrand48_r   (struct _reent *, unsigned short [3])  ;
unsigned short *
        seed48   (unsigned short [3])  ;
unsigned short *
        _seed48_r   (struct _reent *, unsigned short [3])  ;
void    srand48   (long)  ;
void    _srand48_r   (struct _reent *, long)  ;
long long  atoll   (const char *__nptr)  ;
long long  _atoll_r   (struct _reent *, const char *__nptr)  ;
long long  llabs   (long long)  ;
lldiv_t	 lldiv   (long long __numer, long long __denom)  ;
long long  strtoll   (const char *__n, char **__end_PTR, int __base)  ;
long long  _strtoll_r   (struct _reent *, const char *__n, char **__end_PTR, int __base)  ;
unsigned long long  strtoull   (const char *__n, char **__end_PTR, int __base)  ;
unsigned long long  _strtoull_r   (struct _reent *, const char *__n, char **__end_PTR, int __base)  ;


void 	 cfree   (void * )  ;
# 188 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 3




char *	 _dtoa_r   (struct _reent *, double, int, int, int *, int*, char**)  ;

void * 	 _malloc_r   (struct _reent *, size_t)  ;
void * 	 _calloc_r   (struct _reent *, size_t, size_t)  ;
void 	 _free_r   (struct _reent *, void * )  ;
void * 	 _realloc_r   (struct _reent *, void * , size_t)  ;
void 	 _mstats_r   (struct _reent *, char *)  ;

int	 _system_r   (struct _reent *, const char *)  ;

void 	 __eprintf   (const char *, const char *, unsigned int, const char *)  ;

# 231 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 3


 


# 3 "silkdust1_no_UTF8.c" 2

# 1 "config1.h" 1
 

















# 4 "silkdust1_no_UTF8.c" 2


# 1 "aws.h" 1



typedef unsigned char boolean;



typedef unsigned char word_type;








typedef struct info_d {
    char *version;
    unsigned int textcolor;
    unsigned int backcolor;
    unsigned int textcolordark;
    unsigned int backcolordark;
    char *name;
    char *author;
    char *date;
    char *description;
    unsigned int code;
    char *fontname;
    unsigned int charsize;
    unsigned int fontstyle;
    unsigned int startroom;
    boolean graphical;
    unsigned int maxcarryingw;
    unsigned int maxcarryings;
} info;

typedef struct word_d {

    char c1,c2,c3;



    unsigned int code;
    word_type t;
} word;




    typedef unsigned char room_code;


typedef struct room_d {
    room_code code;
    const char *long_d;
    


    const char *short_d;

    





        
         
        room_code directions[6 ];
    
} room;

typedef struct message_d {
    unsigned int code;
    char *txt;
} message;




    typedef unsigned char obj_code;




        
typedef struct object_d {
    obj_code code;
    


    const char *desc;
    



    unsigned int position;       
    unsigned char attributes;
} object;

typedef struct tree_d {
    unsigned char c;
    unsigned char son0idx;
    unsigned char son1idx;
} tree;

void restart(void);










# 6 "silkdust1_no_UTF8.c" 2


# 1 "inout.h" 1


# 1 "systemd.h" 1



 
























# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 1 3
 















 
# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/time.h" 1 3


















# 18 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 2 3









# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 


# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

 


# 188 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3





 




 

# 271 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


# 283 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 





















# 27 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 2 3


# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 1 3
 






















typedef short int __int16_t;
typedef unsigned short int __uint16_t;


typedef long int __int32_t;
typedef unsigned long int __uint32_t;









__extension__ typedef long long __int64_t;
__extension__ typedef unsigned long long __uint64_t;














# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 







 

 




 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 





















typedef long int  ptrdiff_t;









 




 

 


# 188 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3





 




 


# 269 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3
















 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 













 







# 55 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 2 3

# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/types.h" 1 3



 





# 28 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/types.h" 3








typedef long int __off_t;
typedef int __pid_t;

__extension__ typedef long long int __loff_t;








# 56 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 2 3


 


















 
typedef	unsigned char	u_char;
typedef	unsigned short	u_short;
typedef	unsigned int	u_int;
typedef	unsigned long	u_long;



typedef	unsigned short	ushort;		 
typedef	unsigned int	uint;		 



typedef unsigned long  clock_t;




typedef long  time_t;


 

struct timespec {
  time_t  tv_sec;    
  long    tv_nsec;   
};

struct itimerspec {
  struct timespec  it_interval;   
  struct timespec  it_value;      
};


typedef	long	daddr_t;
typedef	char *	caddr_t;








typedef	unsigned short	ino_t;




# 146 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 3


 











typedef	short	dev_t;




typedef long		off_t;

typedef	unsigned short	uid_t;
typedef	unsigned short	gid_t;


typedef int pid_t;

typedef	long key_t;

typedef _ssize_t ssize_t;













typedef unsigned int mode_t __attribute__ ((__mode__ (__SI__))) ;




typedef unsigned short nlink_t;

 









 









typedef	long	fd_mask;





 

typedef	struct _types_fd_set {
	fd_mask	fds_bits[((( 64  )+((  (sizeof (fd_mask) * 8 )  )-1))/(  (sizeof (fd_mask) * 8 )  )) ];
} _types_fd_set;


















 



# 374 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 3







# 29 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 2 3


 

struct tm
{
  int	tm_sec;
  int	tm_min;
  int	tm_hour;
  int	tm_mday;
  int	tm_mon;
  int	tm_year;
  int	tm_wday;
  int	tm_yday;
  int	tm_isdst;
};

clock_t	    clock       (void)  ;
double	    difftime    (time_t _time2, time_t _time1)  ;
time_t	    mktime      (struct tm *_timeptr)  ;
time_t	    time        (time_t *_timer)  ;

char	  *  asctime     (const struct tm *_tblock)  ;
char	  *  ctime       (const time_t *_time)  ;
struct tm *  gmtime      (const time_t *_timer)  ;
struct tm *  localtime   (const time_t *_timer)  ;

size_t	    strftime    (char *_s, size_t _maxsize, const char *_fmt, const struct tm *_t)  ;

char	  *  asctime_r   	(const struct tm *, char *)  ;
char	  *  ctime_r   	(const time_t *, char *)  ;
struct tm *  gmtime_r   	(const time_t *, struct tm *)  ;
struct tm *  localtime_r   	(const time_t *, struct tm *)  ;

 






char      *  strptime        (const char *, const char *, struct tm *)  ;
void        tzset   	(void )  ;
void        _tzset_r   	(struct _reent *)  ;

 

# 95 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3


 
extern   time_t _timezone;
extern   int _daylight;
extern   char *_tzname[2];

 




 
# 119 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3







# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/features.h" 1 3
 


























 

# 72 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/features.h" 3








# 90 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/features.h" 3






# 126 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 2 3


# 166 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3

# 175 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3







 

 




 


                            
                            

                            
                            

 



 




 

# 217 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3


# 227 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3

























# 29 "systemd.h" 2


 












    
    

# 621 "systemd.h"


    
# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 1 3
 


















 













# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 


# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 


# 126 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 




 

 


# 188 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3





 




 


# 269 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3
















 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 













 







# 34 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 2 3



# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stdarg.h" 1 3
 













































 



 
















 






typedef void *__gnuc_va_list;



 

# 121 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stdarg.h" 3







 

 












# 210 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stdarg.h" 3




# 37 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 2 3


 








 

typedef __FILE FILE;








typedef _fpos_t fpos_t;





# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/stdio.h" 1 3



 










# 65 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 2 3






	 


















 








































































 









FILE *	 tmpfile    (void)  ;
char *	 tmpnam    (char *)  ;
int	 fclose    (FILE *)  ;
int	 fflush    (FILE *)  ;
FILE *	 freopen    (const char *, const char *, FILE *)  ;
void	 setbuf    (FILE *, char *)  ;
int	 setvbuf    (FILE *, char *, int, size_t)  ;
int	 fprintf    (FILE *, const char *, ...)  ;
int	 fscanf    (FILE *, const char *, ...)  ;
int	 printf    (const char *, ...)  ;
int	 scanf    (const char *, ...)  ;
int	 sscanf    (const char *, const char *, ...)  ;
int	 vfprintf    (FILE *, const char *, __gnuc_va_list )  ;
int	 vprintf    (const char *, __gnuc_va_list )  ;
int	 vsprintf    (char *, const char *, __gnuc_va_list )  ;
int	 fgetc    (FILE *)  ;
char *   fgets    (char *, int, FILE *)  ;
int	 fputc    (int, FILE *)  ;
int	 fputs    (const char *, FILE *)  ;
int	 getc    (FILE *)  ;
int	 getchar    (void)  ;
char *   gets    (char *)  ;
int	 putc    (int, FILE *)  ;
int	 putchar    (int)  ;
int	 puts    (const char *)  ;
int	 ungetc    (int, FILE *)  ;
size_t	 fread    (void * , size_t _size, size_t _n, FILE *)  ;
size_t	 fwrite    (const void *  , size_t _size, size_t _n, FILE *)  ;



int	 fgetpos    (FILE *, fpos_t *)  ;

int	 fseek    (FILE *, long, int)  ;



int	 fsetpos    (FILE *, const fpos_t *)  ;

long	 ftell    ( FILE *)  ;
void	 rewind    (FILE *)  ;
void	 clearerr    (FILE *)  ;
int	 feof    (FILE *)  ;
int	 ferror    (FILE *)  ;
void     perror    (const char *)  ;

FILE *	 fopen    (const char *_name, const char *_type)  ;
int	 sprintf    (char *, const char *, ...)  ;
int	 remove    (const char *)  ;
int	 rename    (const char *, const char *)  ;


int	 asprintf    (char **, const char *, ...)  ;




int	 fseeko    (FILE *, off_t, int)  ;
off_t	 ftello    ( FILE *)  ;

int	 vfiprintf    (FILE *, const char *, __gnuc_va_list )  ;
int	 iprintf    (const char *, ...)  ;
int	 fiprintf    (FILE *, const char *, ...)  ;
int	 siprintf    (char *, const char *, ...)  ;
char *	 tempnam    (const char *, const char *)  ;
int	 vasprintf    (char **, const char *, __gnuc_va_list )  ;
int	 vsnprintf    (char *, size_t, const char *, __gnuc_va_list )  ;
int	 vfscanf    (FILE *, const char *, __gnuc_va_list )  ;
int	 vscanf    (const char *, __gnuc_va_list )  ;
int	 vsscanf    (const char *, const char *, __gnuc_va_list )  ;

int	 fcloseall    (void )  ;
int	 snprintf    (char *, size_t, const char *, ...)  ;



 





FILE *	 fdopen    (int, const char *)  ;

int	 fileno    (FILE *)  ;
int	 getw    (FILE *)  ;
int	 pclose    (FILE *)  ;
FILE *   popen    (const char *, const char *)  ;
int	 putw    (int, FILE *)  ;
void     setbuffer    (FILE *, char *, int)  ;
int	 setlinebuf    (FILE *)  ;
int	 getc_unlocked    (FILE *)  ;
int	 getchar_unlocked    (void)  ;
void	 flockfile    (FILE *)  ;
int	 ftrylockfile    (FILE *)  ;
void	 funlockfile    (FILE *)  ;
int	 putc_unlocked    (int, FILE *)  ;
int	 putchar_unlocked    (int)  ;


 



int	 _asprintf_r    (struct _reent *, char **, const char *, ...)  ;
int	 _fcloseall_r    (struct _reent *)  ;
FILE *	 _fdopen_r    (struct _reent *, int, const char *)  ;
FILE *	 _fopen_r    (struct _reent *, const char *, const char *)  ;
int	 _fscanf_r    (struct _reent *, FILE *, const char *, ...)  ;
int	 _getchar_r    (struct _reent *)  ;
char *	 _gets_r    (struct _reent *, char *)  ;
int	 _iprintf_r    (struct _reent *, const char *, ...)  ;
int	 _mkstemp_r    (struct _reent *, char *)  ;
char *	 _mktemp_r    (struct _reent *, char *)  ;
void	 _perror_r    (struct _reent *, const char *)  ;
int	 _printf_r    (struct _reent *, const char *, ...)  ;
int	 _putchar_r    (struct _reent *, int)  ;
int	 _puts_r    (struct _reent *, const char *)  ;
int	 _remove_r    (struct _reent *, const char *)  ;
int	 _rename_r    (struct _reent *,
			   const char *_old, const char *_new)  ;
int	 _scanf_r    (struct _reent *, const char *, ...)  ;
int	 _sprintf_r    (struct _reent *, char *, const char *, ...)  ;
int	 _snprintf_r    (struct _reent *, char *, size_t, const char *, ...)  ;
int	 _sscanf_r    (struct _reent *, const char *, const char *, ...)  ;
char *	 _tempnam_r    (struct _reent *, const char *, const char *)  ;
FILE *	 _tmpfile_r    (struct _reent *)  ;
char *	 _tmpnam_r    (struct _reent *, char *)  ;
int	 _vasprintf_r    (struct _reent *, char **, const char *, __gnuc_va_list )  ;
int	 _vfprintf_r    (struct _reent *, FILE *, const char *, __gnuc_va_list )  ;
int	 _vprintf_r    (struct _reent *, const char *, __gnuc_va_list )  ;
int	 _vsprintf_r    (struct _reent *, char *, const char *, __gnuc_va_list )  ;
int	 _vsnprintf_r    (struct _reent *, char *, size_t, const char *, __gnuc_va_list )  ;
int	 _vfscanf_r    (struct _reent *, FILE *, const char *, __gnuc_va_list )  ;
int	 _vscanf_r    (struct _reent *, const char *, __gnuc_va_list )  ;
int	 _vsscanf_r    (struct _reent *, const char *, const char *, __gnuc_va_list )  ;

ssize_t  __getdelim    (char **, size_t *, int, FILE *)  ;
ssize_t  __getline    (char **, size_t *, FILE *)  ;

# 331 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 3

 
 



int	 __srget    (FILE *)  ;
int	 __swbuf    (int, FILE *)  ;

 




FILE	*  funopen   (const void *  _cookie,
		int (*readfn)(void *  _cookie, char *_buf, int _n),
		int (*writefn)(void *  _cookie, const char *_buf, int _n),
		fpos_t (*seekfn)(void *  _cookie, fpos_t _off, int _whence),
		int (*closefn)(void *  _cookie))  ;





 





# 387 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 3




# 400 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 3

 










# 432 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 3





























 









 


# 623 "systemd.h" 2

    
# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/pcos.h" 1 3
 







 








































 









 


























extern unsigned short _pcos_extent_length;

 
extern int errno_from_pcos_err(int pcos_err);

extern void __inline__ _pcos_print(char *str)
{
     





    asm("pushl   @rr14,rr12 \n\t"
        "ldl     rr12,%S0   \n\t"
        "push    @rr14,r5   \n\t"   
        "sc      #89        \n\t"
        "pop     r5,@rr14   \n\t"
        "popl    rr12,@rr14 \n\t" : : "r" (str)  );
}

 
struct pcostime {
    int ticks;   
    int seconds;
    int minutes;
    int hours;
    int day;
    int month;
    int year;
};

typedef unsigned char cursor_shape[12];

 












 
extern int _pcos_dgetlen(int did, unsigned long *length);
extern int _pcos_dgetposition(int did, unsigned long *length);
extern int _pcos_dseek(int did, unsigned long offset);
extern int _pcos_resetbyte(int did);
extern int _pcos_eof(int did, unsigned int *status);
extern int _pcos_putbyte(int did, unsigned char byte);
extern int _pcos_getbyte(int did, unsigned char *byte);
extern int _pcos_writebytes(int did, const void *buffer,
                            unsigned int nbytes, unsigned int *retbytes);
extern int _pcos_readbytes(int did, const void *buffer,
                           unsigned int nbytes, unsigned int *retbytes);
extern int _pcos_readline(int did, const void *buffer,
                          unsigned int nbytes, unsigned int *retbytes);
extern int _pcos_new(unsigned short length, void **memory);
extern int _pcos_newsamesegment(unsigned short length, void **memory);
extern int _pcos_dispose(int length, void **memory);
extern int _pcos_drename(const char *from, int fromlen, const char *to, int tolen);
extern int _pcos_dremove(const char *name, int namelen);
extern int _pcos_openfile(int did, const char *name, int namelen, int mode,
                          int extent_len);
extern int _pcos_close(int did);
extern int _pcos_ddirectory(const char *name, int namelen);
extern int _pcos_maxsize(unsigned short *maxsize);
extern int _pcos_search(int drive, int search_mode, int *length, char **file_pointer,
                        char *name_pointer);
extern void _pcos_selectcur(int mode);
extern void _pcos_cls(void);
extern int _pcos_crlf(void);
extern void _pcos_grfinit(int *color, void **pointer);
extern int _pcos_cleartext(unsigned int column, unsigned int row,
                           unsigned int xlen, unsigned int ylen);
extern int _pcos_scrolltext(unsigned int plane_mask, unsigned int function,
                            unsigned int src_x, unsigned int src_y,
                            unsigned int dst_x, unsigned int dst_y,
                            unsigned int xlen, unsigned int ylen);
extern int _pcos_bset(void *dest, unsigned char val, unsigned int len);
extern int _pcos_bwset(void *dest, unsigned short val, unsigned int len);
extern int _pcos_bclear(void *dest, unsigned int len);
extern int _pcos_bmove(void *dest, const void *src, unsigned int len);
extern int _pcos_dstring(char *string);
extern int _pcos_dhex(unsigned int word);
extern int _pcos_dhexbyte(unsigned char byte);
extern int _pcos_dhexlong(unsigned long byte);
extern int _pcos_dlong(unsigned long byte);
extern int _pcos_dnumw(unsigned int word, unsigned int field_width);
extern int _pcos_gettime(char *buf, unsigned int buflen);
extern int _pcos_getdate(char *buf, unsigned int buflen);
extern int _pcos_settime(char *buf, unsigned int buflen);
extern int _pcos_setdate(char *buf, unsigned int buflen);
extern int _pcos_lookbyte(int did, unsigned char *byte, unsigned char *buffer_status);
extern int _pcos_chgwindow(unsigned int fgcolor, unsigned int bgcolor);
extern int _pcos_readcur0(cursor_shape *shape, unsigned int *blinkrate,
                          unsigned int *column, unsigned int *row);
extern int _pcos_readcur1(cursor_shape *shape, unsigned int *blinkrate,
                          unsigned int *x_pos, unsigned int *y_pos);
extern int _pcos_chgcur0(unsigned int column, unsigned int row);
extern int _pcos_chgcur1(unsigned int x_pos, unsigned int y_pos);
extern void _pcos_chgcur2(unsigned int blinkrate);
extern void _pcos_chgcur3(unsigned int blinkrate);
extern void _pcos_chgcur4(cursor_shape new_shape);
extern void _pcos_chgcur5(cursor_shape new_shape);
extern int _pcos_setcontrolbyte(int did, unsigned int word_number, unsigned int word);
extern int _pcos_getstatusbyte(int did, unsigned int word_number, unsigned int *word);
extern int _pcos_checkvolume(void);

 
extern void _get_pcostime(struct pcostime *cur_time);



 
 
 
 
# 624 "systemd.h" 2


    
    
    

    
    
    
    void m20_putc(char c);
    void wait_key(void);

    
    
    

    

     
    

    
    
    
    
    
    

    
    
    

    
# 1 "m20sp.h" 1


void showsplash(void);


# 656 "systemd.h" 2

    





    

# 1185 "systemd.h"



    







    



    









    











    



# 3 "inout.h" 2

# 1 "loadsave.h" 1



void savegame(char *filename)  ;
void loadgame(char *filename)  ;
char *i2s(char *s, int v);



# 4 "inout.h" 2


void writesameln(const char *line)  ;
void writeln(const char* line)  ;
unsigned int readln(void);
char *eatcr(char *s)  ;
void interrogationAndAnalysis(void);
void clear(void);









# 8 "silkdust1_no_UTF8.c" 2



extern unsigned int verb;
extern unsigned int noun1;
extern unsigned int noun2;
extern unsigned char  adve;
extern unsigned char  actor;
extern unsigned char  adjective;
unsigned int dummy;
unsigned char  cdummy;


room *cr;

char *compressed;
unsigned char bpointer;
unsigned int cpointer;
char decompress_b[128 +1];
unsigned char currbyte;


const tree huftree[147 ]={
    {75,255,255},
    {51,255,255},
    {255,0,1},
    {54,255,255},
    {81,255,255},
    {255,3,4},
    {55,255,255},
    {255,6,5},
    {59,255,255},
    {255,2,8},
    {57,255,255},
    {255,10,7},
    {40,255,255},
    {41,255,255},
    {255,12,13},
    {74,255,255},
    {52,255,255},
    {255,15,16},
    {70,255,255},
    {255,9,18},
    {85,255,255},
    {255,11,20},
    {71,255,255},
    {255,22,17},
    {50,255,255},
    {255,14,24},
    {88,255,255},
    {255,26,19},
    {122,255,255},
    {53,255,255},
    {255,28,29},
    {106,255,255},
    {49,255,255},
    {255,31,32},
    {255,21,23},
    {48,255,255},
    {87,255,255},
    {255,35,36},
    {78,255,255},
    {255,25,38},
    {63,255,255},
    {79,255,255},
    {255,40,41},
    {255,27,33},
    {68,255,255},
    {255,30,44},
    {82,255,255},
    {67,255,255},
    {255,46,47},
    {113,255,255},
    {255,49,34},
    {72,255,255},
    {69,255,255},
    {255,51,52},
    {80,255,255},
    {255,37,54},
    {86,255,255},
    {58,255,255},
    {255,56,57},
    {76,255,255},
    {255,59,39},
    {120,255,255},
    {255,61,42},
    {33,255,255},
    {77,255,255},
    {255,63,64},
    {255,43,45},
    {45,255,255},
    {255,48,67},
    {255,50,53},
    {83,255,255},
    {66,255,255},
    {255,70,71},
    {34,255,255},
    {255,55,73},
    {255,58,60},
    {10,255,255},
    {255,76,62},
    {255,65,66},
    {65,255,255},
    {39,255,255},
    {255,79,80},
    {73,255,255},
    {255,68,82},
    {84,255,255},
    {255,84,69},
    {255,72,74},
    {255,75,77},
    {89,255,255},
    {255,88,78},
    {118,255,255},
    {255,81,90},
    {255,83,85},
    {107,255,255},
    {255,93,86},
    {255,87,89},
    {44,255,255},
    {103,255,255},
    {255,96,97},
    {0,255,255},
    {255,91,99},
    {98,255,255},
    {119,255,255},
    {255,101,102},
    {112,255,255},
    {255,104,92},
    {102,255,255},
    {121,255,255},
    {255,106,107},
    {109,255,255},
    {255,94,109},
    {46,255,255},
    {255,111,95},
    {99,255,255},
    {255,98,113},
    {117,255,255},
    {255,115,100},
    {100,255,255},
    {255,117,103},
    {255,105,108},
    {108,255,255},
    {255,110,120},
    {104,255,255},
    {255,112,122},
    {115,255,255},
    {255,114,124},
    {110,255,255},
    {105,255,255},
    {255,126,127},
    {114,255,255},
    {255,116,129},
    {255,118,119},
    {111,255,255},
    {116,255,255},
    {255,132,133},
    {97,255,255},
    {255,135,121},
    {255,123,125},
    {101,255,255},
    {255,128,138},
    {255,130,131},
    {255,134,136},
    {32,255,255},
    {255,137,142},
    {255,139,140},
    {255,141,143},
    {255,144,145},
};




char hufget(void)
{

unsigned char  iii;

    iii= 147 -1;
    while(1) {
        if(currbyte&0x1) {
            iii=huftree[iii].son1idx;
        } else {
            iii=huftree[iii].son0idx;
        }
        if(++bpointer==8) {
            bpointer=0;
            currbyte=compressed[++cpointer];
        } else {
            currbyte>>=1;
        }
        if(huftree[iii].c!=255)
            return huftree[iii].c;
    }
}

boolean decode(void)
{
    register char c;
    unsigned char  k=0;
    if(bpointer==0)
       currbyte=compressed[cpointer];
    do {
        c=hufget();
         ;
        decompress_b[k++]=c;
    } while(c!='\0'&&!(c==' '&&k> 128 -15)&&k< 128 );
    if(c!='\0') {
        decompress_b[k]='\0';
        return 1 ;
    }
    return 0 ;
}
const word dictionary[267 ]={
    {0xf7, 0x41, 0x4b,1,1},
    {0xe9, 0x4f, 0x41,2,2},
    {0xe9, 0xe2, 0x41,2,2},
    {0x5d, 0x52, 0x40,3,2},
    {0xef, 0x5b, 0x41,3,2},
    {0x43, 0x4b, 0xf9,3,2},
    {0x4a, 0xfa, 0xfb,3,2},
    {0x4a, 0x57, 0xfb,3,2},
    {0xe8, 0x59, 0x49,3,2},
    {0x4b, 0x54, 0x5f,3,2},
    {0xea, 0xed, 0x50,3,2},
    {0xe9, 0x4f, 0x4f,4,2},
    {0xfd, 0x41, 0x54,4,2},
    {0x41, 0x55, 0xe9,5,2},
    {0x42, 0x41, 0x52,6,2},
    {0x5b, 0x55, 0x47,7,2},
    {0xe5, 0xf8, 0xef,7,2},
    {0xfc, 0xf9, 0x45,7,2},
    {0x41, 0x4c, 0xfd,8,2},
    {0x5d, 0xf4, 0xfb,8,2},
    {0xec, 0xf8, 0xe4,10,2},
    {0x40, 0xf8, 0xe4,10,2},
    {0xec, 0xe9, 0xee,11,2},
    {0x40, 0xe9, 0xee,11,2},
    {0xfe, 0x50, 0x45,12,1},
    {0xe5, 0xf3, 0xfa,12,1},
    {0xef, 0xf7, 0xe6,13,2},
    {0x54, 0x55, 0x42,14,2},
    {0x54, 0xf7, 0xfc,14,2},
    {0x55, 0x53, 0x45,15,1},
    {0x5e, 0xf4, 0xf2,17,2},
    {0x5e, 0x59, 0xf2,17,2},
    {0xf8, 0x49, 0x4b,17,2},
    {0x4b, 0x56, 0x53,17,2},
    {0xf8, 0xe4, 0x4b,17,2},
    {0xe7, 0x56, 0x53,17,2},
    {0x42, 0x45, 0x44,18,2},
    {0xfc, 0x4b, 0x4b,19,2},
    {0xfc, 0xe6, 0x4b,19,2},
    {0xec, 0xe4, 0x43,19,2},
    {0xed, 0xec, 0x56,20,2},
    {0x50, 0x42, 0xf7,22,2},
    {0xea, 0xef, 0xf7,22,2},
    {0x48, 0xf2, 0xfa,22,2},
    {0x4d, 0x42, 0xf1,24,4},
    {0x44, 0xe7, 0xf2,24,4},
    {0xff, 0xef, 0x55,24,4},
    {0xf3, 0xf2, 0x44,24,4},
    {0xfb, 0xe0, 0xeb,25,4},
    {0xea, 0xfb, 0x4e,25,4},
    {0x4c, 0x47, 0xf0,26,4},
    {0x4b, 0x49, 0xfb,26,4},
    {0x43, 0x41, 0x4e,27,2},
    {0x54, 0x49, 0x4e,27,2},
    {0x4a, 0x41, 0x52,27,2},
    {0x4a, 0x53, 0xea,27,2},
    {0x58, 0x49, 0xe9,27,2},
    {0x56, 0x58, 0x5d,28,2},
    {0x43, 0x41, 0x52,29,2},
    {0x49, 0x54, 0x41,29,2},
    {0x31, 0x35, 0x30,29,2},
    {0xeb, 0xf2, 0xe0,30,4},
    {0x46, 0x56, 0xe1,30,4},
    {0xf6, 0xee, 0xea,32,2},
    {0xfb, 0xf4, 0xfc,33,2},
    {0xed, 0xfa, 0x45,34,2},
    {0xf0, 0x4f, 0x43,35,2},
    {0xe9, 0xf3, 0x49,37,4},
    {0xf6, 0x41, 0x49,37,4},
    {0xec, 0xf3, 0xe1,39,2},
    {0xec, 0xf3, 0x4f,39,2},
    {0xf5, 0x45, 0x41,40,2},
    {0xe5, 0xfe, 0xef,40,2},
    {0xe8, 0x41, 0x4b,41,2},
    {0xe9, 0xfd, 0xec,42,2},
    {0xed, 0x49, 0x4e,42,2},
    {0x47, 0x45, 0x54,50,1},
    {0xfa, 0x52, 0x41,50,1},
    {0xee, 0x41, 0x4b,50,1},
    {0xe7, 0xfa, 0x42,51,2},
    {0xfe, 0xf3, 0x4e,51,2},
    {0xf5, 0xe4, 0x41,51,2},
    {0xf5, 0xe4, 0xef,51,2},
    {0xf0, 0x45, 0x53,51,2},
    {0xe5, 0xfd, 0x41,52,1},
    {0xf6, 0x41, 0x4b,53,2},
    {0xfe, 0x49, 0x45,53,2},
    {0xfe, 0xf3, 0x4f,53,2},
    {0xec, 0xf9, 0x52,54,2},
    {0xeb, 0x52, 0x4f,55,1},
    {0xe5, 0xfe, 0x41,55,1},
    {0x53, 0x45, 0x54,55,1},
    {0xe4, 0xe1, 0x52,55,1},
    {0xf8, 0x4f, 0x53,55,1},
    {0xed, 0xe9, 0x49,56,1},
    {0xff, 0xe2, 0x54,56,1},
    {0xe5, 0xf6, 0x4c,57,2},
    {0xec, 0x45, 0x41,58,2},
    {0xe3, 0x41, 0x4d,58,2},
    {0xe3, 0xec, 0x4d,58,2},
    {0xf3, 0xee, 0xfd,58,2},
    {0x5f, 0xee, 0xfd,58,2},
    {0xf4, 0xf1, 0x53,59,2},
    {0xf4, 0xf1, 0xfd,59,2},
    {0xfc, 0xfa, 0xe1,60,2},
    {0xf5, 0xe8, 0x52,60,2},
    {0x50, 0x52, 0xfd,61,2},
    {0x50, 0x52, 0x53,61,2},
    {0xee, 0xf7, 0xe0,62,2},
    {0x42, 0xf7, 0xe0,62,2},
    {0xe1, 0x57, 0x49,63,1},
    {0xfe, 0x49, 0x56,63,1},
    {0xfd, 0x49, 0x56,66,1},
    {0xf5, 0xea, 0x46,66,1},
    {0xee, 0xe4, 0x55,67,1},
    {0xe0, 0x41, 0x53,67,1},
    {0xe4, 0x41, 0x4c,68,2},
    {0xe4, 0xec, 0x4c,68,2},
    {0xea, 0xf3, 0x4e,68,2},
    {0xea, 0xf3, 0xe0,68,2},
    {0x5b, 0x4a, 0xfa,68,2},
    {0x5c, 0x43, 0x45,68,2},
    {0xf0, 0xf3, 0xea,68,2},
    {0xfb, 0xf7, 0x41,68,2},
    {0xfb, 0xf7, 0xef,69,2},
    {0xe3, 0x55, 0x4c,69,1},
    {0xe7, 0x55, 0x53,69,1},
    {0xf7, 0x4f, 0x56,69,1},
    {0x45, 0x58, 0x0,70,1},
    {0x4d, 0xef, 0xf2,70,1},
    {0x58, 0x0, 0x0,70,1},
    {0xe9, 0x45, 0x41,70,1},
    {0xfe, 0xf8, 0xf4,70,1},
    {0xe8, 0xf7, 0x49,71,1},
    {0x50, 0x55, 0x54,71,1},
    {0x49, 0x0, 0x0,72,2},
    {0x49, 0x4e, 0x56,72,2},
    {0xf3, 0x4e, 0x56,72,2},
    {0x43, 0x52, 0x5b,72,2},
    {0x42, 0x59, 0x45,73,1},
    {0xfb, 0x48, 0x4f,74,1},
    {0xe8, 0x48, 0x41,75,1},
    {0xed, 0xe5, 0x45,75,1},
    {0xe0, 0x41, 0x4c,75,1},
    {0xf9, 0xe2, 0x4f,75,1},
    {0xee, 0x58, 0x49,76,1},
    {0xfc, 0x54, 0x4f,76,1},
    {0xfa, 0x55, 0x49,76,1},
    {0x4f, 0x55, 0x54,76,1},
    {0xf6, 0x4c, 0x41,77,1},
    {0xfc, 0xe7, 0x45,78,1},
    {0x49, 0xe9, 0xe1,78,1},
    {0x5e, 0x5f, 0xe8,78,1},
    {0xf8, 0x49, 0x4c,78,1},
    {0xe0, 0x4f, 0x4f,79,2},
    {0x4e, 0x0, 0x0,80,2},
    {0xe5, 0xf9, 0x52,80,2},
    {0x53, 0x0, 0x0,81,2},
    {0xf8, 0xf9, 0x55,81,2},
    {0x45, 0x0, 0x0,82,2},
    {0xee, 0x41, 0x53,82,2},
    {0x57, 0x0, 0x0,83,2},
    {0xfc, 0x45, 0x53,83,2},
    {0xe8, 0xf9, 0x4f,84,2},
    {0x55, 0x0, 0x0,84,2},
    {0x55, 0x50, 0x0,84,2},
    {0x53, 0x42, 0xe7,84,2},
    {0xf2, 0xec, 0x4c,85,2},
    {0x44, 0x0, 0x0,85,2},
    {0xf5, 0x4f, 0x57,85,2},
    {0xe7, 0x55, 0x51,85,1},
    {0xef, 0xe2, 0x44,85,2},
    {0xf5, 0x49, 0x4c,86,1},
    {0xfd, 0x4f, 0x55,86,1},
    {0xed, 0xed, 0x54,87,2},
    {0x42, 0x55, 0x59,88,1},
    {0xf8, 0xff, 0xf9,89,2},
    {0xe1, 0xef, 0x4d,89,2},
    {0xea, 0x4f, 0x4c,90,2},
    {0xfb, 0x4f, 0x53,90,2},
    {0xe4, 0x49, 0x43,95,1},
    {0x5c, 0x5a, 0x5c,97,2},
    {0x53, 0x4c, 0xe7,98,2},
    {0xfc, 0x48, 0x4f,98,2},
    {0xfc, 0xe5, 0x4f,98,2},
    {0x40, 0x56, 0xfd,98,2},
    {0x40, 0x56, 0x53,98,2},
    {0xee, 0xfc, 0xf4,98,2},
    {0x42, 0xfc, 0xf4,98,2},
    {0xe4, 0xf4, 0x55,98,2},
    {0xe4, 0xf4, 0xfb,98,2},
    {0xee, 0xf5, 0xe0,99,2},
    {0x47, 0x4f, 0x0,100,1},
    {0x52, 0x55, 0x4e,100,1},
    {0xe3, 0x41, 0x4c,100,1},
    {0xee, 0x52, 0x45,101,2},
    {0xee, 0xff, 0x45,101,2},
    {0xe1, 0xe6, 0x41,101,2},
    {0xe1, 0xe6, 0xef,101,2},
    {0x4a, 0x4f, 0xf6,101,2},
    {0xe2, 0xef, 0x4f,102,2},
    {0xe2, 0xef, 0xe1,102,2},
    {0xe8, 0x4f, 0x53,103,2},
    {0xe8, 0xe2, 0x53,103,2},
    {0xfe, 0xef, 0x4f,108,2},
    {0xfe, 0xef, 0xe1,108,2},
    {0x4c, 0x0, 0x0,110,1},
    {0xf8, 0x4f, 0x4f,110,1},
    {0xec, 0xf2, 0xff,111,1},
    {0xfa, 0x45, 0x41,120,1},
    {0x54, 0xf5, 0xea,121,1},
    {0xef, 0xf1, 0xf8,121,1},
    {0xe0, 0xff, 0x45,143,1},
    {0x5d, 0x4e, 0x43,144,2},
    {0x5d, 0x56, 0xf6,144,2},
    {0x45, 0xff, 0xfd,144,2},
    {0xf5, 0xff, 0xe3,156,2},
    {0xf6, 0xe0, 0x4f,159,2},
    {0xed, 0xe2, 0xf6,159,2},
    {0xe7, 0x49, 0x46,160,1},
    {0xfc, 0x49, 0x52,164,2},
    {0x47, 0xf6, 0xed,200,2},
    {0xf6, 0x4f, 0x4f,200,2},
    {0xf6, 0xe2, 0x4f,200,2},
    {0x53, 0x49, 0x54,201,1},
    {0xe9, 0xe2, 0x45,201,1},
    {0x44, 0xfa, 0xf7,202,2},
    {0xef, 0xf7, 0x4f,203,1},
    {0xe7, 0x4f, 0x4f,206,2},
    {0xe7, 0xe2, 0x4f,206,2},
    {0xf6, 0x52, 0x41,210,1},
    {0xf5, 0xe7, 0x49,211,1},
    {0x45, 0x41, 0x54,211,1},
    {0x48, 0xe5, 0xf3,211,1},
    {0xe5, 0x55, 0x52,213,1},
    {0xe0, 0xf8, 0xfd,219,2},
    {0xec, 0xfa, 0xfb,228,2},
    {0x45, 0x5f, 0xf2,229,2},
    {0xea, 0x4f, 0x52,230,1},
    {0xf7, 0xfb, 0x4f,236,1},
    {0xf7, 0x4f, 0x52,253,2},
    {0xf6, 0xec, 0xea,380,2},
    {0xf8, 0xed, 0xef,381,2},
    {0xef, 0xee, 0x52,400,1},
    {0xf2, 0x55, 0x43,400,1},
    {0xe8, 0x55, 0x4e,400,1},
    {0xe8, 0xf8, 0x4e,400,1},
    {0xfc, 0x49, 0x53,400,1},
    {0x50, 0x45, 0x45,401,1},
    {0xf8, 0x48, 0x49,401,1},
    {0x50, 0x4f, 0x4f,401,1},
    {0xf9, 0xec, 0xfc,406,1},
    {0x50, 0x45, 0x54,406,1},
    {0xe8, 0xf9, 0x55,406,1},
    {0xe7, 0x49, 0x53,406,1},
    {0xe7, 0x45, 0x4c,407,1},
    {0xf9, 0x4e, 0x46,407,1},
    {0xe3, 0x49, 0x4e,408,1},
    {0xf6, 0xfa, 0xf5,409,2},
    {0x4d, 0x45, 0x0,409,2},
    {0xf7, 0xeb, 0xe8,409,2},
    {0x52, 0xfa, 0xfc,987,1},
    {0xf7, 0x4f, 0x41,988,1},
    {0xe9, 0x41, 0x56,989,1},
    {0xfd, 0xfe, 0x5a,1000,1},
    {0xe5, 0x48, 0x45,9999,3},
    {0x41, 0x4e, 0x44,9999,3}
};

const char long_d1[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0x6E,0xD1,0x68,0x44,0x3B,0x7C,0x2C,0xC4,0x77,0xA7,0x93,0x9F,0x54,0xBE,0xD7,
0xCE,0x3,0x2E,0x67,0xE,0x77,0x9B,0xBC,0x5D,0xBD,0xEF,0x97,0xF2,0x6B,0x48,0xA9,0x34,0xB7,0xFC,0xB3,0x73,0x59,
0x90,0x17,0xCE,0x8C,0xBE,0x93,0xEA,0xF,0x1F,0xB,0xF1,0x4D,0xDE,0xF,0xA1,0xB7,0x68,0x8E,0xF0,0xFA,0x1A,0xA,
0xD4,0x17,0x98,0xD7,0x77,0x5B,0xBD,0xDF,0x70,0x37,0x6E,0x63,0xCE,0xD7,0xD7,0x59,0xA8,0xC3,0xDD,0x26,0xAF,
0x11,0xED,0x71,0xDF,0x52,0x5C,0xCE,0xEC,0xFE,0x3B,0xE6,0x2D,0xFF,0x75,0x1B,0xC1,0x84,0xFD,0x8C,0xE7,0xE4,0x59,
0x3B,0x5F,0x60,0x5E,0xEF,0xA5,0x4B,0xBE,0xA3,0xA5,0xA5,0xFE,0x63,0x5D,0x85,0x83,0xDC,0xCF,0xC9,0x13,0x12,
0x95,0xDF,0x21,0x72,0xDE,0xAE,0xDE,0x7,0x19};
const char short_d1[]={0x4D,0x69,0x34,0xA2,0x95,0x1};
const char long_d2[]={0x63,0x21,0x5E,0xA6,0x45,0xE5,0x73,0xF2,0xBD,0xC0,0x20,0x2C,0x5F,0xF9,0x9C,0x7C,0x86,0xF3,0xF0,0x5E,0xEF,
0xA5,0x4B,0x7E,0x67,0xA1,0xAE,0xB5,0xB9,0xB8,0xE1,0x1A,0x5A,0x49,0x73,0x1B,0x73,0xBE,0x2D,0xB5,0x3A,0xEF,
0x14,0xB0,0x77,0x84,0xE5,0xB,0xCC,0xEB,0x9E,0x72,0xAF,0x31,0x7C,0xA4,0xD2,0x25,0x3F,0x43,0x6C,0x3A,0xBD,0x20,0xF7,
0xCB,0x84,0xC2,0xD3,0x8E,0xAF,0xA1,0x40,0xDD,0xF,0xEF,0x39,0x79,0x8D,0x68,0x7,0x19};
const char short_d2[]={0x4D,0xB2,0x50,0xD7,0xDA,0x7C,0x86,0x23,0x3};
const char long_d3[]={0x63,0x21,0xBE,0xB3,0xC0,0x1C,0xE1,0x75,0x9B,0xBD,0xBB,0xA4,0x3B,0x2,0x1D,0x87,0xE6,0x56,0xE5,0xD4,0x88,0x76,0xB8,
0x2B,0xDC,0xD3,0x80,0x7C,0x78,0xF7,0x43,0x3C,0x27,0x95,0xC7,0xFD,0x82,0x63,0xEB,0x28,0xF7,0x46,0x29,0x9F,
0xC2,0xBA,0x72,0xE5,0xDE,0x34,0x47,0xC8,0x78,0x4E,0xDE,0xEB,0x11,0xBA,0x38,0xC2,0xDB,0xC2,0xE8,0xB8,0xD6,
0xB,0xCC,0xDB,0x52,0xAB,0x73,0xF1,0x5A,0x57,0xEE,0x8D,0x56,0xE7,0x73,0x6A,0x88,0xE5,0x7C,0x4E,0x25,0xBF,0x93,
0xCE,0x1E,0x3E,0x7A,0xB8,0x1F,0x42,0xAF,0xB8,0x9C,0xF9,0x9C,0x54,0xBE,0x94,0x4F,0x3B,0x6E,0xD5,0x46,0xD8,0x2F,
0x30,0xAF,0xF7,0xD2,0x25,0xDF,0xA2,0x6A,0xE8,0xA7,0x80,0xE5,0x33,0x9E,0x93,0xB7,0xAB,0xF7,0xE1,0x6E,0x93,0xF7,
0x7A,0x84,0x1E,0xF7,0xD7,0x90,0x52,0x69,0x8E,0xF0,0xB6,0xD4,0xEA,0x1C,0x64};
const char short_d3[]={0x4D,0x2B,0xA7,0x46,0xB4,0x32};
const char long_d4[]={0x12,0x97,0xD6,0xCE,0x6B,0x44,0xFB,0x70,0x8,0xFB,0x8,0xF7,0x34,0x20,0x1F,0xDE,0xFD,0x10,0xC3,0x5D,0xA0,0xB9,
0x70,0x66,0xF4,0x9D,0x54,0xFF,0x6B,0x48,0xA9,0xFB,0x39,0x79,0xBB,0x7A,0x7F,0x81,0x79,0xBD,0x97,0x2E,0x79,0x3B,
0xC2,0x10,0x9E,0x65,0x75,0xDE,0xC6,0x9C,0x5F,0x67,0xA1,0xEE,0xC7,0xBA,0xA,0x7,0xB9,0x8F,0xB9,0xBF,0x12,
0x52,0x39,0x5C,0xC2,0xA,0x29,0x8F,0xF9,0x59,0xB0,0xDC,0xAF,0xF7,0xD2,0x25,0xBF,0xCE,0x2,0xC3,0x8E,0xD4,0xDB,
0x98,0xF3,0x86,0x6B,0x68,0x25,0xCD,0x2D,0xA1,0x40,0xDD,0xC3,0x9B,0x2D,0x84,0x44,0x58,0xEE,0x7,0x3C,0x27,0x6F,
0x57,0xEF,0x57,0x3A,0xCA,0x4D,0xC8,0x4B,0x91,0xF6,0x7E,0x78,0x1F,0xA9,0x1A,0xBC,0x8B,0xD1,0xC6,0x20,0x3};
const char short_d4[]={0x4D,0xAA,0x7,0xC8,};
const char long_d5[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0xAE,0x11,0xED,0xD,0xD7,0xD0,0x4A,0x9A,0xDB,0x98,0xF3,0x6B,0xA9,0x94,0xE6,
0x76,0x75,0x10,0x79,0x4F,0x28,0x60,0xA,0xE5,0xB,0xCC,0x73,0xF2,0x76,0xF5,0xBE,0x5F,0xCA,0xAF,0x21,0xA5,
0xD2,0xDC,0xC6,0x9C,0x37,0xA5,0x8D,0xDB,0xD5,0xBB,0x53,0xE,0x75,0xB8,0xDB,0xE4,0x2B,0xDB,0xD8,0xCE,0xA4,0xF2,
0xB8,0xBF,0xC6,0xF6,0x5F,0x60,0xDE,0xA,0xCF,0xEB,0x34,0x8B,0xE7,0xA4,0xF2,0xB8,0x9F,0x93,0xB7,0xB4,0xF6,0xBE,
0x34,0x70,0xA5,0x83,0xE,0xBF,0xFD,0x9D,0x6C,0x8F,0xF0,0xFA,0x1A,0xA,0xD4,0x17,0x98,0xD7,0x7B,0xE9,0x92,
0xB7,0x11,0x4C,0xD8,0xCF,0x78,0x4E,0xDE,0xE6,0xCE,0x77,0x5C,0xCE,0x24,0xEC,0xE7,0xE4,0x35,0xA2,0x1D,0x64};
const char short_d5[]={0x4D,0x7B,0xAD,0x8D,0x6B,0x44,0x2B,0x3};
const char long_d6[]={0x63,0x21,0xBE,0xB3,0xC0,0xBC,0xF2,0x39,0x79,0x2B,0x32,0xA3,0x7D,0x78,0xCF,0xC9,0xEF,0x2C,0xD4,0xB5,0x36,
0x87,0x8F,0x85,0xF8,0x26,0x9F,0x93,0x6F,0x4B,0xAD,0xCE,0x3B,0x5,0xEC,0x1D,0x61,0xF9,0x2,0xF3,0x9C,0xBC,
0xA7,0xDC,0x6B,0x5C,0x8A,0x1B,0xAD,0xCE,0x7B,0x1A,0xED,0x85,0xB3,0xB3,0x50,0xF7,0xE2,0x19,0x31,0xC8,};
const char short_d6[]={0x4D,0xB2,0x50,0xD7,0xDA,0xBC,0x15,0x99,0xD1,0xCA,};
const char long_d7[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0xDE,0x4B,0x97,0xBC,0x46,0xB4,0xB7,0x71,0x9D,0x9F,0xB5,0x6F,0x57,0xEF,0xFB,
0x6B,0x48,0xA9,0x34,0xB7,0x31,0xE7,0xED,0xEA,0xDD,0x29,0x87,0xFA,0x2,0xF3,0xBA,0x53,0x8,0x49,0xF3,0x95,0xD8,
0x11,0x96,0xC3,0x25,0xDE,0x4B,0x97,0x7C,0x96,0xC3,0x9D,0xEA,0x1F,0xF7,0x2B,0xEF,0x87,0xD0,0x77,0x7A,0x79,0x7B,
0x62,0xDF,0x79,0x3F,0xC4,0xED,0xEA,0x8D,0x7,0x3C,0x27,0xBF,0xC3,0xCB,0xAF,0xA5,0xE,0xF3,0x39,0x2B,0xBF,
0x86,0x94,0xBA,0x9F,0x93,0xF7,0x7A,0x84,0xE,0x32};
const char short_d7[]={0x2E,0xD0,0x5C,0x23,0x5A,0x19};
const char long_d8[]={0x63,0x21,0xBE,0xB3,0xC0,0x3C,0x44,0x6E,0x34,0xFC,0x8,0xD8,0x7B,0xBD,0xA9,0xE2,0xBA,0x86,0xC6,0xDE,0xB1,0x38,0xC2,
0x73,0xF2,0x7B,0x96,0xE1,0xC3,0x7B,0xBD,0xAD,0x25,0xA0,0x87,0x2B,0x21,0x3F,0x6E,0x2D,0x21,0x3A,0xD6,0x53,
0xC9,0xE1,0x63,0x21,0x5E,0xA6,0x45,0xE5,0x73,0xF2,0x52,0xA4,0xFD,0xF0,0x3E,0x52,0x35,0x78,0x17,0xA3,0x8D,0xE7,0xD4,0x10,
0xCB,0xF9,0x9C,0x7C,0x5B,0x6A,0x75,0x7E,0x8D,0x2E,0x5A,0xD8,0xF,0xEF,0xF5,0xDD,0x56,0xEF,0x77,0x42,0xD7,0xF9,0xF1,
0x12,0x3B,0x8F,0x70,0x4F,0x3,0xF2,0xE1,0x3D,0x27,0xDF,0xAB,0xC1,0x41,0x6};
const char short_d8[]={0xEE,0x56,0x6A,0x8,0x8B,0x8F,0x5B,0x4B,0x88,0x8E,0xF5,0x54,0x52,0x6};
const char long_d9[]={0x63,0x21,0x5E,0xCA,0x23,0xDC,0xD3,0x80,0x7C,0x78,0xAF,0x7B,0x21,0x20,0xB,0x61,0x71,0x88,0xBC,0x57,
0x7A,0x4F,0xA3,0x7D,0x4E,0xBE,0x57,0x83,0xDF,0x33,0x94,0xC3,0x25,0xEE,0x54,0xCE,0x77,0x96,0xD9,0x17,0x8E,0x5D,0x6A,
0xF6,0xE2,0x19,0x76,0xA9,0xD9,0xCF,0xC9,0xAF,0x98,0xFE,0x57,0x42,0x2A,0x1F,0xDE,0x47,0x28,0x25,0x40,0xD,0x32};
const char short_d9[]={0xEE,0x56,0x6A,0x8,0x8B,0x8F,0xE7,0x10,0x90,0x85,0x20,0x3};
const char long_d10[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0xBE,0xDD,0x11,0xA5,0x3C,0xC2,0x73,0xF2,0x2B,0xA6,0xFF,0x95,0x90,0xCA,0xC5,
0xB7,0x50,0xD,0x1,0x86,0xE6,0x96,0xFF,0xFA,0x3A,0x85,0xAE,0xF3,0x5,0xE6,0x91,0x93,0x7A,0x4B,0x60,0x37,0x8,
0xCB,0x3D,0x7C,0x2C,0xC4,0x3D,0xB2,0xBF,0xBE,0x3B,0x2E,0x67,0xDE,0x52,0x72,0x7C,0x78,0xAB,0x87,0x8D,0xB0,0x1C,0x64};
const char short_d10[]={0xEE,0xEA,0x38,0xD4,0x6F,0x77,0x44,0x29,0x65};
const char long_d11[]={0x63,0x21,0x5E,0xCA,0xDB,0xD5,0x1B,0x8,0xCB,0x7,0xBC,0xAE,0x51,0x66,0xB8,0x8B,0xA5,0x8A,0xB5,0xE4,0x7E,0x2B,
0x76,0xDE,0xA9,0xBD,0x3F,0xA9,0x5C,0xBC,0xF6,0x73,0xF2,0xD5,0x3B,0xFD,0x7D,0x8B,0x3D,0xEC,0x97,0xF2,0x19,
0xF1,0xDD,0x56,0xEF,0x2F,0x30,0xCF,0x88,0xEF,0x24,0x9D,0x7B,0xA1,0xCF,0xC9,0x76,0x78,0x93,0xB6,0x7A,0xFF,0x9E,
0xE1,0xEC,0x6F,0xA1,0x1A,0x2,0xCC,0x73,0xF2,0x1A,0x65,0x16,0xF7,0x43,0x7C,0x2D,0x38,0x21,0xA9,0xAF,0x5B,
0xD5,0xA0,0xFA,0x8B,0xD7,0x67,0x59,0x54,0x53,0x7B,0x52,0xFD,0x87,0xBE,0x6E,0xE1,0xEA,0xAF,0x9D,0x2F,0x30,0x6F,
0x23,0x43,0x2D,0x6C,0xF0,0x7B,0x86,0x33,0xC8,};
const char short_d11[]={0xEE,0xEA,0x38,0xD4,0x6B,0x94,0x59,0x7C,0x87,0xC8,0x29,0x3};
const char long_d12[]={0x63,0x21,0x3E,0x4B,0xCA,0x97,0x2A,0x4A,0x69,0x5E,0xF9,0x9C,0x3C,0x21,0xB5,0x60,0xE5,0x33,0x9E,0x93,
0x97,0x62,0xEF,0xB5,0xE4,0xE2,0x16,0x37,0x1A,0x3E,0x27,0xAF,0x51,0xE6,0x39,0x2B,0xEF,0xD4,0xDE,0xDC,0xCF,
0xC9,0xB,0xC7,0xA1,0xDE,0x29,0xCD,0x87,0x77,0xCC,0xE1,0x63,0x21,0xBE,0x16,0x9C,0x90,0xD4,0x23,0xBC,0xBE,
0x33,0x80,0x6D,0xED,0x0,0xC9,0x7D,0x3B,0xB4,0xB1,0x67,0x38,0xF7,0x34,0xDA,0x4F,0x2A,0x7,0x19};
const char short_d12[]={0xEE,0xEA,0x38,0xD4,0x6B,0x94,0x59,0x1C,0x42,0x73,0xCA,};
const char long_d13[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0x9E,0xBE,0x83,0x6B,0xF5,0xEF,0xB6,0x7A,0xFF,0x2C,0xB5,0x42,0xE8,0x70,0xB7,0x49,
0xE5,0x71,0xBF,0xE0,0xD1,0xCD,0x3D,0xDC,0x93,0xDA,0x16,0x48,0xEE,0x5B,0x51,0xF9,0xB2,0xA,0x4C,0x0,0xCD,
0x3,0x9E,0x93,0xDF,0x33,0x94,0x47,0xB8,0x55,0xE6,0x7B,0x96,0xC3,0xE1,0x63,0x21,0xBE,0xC9,0x17,0x3C,0x8C,
0x71,0xD9,0x23,0x1A,0x8,0xCB,0x3B,0xB1,0xF3,0x8,0xCF,0xC9,0xF7,0x6A,0xF0,0x19,0x37,0xEC,0xD8,0x62,0xBE,0xBE,
0xCE,0x2,0x60,0x3F,0xC2,0x73,0xF2,0xB3,0xD4,0xA,0xA1,0x83,0xC};
const char short_d13[]={0x4D,0xDA,0xEA,0xFD,0xB3,0xD4,0xA,0xA1,0x32};
const char long_d14[]={0x63,0x21,0xBE,0xB3,0xC0,0x1C,0xE1,0x39,0xF9,0x16,0x8D,0xE9,0x7C,0x78,0xAF,0xEF,0xB6,0x7A,0xFF,0x76,0x47,0x94,
0x72,0xF1,0xF1,0x12,0x3B,0x5F,0x56,0x48,0xF9,0x91,0xAA,0xC1,0xBB,0x18,0x6D,0xC,0x6F,0xB6,0xD7,0x8A,0xE6,0x76,0x49,0xB9,0xBF,
0x46,0xCB,0x7B,0x1A,0xED,0x73,0xF2,0xBD,0x1A,0x7C,0xC6,0x73,0xF2,0x7B,0x86,0x72,0x71,0x60,0xA9,0xE5,0xF,0x77,
0x4D,0xC9,0xFD,0xFA,0x3A,0x4B,0x5B,0x84,0xE5,0x9D,0x5E,0x2B,0x5F,0x60,0x9E,0x93,0xCA,0xE3,0x7E,0xBD,0x63,
0x66,0xE7,0xAD,0xD2,0xDB,0x98,0xF3,0x59,0x56,0xE7,0x7E,0x88,0xDC,0x68,0x38,0xC8,};
const char short_d14[]={0x23,0x85,0xCD,0x9D,0xDF,0xEE,0x88,0x52,0xCA,};
const char long_d15[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0xBE,0xDB,0xEA,0xFD,0x5,0xE6,0x69,0xE3,0x4E,0x9A,0x57,0xEF,0xF4,0xDF,0x11,
0x68,0x6E,0x63,0xCE,0x67,0xF5,0xFE,0xA8,0xC6,0x7E,0x81,0xF9,0x16,0xAA,0x21,0xC0,0xD0,0xDC,0xF2,0x3F,0x71,0x39,
0x6F,0x57,0xEF,0x7B,0x78,0x13,0xB1,0xCE,0x3B,0xBD,0x56,0xEE,0x97,0xF2,0x6B,0xB4,0x6D,0xC0,0xB,0xCC,0xD7,0x59,0x5A,
0x6B,0x52,0x71,0x27,0xAE,0x9F,0x54,0xE,0x1F,0x89,0x25,0xE5,0x7E,0x81,0x79,0xAD,0xA1,0xB0,0x9F,0xB3,0xF2,
0xB3,0xA4,0xBC,0x57,0xBD,0x13,0xEE,0x69,0xB4,0xCF,0xC9,0xA7,0x92,0xFB,0xAB,0xA,0x58,0xE7,0x5,0x18,0xEA,
0xFD,0x10,0x7A,0x8F,0xCC,0xD7,0xBE,0x1F,0xE2,0x76,0xF5,0xC6,0xAB,0xD,0x58,0x3E,0x27,0xDB,0x41,0x6};
const char short_d15[]={0x12,0xBD,0xD3,0x97,0x1};
const char long_d16[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0x6E,0xB1,0x44,0xA2,0x27,0xFA,0xAD,0xC8,0x2,0x5C,0xAB,0x7F,0x59,0x6A,0x8,
0xF,0x78,0x4E,0x7E,0xCF,0x50,0x3E,0xBC,0x8F,0x54,0xD,0xDE,0xC5,0x68,0x63,0x71,0x4F,0xF4,0xFE,0xF0,0x5E,0x1A,0x6D,
0x25,0xAE,0x9F,0x54,0x6B,0xF,0x97,0xF8,0xCE,0x4A,0xC1,0x87,0xF7,0x3A,0xF8,0xAD,0x33,0xCF,0xD6,0x62,0xEF,0xB8,
0x27,0xF7,0x73,0xF2,0x4E,0xAF,0x95,0xC3,0x25,0xBE,0xDB,0xEA,0xFD,0xCB,0x4A,0xBE,0xB3,0xCC,0x7E,0xC6,0x73,0xF2,
0xAC,0x9D,0x8B,0x67,0xD8,0xA5,0x66,0x3F,0x27,0x6F,0x95,0xC2,0x2D,0x4E,0x4,0xF3,0x9C,0xBC,0x14,0x7B,0xAF,
0x41,0x6};
const char short_d16[]={0x4D,0x23,0xB,0x70,0xAD,0xFE,0x65,0xA9,0x21,0xC8,};
const char long_d17[]={0xE3,0x16,0xF8,0xD7,0xD8,0xDC,0xF,0xEF,0xAD,0xE8,0x89,0x4E,0xE7,0xF7,0x2C,0x87,0xFB,0x5,0xE6,0x6B,0xF4,0x10,
0xBA,0xBF,0xD4,0xB0,0xF,0xAC,0xEC,0xFE,0x4B,0x43,0x80,0xB9,0x1F,0x62,0xF1,0xB5,0x94,0xE6,0x5E,0xE8,0x2D,0xFF,
0xBB,0x81,0xDD,0x13,0xFD,0xB3,0xC0,0xEC,0x41,0x6};
const char short_d17[]={0x2E,0xC4,0xE6,0x97,0xA5,0x86,0x20,0x3};
const char long_d18[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0xAE,0x11,0xED,0x6D,0xCC,0xF9,0x4D,0x29,0xB5,0xFA,0x2D,0x5C,0xFD,0xB5,0x73,
0x7F,0xA,0x58,0xDE,0xD3,0x68,0x9F,0x93,0xD7,0x8,0xEF,0x5,0xE6,0x75,0x3B,0xB4,0x81,0xB0,0xBC,0x45,0x58,0xE7,
0x70,0x37,0x3B,0xDE,0x46,0x86,0x5A,0xD8,0xE0,0x7E,0x29,0xEF,0x94,0x36,0x68,0x1E,0xF0,0x9C,0x7C,0xE4,0xA4,0x7E,
0xA3,0xE1,0xC3,0x7B,0x4E,0x5E,0x23,0xDA,0xC5,0x11,0xEE,0x69,0x40,0x3E,0xBC,0xD7,0x7B,0xE9,0x92,0xF7,0x4,
0xFB,0xD7,0x82,0x41,0x6};
const char short_d18[]={0x4D,0x71,0xF5,0xD7,0xCE,0x17,0x98,0xB7,0x91,0xA1,0x16,0x36,0xF8,0x3D,0xC3,0x91,0x1};
const char long_d19[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0xBE,0xDB,0xEA,0xFD,0x7B,0x86,0x33,0x7C,0xFC,0x5C,0x43,0x2B,0x51,0xCA,0xB7,0xA5,
0x56,0xE7,0x9D,0x5E,0xC9,0xFD,0x52,0x7E,0xA,0x58,0x3E,0xE3,0x39,0x79,0xBB,0x7A,0x5F,0xDC,0x9E,0xB8,0xCE,0xEF,
0x19,0xF6,0x5A,0x9B,0xCF,0xC9,0x3B,0x1A,0x46,0xAC,0xB9,0xBF,0xA3,0x9B,0xE1,0x23,0x94,0x12,0xA0,0x8E,0xFB,0x6B,
0x8F,0xCD,0x67,0xBC,0x2D,0xB5,0x3A,0xEF,0x8E,0x28,0x55,0xE4,0x7E,0x81,0x79,0x4E,0x7E,0x67,0x0,0x8F,0xFB,
0x76,0x68,0x83,0xE6,0x93,0xCA,0x41,0x6};
const char short_d19[]={0x4D,0x32,0x80,0x6D,0xED,0x0,0xC9,0x7D,0x3B,0xB4,0xB1,0x67,0x38,0x32};
const char long_d20[]={0x63,0x21,0x5E,0xCA,0xEF,0xD4,0x2,0x43,0x73,0x84,0xD7,0x35,0xCA,0x2C,0x2E,0xA5,0xFA,0x5F,0x7B,0x6C,0x3E,
0xE3,0x39,0xF9,0x5E,0xD,0xE,0x32};
const char short_d20[]={0x6E,0x36,0xEE,0xF4,0xAF,0x51,0x46,0x6};
const char long_d21[]={0x63,0x21,0x5E,0xCA,0x23,0xBC,0xBE,0xDB,0xEA,0xFD,0x7B,0x86,0x72,0xB8,0xDB,0xE4,0x9D,0x5E,0x2B,0x8F,0xFB,
0x16,0x4B,0x24,0x7A,0xA2,0xBF,0xC0,0x3C,0x27,0xDF,0x2B,0xF9,0x36,0x14,0x10,0x96,0xDF,0x2,0x8E,0xFB,0x52,
0xAA,0x7F,0xA7,0xB3,0x76,0x41,0x2E,0x6E,0x89,0xBC,0x1F,0xE2,0xA5,0x3C,0x44,0x1E,0xE1,0x39,0x79,0xC5,0xE5,
0xCC,0xB7,0x11,0xE6,0x19,0x2F,0xC7,0x51,0xAE,0x58,0xC9,0x63,0xE,0x32};
const char short_d21[]={0x23,0x55,0x83,0xDF,0x33,0x94,0x32};
const char long_d22[]={0xCD,0x2A,0xC2,0xCA,0xBD,0xDF,0x54,0x71,0x5D,0x43,0x63,0xEF,0x38,0x82,0x14,0x93,0xFB,0x39,0x79,0xD7,0xAC,0x8E,0x5,
0x77,0x7F,0x34,0xA7,0x87,0x56,0x62,0xC0,0x9B,0xC4,0x8A,0x4C,0xFF,0x19,0x37,0xF1,0x35,0xC0,0xA3,0x12,0x56,0xEE,
0x4F,0x2A,0x5F,0xFB,0x7B,0xF2,0xB8,0x5F,0xF7,0x42,0x5B,0xEA,0x1D,0xE5,0x46,0x43,0xC8,0x17,0x98,0x7B,0x2,
0xC,0x75,0xF8,0x58,0x88,0xAF,0x5,0xDF,0xE4,0x73,0xF2,0xBD,0x1A,0xBC,0xA7,0xD1,0x3E,0x27,0x6F,0x23,0x98,
0xB0,0x9F,0xF1,0x9C,0xBC,0xCD,0x9D,0x2F,0x30,0xCF,0xC9,0x8B,0x2D,0xAA,0x7F,0x33,0x1F,0xDE,0xD7,0x59,0xA8,
0xFB,0x5,0xE6,0x86,0xBB,0xB1,0x9F,0xB3,0xF2,0xA5,0x7C,0x39,0x8E,0x86,0xA3,0x58,0xC9,0x23,0x7C,0x8B,0x75,
0xBE,0xEE,0xF4,0x5A,0x39,0xC8,};
const char short_d22[]={0x2E,0x6,0x78,0x54,0xC2,0xCA,0x6B,0x44,0x2B,0x3};
const char long_d100[]={0x6E,0x61,0xCA,0x3F,0xEE,0x4B,0x38,0x8A,0xFD,0xE3,0xED,0x2E,0x16,0x1F,0x6F,0x77,0xD1,0xC,0x77,0x69,0xF8,0x58,0x88,0xC5,0xDD,0x6F,0xB1,0x63,0x7D,0x4,
0xCC,0xC,0x45,0xC0,0xC5,0x4B,0x15,0xA5,0x34,0xF7,0xB9,0x93,0x6A,0xCA,0x3F,0xC2,0x47,0x28,0x25,0x40,0x2D,0x1E,
0xF0,0x9C,0xFC,0x9E,0xA1,0x7C,0x78,0xCF,0xC9,0x5B,0x2C,0x91,0xE8,0x89,0xFE,0x91,0xAA,0xC1,0xBB,0x18,0x6D,0xC,0x1F,
0xB,0xF1,0x52,0x7E,0xC6,0x4E,0x9A,0x57,0x3E,0x27,0xDF,0xD6,0x12,0xD0,0xC3,0x95,0x90,0x1F,0x1,0x7B,0xAF,0x37,
0x55,0x5C,0xD7,0xD0,0xD8,0x3B,0xC6,0xD3,0x37,0xAB,0x8,0x2B,0xF7,0xFE,0x48,0x62,0xC5,0xDE,0xEB,0x4D,0x15,0xD7,0x35,0x34,0xF6,
0x8E,0xE3,0xBE,0xA3,0x74,0x4A,0x11,0x96,0xF7,0x42,0x9F,0x93,0x6F,0x82,0xBD,0x71,0x17,0xA2,0xCC,0x5D,0xA8,0x95,0x8B,0xD7,
0xC7,0xBB,0x19,0x8B,0x66,0x34,0xA3,0x19,0x8D,0xF6,0x5A,0xBD,0xFB,0xD7,0x42,0x73,0x8B,0x69,0x93,0x70,0x17,0xB,0x35,0x8E,0x70,0xF7,0x97,
0xBE,0x93,0x2F,0x30,0x6F,0x96,0xD,0x84,0xE5,0x11,0xEE,0xE2,0x44,0xA8,0xC5,0x33,0x6E,0xF1,0x26,0x80,0xB7,0xFC,0xAF,
0xA5,0xC3,0xA8,0x51,0x63,0x21,0xAE,0x74,0x94,0x9B,0x90,0x77,0x75,0x93,0x58,0xDC,0xB,0x1,0x86,0xE6,0x96,0x7F,0x3F,0x84,0xDE,
0xAB,0x9C,0xD4,0xC5,0x73,0xF2,0x6B,0xB4,0x4E,0x81,0xFF,0x9C,0x95,0xB7,0x4,0xF6,0x7C,0x4E,0x7E,0x2D,0x7D,
0x4E,0xBE,0x59,0x45,0x58,0xB9,0xF7,0xC7,0x4B,0xEC,0xBC,0x15,0x62,0x39,0xF3,0x19,0x17,0x9B,0x37,0x42,0x11,0x96,0xCF,
0xC9,0x6B,0xF5,0xEE,0xF,0x77,0x9B,0xFC,0x5A,0x7A,0xDC,0xDF,0xC2,0x71,0x62,0xD3,0x3C,0xE3,0x16,0x6F,0xD8,0x51,
0x4A,0xA5,0x79,0x86,0x29,0x7F,0xF8,0x58,0x8,0xBD,0x46,0xE7,0x6D,0xEC,0xFD,0x16,0x9F,0xF1,0xDA,0x1B,0x77,0x3E,
0x27,0x6F,0xD8,0x51,0x4A,0xF5,0x17,0x37,0xF1,0x7A,0x72,0xE7,0x8D,0xA2,0x94,0x2F,0x30,0x6F,0xAB,0xC1,0x6F,
0xA1,0x3C,0xA5,0x54,0x3F,0x27,0xC2,0xF2,0xB8,0xEF,0x50,0x3D,0xAE,0xD9,0xFD,0x7B,0x2,0xD6,0xC4,0x80,0xEA,0x83,0xC};
const char short_d100[]={0xAE,0x90,0x1A,0x46,0xAC,0x89,0x1,0x32};

const room_code original_connections[23 ][6 ]={
    {0,0,0,2,0,0,},
    {3,4,1,0,0,6,},
    {0,2,0,0,0,0,},
    {2,0,0,0,0,0,},
    {22,6,0,0,0,0,},
    {5,7,-1,8,2,0,},
    {6,0,0,0,0,0,},
    {9,16,6,0,0,0,},
    {0,8,22,0,10,0,},
    {11,255,0,15,0,9,},
    {12,10,0,0,0,14,},
    {0,11,0,0,0,13,},
    {0,14,0,0,12,0,},
    {13,15,0,0,11,0,},
    {14,0,10,0,0,0,},
    {8,17,255,0,0,0,},
    {16,0,0,0,0,0,},
    {0,0,0,11,0,0,},
    {0,0,0,12,0,0,},
    {0,0,0,21,0,0,},
    {0,0,20,0,0,0,},
    {0,5,0,9,0,0,},
    {0,0,0,0,0,0,}
};
room world[23 ]={
    {1,long_d1,short_d1,{0,0,0,2,0,0,}},
    {2,long_d2,short_d2,{3,4,1,0,0,6,}},
    {3,long_d3,short_d3,{0,2,0,0,0,0,}},
    {4,long_d4,short_d4,{2,0,0,0,0,0,}},
    {5,long_d5,short_d5,{22,6,0,0,0,0,}},
    {6,long_d6,short_d6,{5,7,-1,8,2,0,}},
    {7,long_d7,short_d7,{6,0,0,0,0,0,}},
    {8,long_d8,short_d8,{9,16,6,0,0,0,}},
    {9,long_d9,short_d9,{0,8,22,0,10,0,}},
    {10,long_d10,short_d10,{11,255,0,15,0,9,}},
    {11,long_d11,short_d11,{12,10,0,0,0,14,}},
    {12,long_d12,short_d12,{0,11,0,0,0,13,}},
    {13,long_d13,short_d13,{0,14,0,0,12,0,}},
    {14,long_d14,short_d14,{13,15,0,0,11,0,}},
    {15,long_d15,short_d15,{14,0,10,0,0,0,}},
    {16,long_d16,short_d16,{8,17,255,0,0,0,}},
    {17,long_d17,short_d17,{16,0,0,0,0,0,}},
    {18,long_d18,short_d18,{0,0,0,11,0,0,}},
    {19,long_d19,short_d19,{0,0,0,12,0,0,}},
    {20,long_d20,short_d20,{0,0,0,21,0,0,}},
    {21,long_d21,short_d21,{0,0,20,0,0,0,}},
    {22,long_d22,short_d22,{0,5,0,9,0,0,}},
    {100,long_d100,short_d100,{0,0,0,0,0,0,}}
};

const char areyousure[]={0x12,0xCA,0xFB,0x21,0xBE,0x85,0x72,0x74,0x77,0xF3,0x1D,0x5E,0x72,0x4C,0xF2,0x5,0xE6,0xCA,0x14,0xA,0x47,0xEF,0x3E,
0xF7,0x20,0x3};
const char exitrestart[]={0x92,0xEE,0x4B,0xBE,0xC0,0x5C,0x99,0x42,0xE1,0x19,0xE7,0x68,0x98,0x8B,0x17,0xF8,0x39,0x11,0x96,0x67,0xDF,0x7C,
0xC6,0x95,0x3B,0x4B,0x73,0x90,0x1};
const char header[]={0x4D,0xB0,0x37,0x3E,0x7E,0xB1,0x73,0x71,0xA7,0x34,0x3F,0xDE,0xA3,0xC6,0x5F,0x52,0x34,0x7C,0x53,0xB1,0xAE,0x38,0x6A,0x4,0xEA,0xC6,0x80,0x8F,
0xF7,0xD0,0x8C,0x61,0xBC,0x17,0x6F,0x42,0x27,0x87,0x8F,0x6C,0x33,0x46,0xB6,0x19,0x77,0xF9,0x26,0x74,0xF2,0x23,0xDB,0x8C,0x91,0x1D,0xD9,0x51,0x12,0xCD,0x6C,0xF2,0xF1,0xE4,0xD0,0xC,0x19};
const char message1[]={0xAE,0xF0,0x9C,0x7C,0x8B,0xAA,0xA1,0xF7,0x43,0x7C,0x93,0xAF,0xFB,0x21,0x60,0x79,0x3B,0xDA,0x82,0xC5,0xCB,
0xA,0x91,0x1F,0xDF,0x7B,0x79,0x77,0xD9,0x11,0x9E,0xD5,0xFB,0xE2,0x36,0xE6,0xBC,0xA5,0x61,0x83,0x4B,0xA5,0xF9,0x2C,0xD4,0xC5,
0xAD,0x2E,0x78,0xFA,0xDC,0x2F,0x30,0x67,0xE7,0xB2,0x20,0xBB,0xFF,0xD2,0x75,0xD2,0x9C,0x3E,0x2D,0xD,0x7B,0x2F,
0xBE,0xF6,0x32,0x47,0x78,0x7D,0x63,0xEB,0x74,0xBE,0xC0,0x9C,0x9D,0xCB,0x82,0xBC,0x51,0xEE,0x3D,0xDC,0x6D,
0x56,0x4A,0xEE,0xFB,0x21,0x6,0x19};
const char message2[]={0x6E,0x76,0xDC,0xC3,0x55,0xEC,0x37,0x25,0x8C,0x57,0xB5,0x8,0xCF,0x49,0xE5,0x20,0x3};
const char message3[]={0xAE,0x79,0xDC,0x2F,0xB8,0x6B,0xEB,0x50,0xB1,0xFA,0x77,0x16,0xEA,0x5A,0x9B,0x8B,0x2B,0x7B,0x25,0x4A,0xD9,0xFD,
0xF7,0xD2,0x25,0x7,0x19};
const char message4[]={0x63,0x21,0x6E,0x57,0x6F,0x3C,0xE0,0x75,0x3B,0xC2,0x10,0xEE,0x94,0xBA,0x23,0x98,0xF7,0x7A,0x84,0x2E,0xBE,0x86,0x94,
0x4A,0x73,0x1B,0x73,0x7E,0x2D,0x75,0x98,0x7B,0x90,0x1};
const char message5[]={0xAE,0x79,0x43,0x7,0xD7,0xDC,0xDF,0x2B,0x81,0xFB,0x9E,0x46,0xFB,0xD1,0x4B,0xD1,0x48,0xEE,0x8F,0xCB,0xAC,0x36,0xD4,0x99,
0xB1,0x71,0xF,0x32};
const char message6[]={0x6E,0x93,0xCA,0x97,0xF2,0xF5,0x55,0x69,0x8,0xE3,0x53,0x8B,0xD7,0x8D,0x72,0x6F,0xEA,0xE2,0xF5,0x5E,0xBA,
0xE4,0x5B,0x54,0xD,0x7D,0x81,0x79,0xBD,0x97,0x2E,0xF9,0x2C,0xAB,0xF3,0x36,0xE6,0xFC,0x3A,0xB,0x75,0xF,0x77,
0x9B,0xF4,0x5F,0xCA,0xB7,0x65,0x78,0x84,0x9B,0xD2,0xC6,0xED,0xEA,0x20,0xF2,0x76,0x84,0x59,0x7C,0x2D,0x95,0xD2,
0xDC,0xC6,0x9C,0xAF,0x3,0xC3,0xA5,0xB,0x84,0xC2,0xBD,0xB,0x56,0x7E,0xA7,0xDF,0x39,0xC8,};
const char message7[]={0xAE,0x29,0xB9,0x5F,0xD7,0xCA,0x49,0xBD,0x29,0x6D,0xDC,0xAE,0xDE,0x9D,0x72,0xA8,0x8B,0x6B,0xF4,0xEE,0xD2,0x51,0x84,
0xA4,0xB9,0x8D,0x39,0xDF,0x71,0x39,0x93,0x7A,0xC3,0x35,0xB4,0x12,0x3,0xF6,0xD,0x1D,0x5C,0x13,0x61,0xF9,
0xCE,0x92,0x72,0xBF,0xC0,0x7C,0xA7,0xDF,0x71,0xD3,0xDC,0xEB,0x61,0x53,0xF7,0x20,0x3};
const char message8[]={0x63,0x21,0xBE,0xC9,0xE7,0xE4,0xBD,0x10,0x90,0x85,0x70,0x8B,0x5E,0x28,0x9F,0x93,0x97,0x62,0xEF,0xF5,
0x2,0xF3,0xBA,0x14,0x69,0x3F,0xBC,0xE7,0xE4,0x7B,0x35,0x38,0xC8,};
const char message9[]={0x6E,0x93,0xD7,0xD8,0xDC,0x67,0x5B,0x50,0xC9,0xD7,0xD,0x3B,0xAE,0x95,0xFC,0x5E,0x9,0x39,0xC8,};
const char message10[]={0x6E,0x93,0x37,0x5A,0xE,0x15,0xB9,0x5F,0x60,0x9E,0x93,0xB7,0xAB,0x77,0xA7,0x1C,0xEA,0x4B,0x79,0xA5,0x19,
0xEE,0x36,0x2B,0xDF,0x56,0x83,0xFB,0x5,0x47,0x48,0xC5,0xA5,0x40,0x58,0x7E,0xD,0x48,0xAD,0x9D,0xB7,0x31,0xE7,
0x73,0xF2,0xBD,0x74,0xC9,0x67,0x39,0xDC,0xA9,0xFE,0x33,0x9E,0x93,0x67,0xED,0x5C,0x5C,0xE9,0x28,0x37,
0x21,0x11,0x96,0xAF,0x4F,0x1,0x89,0xB0,0xFC,0x5E,0x9,0x1C,0x64};
const char message11[]={0x6E,0x93,0x6F,0x52,0xD2,0x0,0xA0,0x22,0xBF,0x96,0x3A,0xCC,0xE3,0x7E,0x78,0x2F,0x38,0x42,0x12,0x36,0xAF,
0x34,0x2F,0x30,0x57,0x3A,0xCA,0x4D,0xC8,0xFD,0xCE,0xF2,0xFC,0x2B,0xC2,0xCA,0x12,0xA3,0xD,0x32};
const char message12[]={0x6E,0x93,0x77,0xA,0x21,0x11,0x96,0xFB,0x1,0xCF,0xC9,0xAF,0xC4,0x8E,0xB0,0xBC,0xD2,0x51,0x6E,0x42,0x7E,0xFC,
0x58,0x50,0x9F,0x2,0x12,0x61,0x79,0x1B,0x73,0x7E,0x52,0xF,0x7E,0xEB,0xCC,0x3D,0xC8,};
const char message13[]={0x2E,0x52,0xB3,0x10,0xBA,0xBF,0x78,0x4E,0x5E,0x8A,0xBD,0xD7,0x71,0x5F,0x4A,0xF5,0xCF,0xCE,0x65,0x41,0x8E,0x23,0x3};
const char message14[]={0xEE,0x85,0x7D,0x8D,0xB6,0x20,0x71,0x1D,0x47,0x6};
const char message15[]={0xCD,0x96,0xEE,0x4E,0x7F,0xF1,0x26,0xB5,0xE4,0xE2,0x2E,0xC4,0x66,0x5B,0xEA,0xBF,0xC0,0xDC,0x85,0xD8,0x1C,0x47,0x6};
const char message16[]={0x6E,0xB5,0xDC,0xDF,0xE5,0x3F,0x27,0xC2,0x72,0x7F,0x8B,0x75,0xBE,0xF6,0x9B,0x8F,0x5B,0xA6,0x5A,0xDE,0xBD,0x52,0xE3,0x37,0x5F,
0xBC,0xB9,0xB,0xB1,0xEB,0xE3,0xA,0x30,0xD8,0x7C,0xF1,0xE6,0x2E,0xC4,0xAE,0x8F,0xDE,0xF3,0x70,0x45,0xA8,0x8E,0xBB,0xF9,0xE2,0x5,0xE6,0xCD,0x5D,
0x9C,0xA5,0x9D,0xFB,0x86,0x1F,0x17,0x7B,0xDF,0x43,0x73,0x19};
const char message17[]={0x6E,0x93,0xB7,0x2B,0xA9,0xC7,0xFD,0xB5,0xB3,0x74,0x90,0x1};
const char message18[]={0x4D,0xA2,0xE5,0xC3,0x7B,0xCE,0xD8,0x7C,0x29,0x9F,0xD1,0x5A,0x3B,0x3,0xB8,0xC7,0xB9,0x84,0x97,0xD4,0x57,0xEF,
0x8B,0xE7,0xC4,0x7D,0xDC,0xB7,0x67,0xE5,0xFD,0x10,0x92,0xE6,0x1C,0xCD,0xE1,0x9A,0x9F,0x54,0xE,0x32};
const char message19[]={0x6E,0x93,0xB7,0x94,0x1C,0x1F,0x7E,0x2D,0x55,0xE4,0x7E,0x4E,0x7E,0xB7,0xEC,0xFD,0xE1,0x3D,0x27,0xAF,0x51,
0xE6,0x46,0xEC,0x5C,0xDC,0xC3,0x3D,0x5F,0x60,0x5E,0x77,0x10,0xE8,0x7F,0xAF,0x84,0x7C,0x78,0x57,0x6E,0x84,0x41,
0x6};
const char message20[]={0xE3,0x16,0xF8,0x4F,0xDF,0xC1,0xB5,0xFA,0x3B,0x66,0x76,0x7E,0x86,0xD8,0xDC,0x8B,0x3B,0x85,0x90,0x34,0x47,0xB8,
0x53,0x3B,0xD9,0xBF,0x46,0xF,0xA1,0x7B,0xB8,0x2B,0xCC,0xB2,0x30,0xB,0x72,0x3F,0xBC,0x8F,0x50,0x4A,0x80,0x7A,
0x47,0x29,0x9F,0x93,0xCA,0x41,0x6};
const char message21[]={0x6E,0x93,0x5F,0xA7,0xD0,0x75,0x1E,0xF7,0xD,0xD,0xAE,0x95,0x34,0xCF,0x78,0x93,0x1C,0xEE,0xEE,0x62,0xC2,0x73,0xF2,
0x4D,0xCB,0x49,0xDC,0xF9,0x2,0x73,0xDC,0xAF,0xAF,0xD1,0x3A,0xA5,0x95,0x28,0x65,0xF7,0xBF,0xDB,0xEA,0xFD,0x2E,0x44,
0x5B,0xC0,0xED,0x8E,0xE0,0x2D,0x81,0xDD,0x20,0x2C,0x87,0xBB,0x4D,0x1E,0x21,0xA9,0x18,0xFA,0x35,0x20,0xB,0x61,
0x7F,0x8D,0x1E,0x42,0x3D,0xD1,0xEF,0x29,0xF7,0x1A,0xDC,0x6F,0xCB,0xF0,0x16,0xD3,0x26,0xE1,0x39,0xF9,0xF1,0x70,0x1D,0x21,
0xE7,0xB,0xCC,0x73,0xF2,0xE3,0x31,0x82,0x6B,0xCE,0xAF,0x84,0x14,0x8A,0xDC,0x83,0xC};
const char message22[]={0x6E,0x93,0xCA,0x97,0xF2,0x75,0xAB,0x1A,0x54,0xFF,0x5,0xE6,0xF5,0x59,0x16,0xD5,0xD4,0x9E,0x54,0xFF,0xB5,
0x6F,0xB3,0xF7,0xD7,0x7E,0xDD,0xC2,0xD5,0x5F,0x3B,0x5F,0x60,0xDE,0x46,0x86,0x5A,0xD8,0xE0,0xF7,0xC,0xE7,0x19,
0xCF,0xC9,0xB3,0x76,0xE,0x32};
const char message23[]={0xA3,0x87,0xEF,0xEA,0x1C,0x64};
const char message24[]={0xCD,0x2A,0xC2,0xCA,0xBD,0x3F,0x92,0x58,0xB1,0xF7,0x7A,0x53,0xC5,0x75,0xD,0x8D,0xBD,0xE3,0xB8,0x3F,0x9E,0x1C,0xDF,0xFB,0x2C,0xDD,
0x8F,0x6E,0x5E,0x60,0x8E,0xFB,0x5,0x27,0x50,0x97,0x4C,0x5C,0x6F,0x47,0x5B,0xB0,0xB8,0x15,0xA,0x47,
0xC8,0x78,0x0,0x1F,0xDE,0x73,0xF2,0xD1,0xD,0x77,0xDE,0x35,0xAB,0x63,0xC1,0xBD,0x6A,0xB1,0x23,0xF7,0xF0,0x26,
0x93,0x9F,0xB5,0xBF,0x67,0x68,0xDE,0xEA,0x1,0x86,0x9F,0x85,0xBA,0x38,0xEE,0x2B,0x7B,0x25,0x4A,0xD9,0xFD,
0xE7,0x44,0x78,0x81,0x39,0x44,0x5E,0x4A,0xF5,0x9F,0xD5,0xFB,0xE2,0x96,0xC8,0x4F,0xEA,0xAD,0x30,0xFE,0x71,0xBF,
0x72,0x76,0x26,0xAE,0x2F,0x30,0x9F,0xD4,0x2F,0x95,0x84,0xD3,0xE7,0xFE,0x9E,0x8,0xBC,0x8D,0x39,0x5F,
0xEF,0xB8,0x9C,0xF9,0xF0,0x6E,0x98,0xD4,0x16,0xA1,0x12,0x3,0x86,0x8F,0x54,0x3B,0xF,0xB8,0x9C,0xB9,0xB8,0x1F,0xE2,
0xB3,0xCC,0xEB,0x4E,0x67,0xED,0x82,0xBC,0x41,0x0,0xEA,0x6D,0xCC,0xF9,0x49,0x5D,0xDC,0xC6,0x9C,0x2F,
0x38,0x47,0x73,0x47,0xE0,0xC6,0xE4,0xAD,0xC8,0xEC,0x7C,0x78,0x1F,0xB7,0x74,0x7C,0xD8,0x22,0xC4,0x88,0xDF,0x93,0x9F,0xB5,0x2F,
0xD,0xBF,0x96,0x34,0xCF,0x78,0x5B,0xE0,0xDF,0xE9,0xB5,0x72,0xBF,0x34,0x4,0x98,0xE7,0xE4,0xED,0x50,0xF3,
0x2,0xF3,0x8C,0x6E,0xEE,0x87,0x78,0x5B,0xE0,0xBF,0x80,0xAB,0x89,0xE4,0x7E,0x78,0x9F,0xD4,0x97,0x91,0x12,0x52,
0x28,0xF7,0x70,0x9,0x30,0xDF,0x93,0xEF,0x21,0xE5,0xFE,0x5A,0xBA,0x17,0xAF,0x7D,0x3F,0xC4,0x4D,0xC,0x32};
const char message25[]={0x4D,0x15,0xD7,0x35,0x34,0xF6,0x8E,0x1B,0xEE,0x55,0xD1,0xA2,0xB9,0x44,0xB7,0xA8,0xF9,0xDA,0xAF,0xB7,0x91,0x93,
0x7A,0x3B,0x44,0x37,0x37,0xDC,0xAB,0xA2,0xC5,0x4F,0xEA,0xC3,0x86,0xAF,0x13,0xBB,0x19,0xDE,0x64,0xF2,0xCA,0xBD,
0xA,0x9A,0x4F,0x6C,0x6F,0x4F,0xC2,0x27,0x6F,0xD7,0xFE,0x78,0x8F,0xEF,0x7D,0x96,0xEE,0x47,0x37,0x47,0x78,0x3D,0xB5,
0x10,0x6E,0x2B,0xD7,0xC6,0xE2,0xF6,0xA4,0xF2,0x93,0xEF,0xB1,0xF3,0x13,0xF7,0xBD,0xCA,0x49,0x1D,0xEE,0x1E,0xDF,
0x8A,0x9D,0xB7,0xF8,0x91,0x75,0xF7,0xF,0xFD,0xC8,0x8E,0xEF,0x7D,0x96,0xEE,0x47,0x37,0x8B,0xE3,0xFE,0xEE,0xB8,0x9C,0xD9,0xFD,
0x67,0xF5,0x4E,0x7D,0xCE,0x82,0xFB,0x21,0x16,0xB7,0x31,0xE7,0x2D,0xD,0x1B,0x3E,0xB,0xF5,0x5,0xE6,0x75,0x1B,
0xB7,0xE3,0xDF,0x62,0xA9,0x19,0xEE,0x1E,0x3F,0x6B,0xBF,0xBE,0x24,0x64,0xE7,0x77,0x96,0xF2,0x8,0x9F,0xB8,
0x6F,0x69,0xD8,0x70,0xFA,0xDC,0x83,0xC};
const char message26[]={0x6E,0x93,0x6F,0xB9,0xCE,0x2,0x5C,0xEF,0x68,0x58,0x65,0x75,0xFF,0xD,0xD2,0xD9,0xCF,0xC9,0x3B,0xA5,0xE5,0x79,0x8,
0xCF,0x49,0xE5,0xBD,0xD0,0xE7,0xE4,0xDB,0xC8,0x50,0xB,0x1B,0xDC,0x83,0xC};
const char message27[]={0xE3,0x59,0xF4,0xFE,0xF0,0xBE,0x9D,0x52,0xDE,0x29,0xCD,0x3D,0xC8,};
const char message28[]={0x63,0x21,0xDE,0x96,0xFF,0x35,0x5A,0xDE,0xAA,0xB5,0xF1,0x8C,0x2F,0x99,0xAF,0xAF,0xE1,0x79,0xE4,0x73,0x52,0xB9,
0x78,0xDD,0x94,0xFF,0xD0,0x17,0x44,0x4E,0xEA,0xE2,0x96,0xC8,0x43,0xE4,0x21,0xEC,0x41,0x6};
const char message29[]={0x6E,0x93,0xFE,0x4B,0xF9,0x55,0x59,0x49,0x73,0xCB,0xFF,0x4E,0x56,0x7B,0x2B,0x2A,0xF7,0x57,0x8D,0xBD,0x11,0x96,
0xCF,0xC9,0xF7,0x6A,0x70,0x90,0x1};
const char message30[]={0x6E,0x93,0xCA,0x97,0xF2,0x8E,0xA2,0xB4,0x92,0x5F,0x96,0x1A,0xC2,0xBE,0xC5,0x89,0x60,0x9E,0x93,0xED,0xF0,
0xB1,0x10,0xDF,0xE4,0x77,0xB4,0x7C,0x54,0xE3,0x96,0x16,0xAC,0x93,0xFB,0x65,0x85,0x94,0xCF,0xC9,0xDB,0xD5,0xFB,
0x1E,0x64};
const char message31[]={0x4D,0x39,0x11,0xCC,0x73,0xF2,0x3B,0x2B,0x5,0x17,0xF7,0x43,0xDC,0x43,0x30,0xAF,0x77,0x96,0x77,0xAD,0x6,
0x7,0x19};
const char message32[]={0xEE,0x77,0x2E,0xB,0xF2,0x4E,0xEC,0x14,0xCA,0x41,0x6};
const char message33[]={0xEE,0x72,0x81,0xC9,0x17,0x3C,0xD4,0x20,0x94,0xFA,0xDF,0x33,0x34,0xAF,0xD5,0xE0,0x20,0x3};
const char message34[]={0x63,0x21,0xBE,0x16,0xBC,0x7A,0x1B,0x3B,0x9F,0x21,0xD6,0x79,0xCC,0x7B,0x1A,0xED,0x73,0xF2,0x26,0xD6,0xC6,0x70,
0xB7,0x49,0xE5,0x71,0xBF,0xE0,0xD1,0xCD,0x2D,0xB1,0x36,0x98,0xF,0x78,0x86,0xF3,0xF0,0x8E,0x39,0xC8,};
const char message35[]={0xAE,0x29,0xB9,0x5F,0xB7,0x23,0xC,0xE1,0x4E,0xEC,0x5C,0x7C,0x27,0xAE,0xD,0x84,0xE5,0x43,0xE4,0xC3,0x7B,0x4E,
0xDE,0xAE,0xA4,0xE,0x32};
const char message36[]={0x63,0x21,0xBE,0x16,0x48,0xE6,0x95,0xB5,0xCE,0xE7,0xE4,0x2D,0xB1,0x36,0x98,0x8B,0x63,0x4A,0xEE,0x67,0xC4,0xBD,
0xD2,0x41,0x6};
const char message37[]={0x4D,0xC4,0xBA,0x72,0xEF,0x71,0x3E,0x16,0xE2,0x10,0xF6,0x67,0x49,0xF9,0x9C,0xBC,0x25,0xD6,0x6,0xF3,0x8,0xF7,0x43,
0xE8,0x67,0x81,0xD9,0x83,0xC};
const char message38[]={0x6E,0xEA,0x3F,0xAB,0x37,0x10,0x96,0xCF,0x78,0x4E,0x5E,0x1A,0xB8,0xD2,0x41,0x87,0x83,0xC};
const char message39[]={0x23,0x8F,0xC5,0x31,0x6F,0x63,0xEF,0x87,0xC8,0x7B,0x3D,0x2A,0x7,0x19};
const char message40[]={0xAE,0xF9,0xCE,0x32,0xFB,0x19,0x76,0xA9,0xD9,0xCF,0xC9,0x37,0x30,0xD7,0x49,0x58,0x1C,0xE2,0xCA,0xDA,0x1,
0xCF,0xF8,0x32,0x9E,0x93,0xCA,0x41,0x6};
const char message41[]={0xAE,0x29,0xB9,0xDF,0x63,0x6D,0xD0,0xC,0x6F,0x42,0x5D,0x62,0xBC,0x41,0x3A,0xFB,0x39,0xF9,0xB4,0xE3,0x4D,0x15,0xD7,0x35,
0x34,0xF6,0xE,0xC9,0x7D,0x13,0xCB,0xFD,0x9C,0x54,0xE,0x32};
const char message42[]={0xCD,0x52,0x67,0x39,0xFB,0x4D,0xA8,0x4B,0x8C,0xAF,0x5,0x9F,0xEC,0xCE,0xE2,0x7E,0x88,0xEF,0x19,0xA2,0x9B,0xA7,0xFA,
0xCF,0xF8,0x76,0x58,0x8D,0x67,0x7C,0x62,0x3B,0xC8,};
const char message43[]={0x63,0x21,0xDE,0x8A,0x9D,0xF7,0x50,0x77,0xDE,0x11,0xF9,0x9C,0xBC,0xD2,0x29,0x54,0x9A,0xDB,0x93,0xEC,0xB7,
0x6A,0x6D,0x3C,0x60,0x1C,0x19};
const char message50[]={0x4D,0x15,0xD7,0x35,0x34,0xF6,0x8E,0xEF,0x16,0x3B,0xF7,0xB,0xCC,0x77,0xF9,0x7B,0xC4,0x51,0x2E,0x3F,0xAE,0x7F,0xC3,0xD2,0xBB,
0xDF,0x62,0xC7,0x5A,0xDC,0xF,0x71,0x3B,0x1A,0xBC,0x70,0xCE,0xD2,0xEE,0x2F,0x6E,0xD0,0xDC,0xF,0xF1,0xDD,0x49,0xE7,
0x36,0x7B,0x1F,0xDD,0x28,0x97,0x1F,0xE3,0x5E,0x3C,0x67,0x41,0xE3,0x7E,0x88,0xC5,0x9B,0x55,0x84,0x95,0x7B,0xF,0xA3,0x5C,0xDE,0xF5,
0xCA,0x95,0x28,0xA5,0x79,0x3D,0xD9,0xB9,0xD4,0x6A,0x17,0xCF,0xC9,0xAF,0xA5,0xB7,0xB1,0xF7,0x5B,0xBC,0x61,0x47,
0x29,0x95,0xE6,0x8,0x4F,0x3B,0x3E,0x43,0xE8,0x1E,0x4F,0xEF,0x87,0xF8,0x2C,0x29,0x9F,0xD8,0xF2,0x19,0x97,0xE2,
0xC6,0xFC,0x8,0xA5,0x4,0xA8,0xE1,0x4D,0xFD,0xE7,0xE4,0xED,0xF2,0x17,0x97,0xE8,0x16,0x35,0x17,0x6F,0xFD,0xB7,0x5C,0x67,
0x1,0xAE,0xC7,0xFD,0x9C,0x54,0xBE,0xBA,0xB2,0x8C,0x3F,0xDC,0x3D,0x1E,0xF7,0x11,0x9E,0x93,0x5F,0x96,0x1A,
0xC2,0x21,0xEC,0xE1,0xEE,0xF1,0xB8,0x5F,0xF7,0xA8,0x52,0x42,0xBE,0x4C,0x8B,0x4A,0x7D,0x78,0x77,0x75,0x93,0xF8,0x5A,
0xBA,0x5F,0x60,0xEE,0xFA,0x6A,0xBF,0x85,0xF2,0x93,0xB7,0xB1,0xF7,0x5B,0xBC,0x61,0xC7,0xE5,0x4C,0x9A,0x67,
0xBC,0x25,0xF3,0x7E,0x88,0xE1,0xAE,0xF0,0x9C,0x7C,0xCB,0x82,0xC4,0x96,0x8B,0xBB,0xDE,0xC6,0xDE,0x3F,0x4B,0xCA,
0x67,0xBC,0x25,0xF3,0x3B,0x5A,0xDE,0x61,0x38,0x9D,0x47,0xF8,0xB8,0x84,0x5A,0x2E,0x31,0x16,0x77,0xBD,0x8D,0xBD,0xDF,
0xE2,0xAD,0x5A,0x1B,0xCF,0x89,0xFB,0xE5,0x25,0x15,0x22,0x60,0x90,0x1};
const char message51[]={0x2E,0xEF,0x36,0xB,0x1A,0xF7,0x43,0x2C,0xDE,0xAC,0x22,0xAC,0xDC,0x7B,0x71,0x1B,0x73,0xDE,0xE9,0xAC,0x2D,0x94,0x83,0xC};
const char message52[]={0x2E,0x3F,0xC6,0xBD,0xB8,0xEB,0x67,0x49,0xF9,0xEA,0xCA,0x32,0xFE,0x5B,0x32,0x3F,0xB1,0x5D,0xBC,0x59,0x45,0x58,0xB9,
0xF7,0x20,0x3};
const char message53[]={0x2E,0xEF,0x7E,0x8B,0x1D,0x6B,0x71,0xA7,0xB3,0x36,0x17,0x5F,0xAB,0xF7,0xB7,0xFC,0x48,0x62,0xC5,0xDE,0x6B,0xB8,0xEB,0x11,
0x26,0x15,0x93,0xE6,0x39,0x2B,0x9F,0x98,0x9D,0x8B,0x5B,0x22,0x9F,0x93,0xCA,0xE3,0x3E,0xC4,0x81,0x34,
0xCF,0xB8,0xD8,0x3C,0xE6,0x29,0xA5,0xFA,0x4F,0x6C,0x39,0xC,0xC3,0xA8,0xB1,0x10,0xDF,0x2D,0x76,0x8E,0x38,0xCA,0xE5,0xDD,0x66,
0x41,0xE3,0x7E,0x88,0xC5,0x47,0x12,0x2B,0xF6,0x5E,0xE3,0x8C,0x6A,0xAA,0xB8,0xAE,0xA1,0xB1,0x77,0x3C,0x27,0xE1,0x9D,0x25,0xE5,
0x7E,0x4E,0x5E,0x23,0xDA,0x41,0x6};
const char message54[]={0x12,0xDD,0xA2,0xE6,0xAD,0x2E,0xF6,0xE4,0xBE,0x3D,0x9,0xF7,0x43,0x7C,0x3B,0xAC,0xC6,0x33,0x3E,0xB1,0x1D,0x71,0x94,0xCB,
0x4B,0xCC,0xC5,0xFD,0x10,0x2F,0xE5,0x30,0xC,0x77,0x7D,0xCB,0x82,0xC5,0x97,0x11,0xE6,0x6D,0x28,0x20,0x2C,0x17,0x1F,0xB7,
0x4C,0xB5,0x1F,0x1,0x33,0x43,0x11,0x70,0x18,0x86,0x51,0x63,0x21,0xBE,0x5B,0xEC,0x1C,0x46,0xB9,0xFC,0x58,0x88,0x37,0x20,0xEC,0xC5,0x5D,
0x5F,0xED,0x30,0xC,0x77,0x7D,0xB5,0xC3,0x30,0xDC,0x66,0xEF,0x8B,0xBB,0x7E,0x96,0x94,0xAF,0x6E,0x97,0xBF,0x5F,0xA6,0x45,
0xA5,0xB9,0x1F,0x42,0xBF,0x96,0xEE,0x61,0x18,0xEE,0xAE,0x73,0x18,0x86,0xBB,0xBE,0x65,0xC1,0x5D,0xDD,0x24,0xBE,0x96,0xEE,0x61,0x18,
0x46,0xB9,0xBC,0xDB,0x2C,0x68,0xDC,0xF,0x31,0xBC,0x59,0x45,0x58,0xB9,0xF7,0x9B,0x2A,0xAE,0x6B,0x68,0xEC,0x1D,0xDF,0x85,0xE6,
0x19,0x6F,0x79,0x3F,0xC4,0x6D,0x2A,0x9F,0x93,0xB7,0xB8,0xF3,0x2D,0xD7,0x59,0x80,0xEB,0xC3,0x7B,0xF5,
0xFE,0x91,0xA2,0xB5,0x4A,0x8D,0x3F,0x8C,0x92,0xE8,0x16,0x35,0x6F,0x75,0xB1,0x27,0xF7,0x29,0x25,0xBC,0xD,0xE5,0x11,0x92,
0xB0,0xD9,0xFD,0x61,0x94,0xCB,0x4B,0xCC,0x61,0x18,0xDE,0x4C,0xF6,0x3E,0xC,0xC3,0x5D,0xDF,0xB2,0x60,0x18,0x86,0xBB,0x4D,0xBE,0x59,0x45,
0x58,0xB9,0xF7,0x71,0xBF,0xF6,0xAB,0xDB,0xE5,0xEF,0x67,0xC4,0x1B,0x8,0x66,0x18,0x86,0x51,0x63,0x21,0xBE,0x6,0x24,
0x82,0xE0,0xD7,0x59,0x99,0x8,0xCB,0x7B,0xA1,0xAF,0xDB,0x13,0x3B,0x17,0xB7,0x44,0x5E,0xA2,0x5B,0xD4,0xFC,0x26,
0xDB,0x7D,0xB6,0x56,0xA9,0xD6,0xDE,0x34,0x83,0xC};
const char message55[]={0xEE,0xF1,0x9B,0x6C,0xF7,0xF7,0xF4,0x5F,0x60,0x8E,0x90,0xD8,0xA2,0xA9,0xA4,0xB9,0xE5,0xDF,0xF,0xA1,0x77,0x94,
0x9B,0xB0,0x72,0x90,0x1};
const char message56[]={0x6E,0x93,0xDF,0x59,0xA8,0x6B,0x6D,0x1E,0xF7,0xD9,0x5A,0xEC,0x1D,0xF7,0xA4,0xB9,0x8D,0x39,0xEF,0xB3,0xF7,0xB0,
0x5F,0x60,0xAE,0x34,0x1F,0x81,0x1A,0x50,0x6F,0x4B,0xAD,0xCE,0xBD,0xB8,0xC3,0x5A,0xE7,0xAD,0x1E,0x7B,0x47,0xFB,
0xDA,0xB7,0xD9,0xFB,0xED,0x89,0xC9,0x7,0x70,0xDF,0xD3,0x68,0xEF,0x62,0xA9,0x96,0xD6,0x70,0x57,0x78,0x4E,0x5E,
0x69,0xDE,0x96,0x5A,0x9D,0x8B,0xFB,0x21,0xE,0x91,0xB8,0xF2,0x39,0xF9,0x75,0x96,0xD6,0x9A,0x54,0xDC,0x89,
0xEB,0xAB,0x6D,0x3,0x30,0x79,0x2F,0xF6,0xC6,0xBE,0xCF,0xD6,0xA2,0x31,0x34,0x83,0xC};
const char message57[]={0xAE,0x29,0xB9,0x5F,0xEF,0xA5,0x4B,0xDE,0x53,0xEE,0x35,0xEE,0x14,0x42,0xD2,0x3C,0xE0,0x39,0x79,0xBB,0x7A,0xDF,
0xF,0xEF,0x39,0xF9,0x9D,0x85,0xBA,0xD6,0xE6,0xF0,0x66,0x15,0x61,0xE5,0xDE,0x6F,0xAA,0xB8,0xAE,0xA1,0xB1,0x77,
0x3C,0xA3,0x9B,0xFB,0x21,0x8E,0x79,0xBB,0xF6,0xD7,0x68,0x5B,0xDC,0x1B,0x3,0x68,0x6E,0xF9,0xCF,0xC9,0x3B,0x4A,
0x29,0x86,0xD8,0xF,0x1B,0xA8,0xF,0xEF,0x39,0x79,0x29,0xF6,0x5E,0x8B,0xD7,0xDD,0x8D,0xDA,0x16,0xDC,0xD3,0x68,0x3F,
0x12,0xD1,0x19,0x1F,0x5C,0xE,0x1F,0xB,0x71,0xE5,0x1A,0x4B,0xC0,0xCD,0x3B,0xA1,0xA9,0x85,0xB9,0x1F,0xDE,0xDD,0x1B,0xEE,0x1E,
0x7B,0x3B,0xA3,0xE7,0xF8,0x2C,0x9E,0x93,0x77,0xA6,0xBF,0x71,0xC5,0x9D,0x8B,0xBB,0xE,0x1F,0x4F,0x14,0xE4,0x73,0xF2,0xCE,0xC4,
0x1E,0x3B,0x9C,0x49,0x5D,0x5C,0x62,0x78,0x93,0x75,0x76,0x91,0xD4,0xE7,0xE4,0x4B,0xD7,0x89,0xC9,0x35,0x5F,0x60,0xEE,0xEE,
0x86,0x26,0xC3,0x9B,0xD6,0x3A,0x17,0xCF,0xC9,0xAF,0xD1,0x3A,0xB1,0xA9,0xC3,0xC7,0x42,0xE8,0x5,0xAC,0x9D,0xAF,0x6E,0x97,
0xBF,0xBF,0xB,0xCD,0x73,0x56,0xBE,0x69,0xAD,0xF3,0x76,0xED,0x7,0xF0,0xE1,0x3D,0x27,0xBF,0x54,0x56,0x72,
0xE7,0x97,0x4,0x14,0x9B,0xFB,0xE1,0x3D,0x27,0x3F,0x71,0x67,0xA8,0xFF,0xF0,0xDE,0x16,0x34,0x10,0xCC,0x20,0x3};
const char message58[]={0x63,0x21,0xBE,0xC9,0xD7,0xAD,0x52,0xB8,0xC5,0x89,0x60,0x9E,0x93,0x97,0x62,0xEF,0x35,0xC8,};
const char message59[]={0x2E,0xCE,0xD2,0x16,0x61,0x39,0xCE,0xDD,0x2F,0xED,0x48,0x7D,0x4E,0xDC,0x6F,0x43,0x1,0x61,0xB9,0xB8,0x1F,0xE2,0x19,0xD1,
0x78,0xDD,0x2E,0x6D,0x6F,0x55,0xCE,0x17,0x98,0xFB,0x21,0x6E,0xD7,0x9E,0x34,0xF7,0x43,0xE8,0x67,0xA1,0xE,0x77,
0x2F,0xF2,0x5,0xE6,0x6B,0x74,0x73,0xBB,0x92,0x7A,0xAF,0x87,0xFD,0x9C,0x1A,0x62,0x39,0xEF,0x95,0x58,0x99,0xFB,
0x36,0xE6,0x7C,0x4E,0x7E,0xCF,0x72,0xF8,0xF0,0x5E,0xDF,0x76,0x81,0xE4,0xFE,0x64,0x99,0x71,0x64};
const char message60[]={0x23,0x8F,0xC5,0xFD,0x10,0xAF,0xAE,0x2C,0xE3,0x7F,0x8D,0xD6,0xE9,0x4C,0x9A,0xFB,0x21,0xF4,0x6D,0x28,0x20,0x2C,0x9F,
0x81,0x9D,0x99,0x1C,0x64};
const char message61[]={0x2E,0x52,0xB3,0x10,0xBA,0x7F,0x88,0xFC,0xA4,0x72,0x1C,0x19};
const char message62[]={0x6E,0x93,0x4F,0x3B,0xDE,0x96,0x5A,0x9D,0xB7,0x6A,0x23,0xEC,0x97,0xF2,0x39,0x11,0x5E,0x60,0xBE,0x3B,0xD9,
0x18,0x64};
const char message63[]={0xEE,0xF1,0xB8,0x5F,0xF0,0xE8,0xE6,0x6D,0xC1,0xB,0xCC,0x71,0x3F,0xD6,0x55,0x38,0x48,0xF3,0xB5,0xB3,0x0,
0x61,0xF9,0x7A,0x8B,0x20,0x92,0xDF,0xC9,0x6A,0xBF,0x24,0x50,0x2B,0x43,0xEF,0x69,0xB4,0xAF,0xB7,0x91,0xA1,
0x16,0x36,0x38,0xC8,};
const char message64[]={0x6E,0x93,0x6F,0xB9,0xCE,0x2,0x5C,0xBF,0x1D,0x56,0x63,0x3F,0xE3,0x7E,0x88,0xDB,0x98,0xF3,0xF5,0x9D,0x1A,0xB0,
0xFC,0x48,0xD1,0x5A,0xA5,0xE6,0xB5,0xAE,0x84,0x1C,0x71,0x94,0xCB,0xBB,0x5B,0x84,0x79,0x1B,0xA,0x8,0xCB,0xC5,0xC7,0xC5,0xBD,0x3F,0x32,
0x26,0x2F,0x36,0xCD,0x73,0xF2,0x49,0x6D,0xDF,0x7C,0xAF,0x18,0x8A,0x50,0xCD,0x47,0xE6,0xE2,0xF6,0xAC,0xFC,0x5A,0x70,0xD7,
0x9B,0xB8,0x17,0x7A,0x3F,0xC4,0xE8,0x64};
const char message65[]={0x63,0x21,0x5E,0xBB,0x71,0x2F,0xF4,0x4E,0x69,0x79,0x1E,0xC2,0x30,0xCA,0xE5,0x47,0x1E,0x8B,0xBB,0xDE,0x4,0x48,0xE6,0x37,0x7B,
0x3F,0xE6,0xE2,0x3B,0x54,0xFD,0xC5,0x31,0x25,0xF7,0xBD,0xD0,0xE7,0xE4,0x2D,0x6C,0x70,0xDF,0xF5,0x4A,0xA7,0x50,
0x7,0x19};
const char message66[]={0x63,0x21,0x6E,0x2,0x24,0xF3,0x76,0x41,0x3E,0xE3,0x6,0x77,0xA,0xB5,0x3E,0xB1,0x1D,0xEE,0x1E,0x25,0xF7,0x63,0x5D,
0x85,0x83,0x34,0x83,0xC};
const char message67[]={0xAE,0x29,0xB9,0x5F,0xDF,0x6D,0xF5,0x7E,0xA7,0xB4,0x3C,0xF,0xE1,0x96,0x50,0xA0,0x1E,0x61,0xA3,0xE1,0xEB,0x6B,
0x60,0x7F,0x78,0x5F,0xC3,0x71,0xA8,0x77,0xD0,0xE1,0xF0,0x66,0x4E,0xC2,0x31,0x25,0xF7,0x3,0x16,0xB7,0x2B,0xA9,
0x47,0x78,0x4E,0xDE,0x41,0x87,0xB7,0xB8,0x46,0xCB,0xFD,0x9D,0xAC,0xF6,0x39,0x2B,0xEF,0x88,0x3D,0xB9,0xEF,0xE0,
0xCE,0x80,0x7D,0x84,0xE7,0xE4,0x77,0xB2,0xDA,0x13,0x96,0x8,0x1C,0x64};
const char message68[]={0xEE,0xF1,0x9B,0x6C,0xF7,0x33,0x6E,0xF1,0x19,0xF1,0x3D,0xFD,0xC5,0xFD,0x10,0x37,0x1,0x92,0x79,0xBB,0x20,0x9F,
0xF1,0xB6,0x1A,0xFC,0xC4,0xF6,0x2,0xD6,0x68,0xBD,0xD0,0x2C,0xAB,0x73,0x90,0x1};
const char message69[]={0x23,0x8F,0xFC,0x8E,0x7B,0xB5,0x73,0x71,0xF7,0x5B,0xEC,0x58,0xE3,0xC8,};
const char message70[]={0x4D,0xA8,0x4B,0x8C,0xE3,0x7E,0x4E,0xDE,0x51,0x84,0x95,0x7B,0x4B,0x7E,0x16,0x18,0xBF,0x2D,0x58,0x7C,0xF2,0x59,
0xD,0xEE,0xAF,0xA5,0x7C,0x78,0xCF,0xC9,0x4B,0xB1,0xF7,0x1A,0xEE,0x1E,0x8F,0xFB,0x65,0x85,0xC8,0xBB,0xFB,0xF1,0xBD,0xCF,
0xD2,0xFD,0xE8,0x66,0xF1,0xAC,0xDE,0x5F,0x60,0x9E,0x13,0x61,0xF1,0x2,0x73,0xDC,0x2F,0x38,0x47,0x5B,0xD9,0x3B,
0x21,0xBF,0x2C,0x35,0x4,0xEA,0x20,0x3};
const char message71[]={0x2E,0x3F,0x52,0x44,0x63,0xF1,0x71,0xCB,0x54,0xBB,0x78,0x4E,0x7E,0x2D,0xBD,0x5D,0xFB,0x86,0x1D,0xA5,0x54,0x9A,0xD7,
0x3D,0xDA,0x6F,0x11,0x44,0x72,0xBF,0x96,0x31,0xDC,0x35,0x25,0xF7,0x2D,0x96,0x48,0xF4,0x44,0x1F,0xE7,0x12,0xDD,0xA2,0xE6,
0xED,0xDA,0x97,0x52,0xFD,0x73,0xB4,0x15,0x93,0x66,0xF1,0x49,0xC9,0xFD,0x65,0x0,0x9F,0xF1,0x1E,0xD1,0xB8,0x17,0xFA,
0x89,0xFB,0x19,0xD1,0xF7,0xBD,0xD0,0xE7,0xE4,0x93,0x3B,0x6F,0x14,0xA5,0x1C,0xEE,0x36,0x79,0xC3,0x8E,0x52,
0xAA,0xFF,0xA5,0xF0,0xF7,0x6D,0x2A,0x8F,0xF0,0xFA,0x14,0xAA,0xFE,0xE2,0x39,0xE9,0x7F,0x96,0x79,0xC6,0xB3,0x1A,
0x7C,0x41,0xE4,0xA4,0x7E,0x2D,0x7D,0xC6,0xC7,0xC5,0x5E,0xF0,0x2,0xF3,0x59,0xE6,0x19,0xEF,0x2C,0x29,0x87,0x51,
0x12,0x10,0x39,0xA9,0x5F,0x4B,0x8F,0xF0,0x71,0xB1,0x17,0x8C,0xEE,0xAE,0x29,0xB9,0xBF,0x52,0xB3,0x10,0xBA,0x7F,0x88,
0x7C,0xC1,0x5D,0xDD,0x24,0x16,0xB7,0x44,0xDE,0xF,0xF1,0x9C,0x8,0x8D,0xFB,0x21,0x6E,0x63,0xEF,0x4F,0xF5,0x9F,0x71,
0xF,0xC1,0xDC,0x9E,0xF1,0x50,0x43,0xA5,0x39,0xE6,0x30,0xAA,0x9,0x75,0x89,0xF1,0xCE,0x92,0x72,0x3F,0xE3,0x96,0xF0,
0xCF,0xE5,0xD2,0xE9,0x5,0xF9,0x4D,0x9A,0x7D,0x2F,0xF4,0x39,0xF9,0x65,0xA9,0x21,0xC,0x32};
const char message72[]={0xAE,0x29,0xB9,0x5F,0xB7,0x3,0xC,0xD5,0x13,0xFD,0x3B,0x59,0xED,0xD7,0xD2,0x71,0x2E,0x71,0xA7,0xB4,0x3C,0xF,0xE1,
0x96,0x50,0xA0,0x7E,0xB2,0x72,0x3F,0x27,0x6F,0x57,0x52,0x9F,0xB3,0xF2,0x16,0xD7,0x68,0xB9,0xEF,0x28,0xF7,
0x16,0x8A,0x9B,0xE6,0x3B,0x59,0xED,0x70,0x89,0xA7,0x1D,0x5F,0xFD,0x8E,0x60,0xA8,0x37,0x21,0xAC,0x4E,0x97,0xB5,0x26,
0x6,0x9C,0xB0,0x44,0xE0,0x71,0x7F,0xD,0x0,0xAE,0x49,0xF3,0x8C,0xE7,0xE4,0xAD,0x5A,0x1B,0xAF,0xD1,0x3A,0x17,
0x5F,0x12,0xA8,0x95,0x8,0xCB,0xD7,0x9D,0xB0,0xA9,0xF,0xEF,0xEE,0x7E,0x7C,0xEF,0x5E,0xB3,0x4F,0x2D,0xD8,0x2D,0x66,0xD2,
0x3C,0xE3,0x76,0x84,0x21,0xDC,0x9E,0x64,0xDF,0x8B,0xD3,0x1D,0x81,0x8E,0x43,0x73,0x1B,0x73,0xDE,0x5,0xCC,0xC2,
0x0,0x3E,0x7D,0xE5,0x1E,0x2E,0xF1,0x35,0xC0,0x10,0x36,0xF5,0xCA,0xD5,0x5F,0x3B,0xF7,0x77,0xB2,0xDA,0xC5,0x77,
0x3C,0x27,0xBF,0x96,0x7E,0x2D,0xB8,0xA,0xB8,0x17,0xFA,0x19,0x42,0xF7,0x6D,0xCC,0x19,0x22,0xF,0xA4,0x41,
0x58,0xDE,0xAE,0xA4,0x7E,0xB,0xC7,0xE9,0xFE,0xF0,0xA6,0x8A,0xEB,0x1A,0x1A,0x7B,0xC7,0x73,0x86,0x58,0xCE,0x7C,0xCE,
0xCA,0xD7,0x9D,0xB0,0xA9,0x9E,0xE8,0x8B,0x57,0xB7,0x88,0x79,0x65,0xAF,0x44,0x29,0xBB,0xFF,0xC9,0x92,0xFA,0x8B,0xAF,
0xA5,0xB7,0x43,0x74,0x73,0x8B,0xB7,0x98,0x49,0xBD,0x87,0xF9,0x8C,0xE7,0xE4,0x67,0xE9,0x9E,0x5F,0x3,0xC,
0x26,0x6,0xEC,0x87,0xF7,0x9C,0xBC,0x56,0xEF,0xFE,0x20,0x3};
const char message73[]={0xCD,0x9C,0xD8,0x79,0x3F,0xC4,0x4B,0x79,0x84,0xE7,0xE4,0xF7,0xC,0x67,0x71,0x3F,0xC4,0x37,0xF9,0xBA,0x61,
0x47,0x29,0xD5,0x7F,0xAA,0x58,0x1B,0x77,0x6A,0x6F,0x84,0xE5,0x2D,0x7F,0xF1,0xC,0x1B,0x61,0xF9,0x7A,0x6A,0x61,0xA7,
0xDE,0xC6,0x9C,0xAF,0xAF,0xA5,0x23,0x1E,0x53,0x72,0x3F,0x27,0xEF,0xEA,0x26,0x71,0x8B,0x8,0xCB,0x1B,0x76,0x94,0x52,
0x69,0xC6,0xB9,0xC};
const char message74[]={0x63,0x21,0xBE,0xC9,0xE7,0xAC,0x7C,0x4E,0xDE,0x13,0xEC,0xCF,0x82,0xC6,0x71,0x9F,0xAD,0x93,0xFE,0xF0,0xB1,0x10,
0xDF,0x33,0x44,0x37,0xF7,0x10,0xCC,0x77,0xB4,0x5C,0x1C,0xF3,0x6B,0xC1,0x55,0xC0,0x3,0xEE,0x94,0x96,0xE7,
0x21,0x3C,0xF4,0xD,0x6A,0x6C,0x2,0x7,0x19};
const char message75[]={0x4D,0x92,0xD5,0x7E,0x2D,0xDD,0x7,0xD2,0xDC,0xAE,0xA4,0xE,0x1F,0xB,0x71,0x20,0xCD,0x33,0xEE,0x61,0xEF,
0xCF,0x59,0xF9,0x2C,0x68,0xC,0x32};
const char message76[]={0x12,0xDD,0xA2,0xE6,0xD7,0x68,0xB9,0x6F,0x63,0xCE,0x4F,0xDC,0xCF,0x88,0xBE,0x87,0x51,0x2E,0x3F,0x6E,0x99,0x6A,0x17,0x37,
0x71,0x3F,0xC4,0xED,0x82,0x7C,0xC6,0x30,0xC,0x4F,0xEE,0x1C,0x86,0xE7,0xE4,0xD7,0xD2,0xD1,0x8D,0x72,0x4D,0xC9,0xFD,0xB5,
0xB3,0xF4,0x39,0x2B,0x3F,0x79,0xDC,0x67,0x2D,0xA9,0xCF,0xF8,0x26,0x8F,0x79,0x84,0xB7,0x91,0x18,0x30,
0xCE,0xA8,0xB1,0x10,0xEF,0x51,0xE6,0x39,0xF9,0xB5,0xF4,0x36,0xE6,0x7C,0x4E,0xDE,0x29,0x2D,0xCF,0x43,0x78,0x81,
0x79,0x4E,0xDE,0xAE,0xA4,0x2E,0x9E,0x93,0x70,0x5C,0x2,0x26,0x9F,0x93,0x77,0x4A,0xCB,0xF3,0x10,0x6E,0x9,
0x5,0xEA,0x70,0x9,0x2F,0xA9,0xAF,0x7B,0xB4,0xDF,0x22,0x88,0xE4,0x5E,0x3C,0x27,0xBF,0x96,0x4A,0xEE,0x3B,0xCA,0xBD,
0x85,0xF2,0xCB,0x12,0x4B,0xEE,0x2B,0x6E,0xE,0x1F,0xB,0xF1,0xAC,0x6,0x9F,0x93,0x37,0x8A,0x52,0x84,0xE5,0x37,
0x2B,0x5F,0x60,0x2E,0xD1,0x2D,0x6A,0x7E,0x63,0xEE,0x7,0xDC,0xF,0xA1,0xDF,0x68,0xB8,0xB8,0x1F,0xE2,0x29,
0x14,0x5E,0x6F,0x40,0x58,0xAF,0x7C,0x4E,0x7E,0x25,0xA4,0xF2,0xE1,0x3D,0x27,0xBF,0x93,0x54,0x84,0xE5,
0xED,0x49,0xF6,0x17,0x98,0xE7,0xE4,0xD7,0xD2,0x5B,0x5C,0x22,0xEC,0x67,0xBC,0xD,0x29,0x87,0x51,0x63,0x21,0x6E,0xB8,
0xA2,0xE1,0x33,0xBE,0x8C,0x67,0xD8,0xA5,0x66,0x3F,0x27,0xF,0xA1,0x39,0x1F,0xDE,0x73,0xF2,0x23,0x55,0x83,
0x97,0x62,0xBD,0x29,0x7B,0x2F,0x88,0xC5,0xC7,0x4F,0x95,0x62,0x2C,0x3E,0xFE,0x50,0x8C,0x61,0xD4,0xA8,0x66,0x4E,0xC2,0xFD,0x10,0x77,
0x6A,0xEF,0x8F,0xBE,0x2F,0xB1,0xF6,0x5A,0x8B,0x4B,0x74,0x8B,0x9A,0xDF,0xE5,0xEF,0x11,0x47,0xB9,0xFC,0xB8,0x65,0xAA,0x5D,0x3C,0x27,0x95,
0xC7,0xFD,0xFA,0x4E,0x2D,0x58,0xF2,0xDB,0x1D,0xC1,0x6A,0x7C,0x8D,0x16,0x61,0x79,0x4F,0xA3,0x7D,0x4E,0x5E,0x59,
0xFA,0x4E,0x2F,0x6F,0x4F,0xB2,0xF,0xA3,0x46,0xB9,0x4D,0x7E,0x2D,0x3D,0xB6,0x2D,0xD,0x56,0xB2,0xFB,0xB7,0xB8,0x44,
0xD8,0xCF,0xF8,0x9E,0xD5,0xE0,0xA5,0x18,0x9D,0x90,0xDD,0x7F,0x81,0xB9,0x1F,0xE2,0x3B,0xC3,0x39,0xE6,0x20,0x3};
const char message77[]={0x12,0xDD,0xA2,0xE6,0x2D,0xAE,0xD1,0x72,0x1F,0x61,0x67,0x41,0x76,0xFF,0x5E,0xAC,0x62,0xD3,0x3C,0xE0,0x39,
0x79,0x7B,0x92,0x7D,0xB8,0x7B,0x3C,0xEE,0x43,0xE4,0xAD,0x2E,0xF6,0x44,0x58,0xBE,0xC0,0x6F,0x43,0x39,0xE2,0x6D,0xCC,0x19,
0x22,0x3F,0xB9,0x31,0x2B,0x31,0xE0,0x93,0xEF,0xE8,0xE5,0x7E,0x4E,0x5E,0x59,0xFA,0xF0,0x9E,0x93,0x5F,
0x4B,0x5F,0x60,0xEE,0x8E,0xC0,0xB5,0xD1,0xFD,0x2B,0xDB,0x90,0x72,0x1F,0x73,0xF8,0x58,0x88,0xCF,0x92,0xF2,0x9B,
0x84,0xB7,0x5,0xFE,0x5B,0xAE,0xB3,0x0,0xD7,0x7D,0x3B,0xB4,0x81,0xB0,0x7C,0xC0,0x73,0xF2,0x1E,0xB2,0x9B,0x17,
0x98,0xFB,0x21,0xBE,0x16,0xBC,0x1C,0x47,0xB9,0x62,0x25,0x3F,0x71,0x9F,0xA3,0x39,0xD4,0xC4,0xCD,0x61,0xD4,0x28,0x97,0x77,0x9B,
0xBC,0x3D,0xC9,0xFE,0x59,0xFB,0x16,0x9,0xCF,0x6A,0x1D,0x2A,0xCD,0x6D,0xCC,0x39,0xDC,0x6D,0xF2,0x76,0x84,
0x21,0x7C,0x3B,0xD1,0xE0,0x7E,0x29,0x3F,0xAB,0x7B,0x5F,0x45,0x3E,0xA7,0x86,0x58,0xCE,0xE1,0xCD,0xE4,0x81,0x34,
0xDF,0xD1,0x32,0x27,0xC2,0xF2,0x19,0x6F,0x90,0xCE,0x73,0xB2,0x7D,0xC6,0x92,0x39,0xA9,0xC3,0x5D,0x3F,0x4B,0xCA,
0xD7,0x35,0x1C,0xBE,0xC0,0xDC,0xF5,0x6B,0xC1,0x13,0xF9,0x9C,0x6C,0x17,0xB7,0x44,0xDE,0xD1,0xB0,0xCA,0xEA,0xFE,
0x21,0xF2,0x3B,0x35,0x60,0x79,0x42,0x88,0xE5,0x1C,0x46,0x8D,0x92,0xE8,0x16,0x35,0xEF,0x21,0x98,0xFD,0xBA,0x86,0xC3,
0x57,0x1B,0xB0,0xFC,0xC4,0xFD,0x8C,0xE8,0xFB,0x5,0xE6,0x89,0xDC,0xCF,0xC9,0x6F,0x27,0x1A,0xDC,0xCF,0xC9,
0x5B,0xDC,0xF9,0xC9,0xAF,0x5,0xC3,0xC7,0x42,0x1C,0x48,0xF3,0x1D,0x2D,0x73,0x22,0x2C,0x9F,0x71,0x84,0x55,
0x59,0x9B,0xCF,0xC9,0x27,0x61,0x63,0xC0,0x20,0x3};
const char message78[]={0x63,0x21,0x5E,0xBB,0x71,0x7B,0x52,0x79,0x3F,0xC4,0xD7,0x82,0x7B,0x8,0xE6,0x4E,0x69,0x79,0x1E,0xC2,0x30,0xCA,0xE5,0xC7,
0x42,0x7C,0xCF,0x10,0xDD,0x7C,0x19,0xDF,0xE4,0x47,0xC0,0xCC,0x50,0x8C,0xC5,0x27,0x3F,0x6B,0xBF,0xDE,0x46,
0x86,0x5A,0xD8,0xE0,0x95,0x4E,0xA1,0x7E,0xCF,0x70,0x8E,0xF0,0x9C,0x7C,0x86,0xD,0xC3,0xA8,0xB1,0x10,0x6F,0x9,0x89,
0x1,0xF7,0x43,0x7C,0x96,0x94,0xAF,0xAE,0x2C,0xE3,0xDF,0x22,0xE1,0x39,0xA9,0xBC,0x25,0xF2,0x7E,0x88,0xAF,
0x21,0xBA,0x39,0x44,0x7E,0xC9,0xFC,0x8E,0x96,0xC3,0x28,0x97,0x6F,0x2A,0x72,0x18,0x86,0x1B,0x34,0xF7,0x43,0x7C,0x97,
0x7F,0xCC,0xDB,0xB5,0xEF,0x85,0x3E,0x27,0xDF,0xAC,0x22,0xAC,0xDC,0x7B,0x74,0x1F,0x1,0x33,0x43,0x31,0xDE,0x80,0xB0,0xF7,
0x27,0xF5,0x36,0x7B,0x1F,0xDE,0x64,0xF2,0xB8,0x5F,0xEF,0x1,0xCB,0xC4,0x96,0x5F,0x3B,0x12,0x72,0xC4,0xA3,0x77,
0x3F,0xC4,0x5B,0x42,0x62,0xC0,0x73,0xF2,0x5A,0x2B,0x17,0x9F,0xBC,0x8D,0xBD,0xDF,0xE2,0x59,0x4B,0xEA,0x33,
0x3E,0xD9,0x9D,0x41,0x6};
const char message79[]={0x63,0x21,0xBE,0xCB,0x7F,0xCE,0xCA,0xFB,0x21,0x5E,0xCA,0x23,0x7C,0x84,0x52,0x2,0xD4,0x33,0x9E,0xDC,
0xF9,0x9C,0xBC,0xAB,0x9B,0xC4,0xD7,0xD2,0x37,0x55,0x5C,0xD7,0xD0,0xD8,0x3B,0x6E,0x63,0xEF,0x17,0x9B,0x47,0x78,0x4E,
0xBE,0x9,0xF6,0xC6,0x5D,0x88,0x32,0xD7,0x5A,0x39,0x7C,0x2C,0xC4,0x81,0x34,0x77,0x4A,0xCB,0xF3,0x10,0x86,0x51,0x2E,0xDF,0x54,
0x71,0x5D,0x43,0x63,0xEF,0x18,0xDD,0xDD,0x26,0xAF,0xB5,0x72,0x74,0x1F,0xBD,0xF7,0x35,0x84,0x6E,0x8E,0x73,0x89,0x6E,0x97,0xBF,0x6F,
0x89,0xED,0x3F,0x27,0xDF,0xAC,0x22,0xAC,0xDC,0x7B,0x9C,0x51,0xEE,0xF1,0xB3,0xC0,0xEC,0xFB,0x21,0x5E,0x5F,0xB,0x86,0x51,0x2E,0x3F,
0xFE,0x0,0xC9,0xBC,0x15,0x39,0xA9,0xCF,0xB8,0x53,0xFE,0x20,0x3};
const char message80[]={0x6E,0x93,0xCA,0xE3,0x7E,0x7D,0x67,0x25,0xBB,0xFF,0x71,0x6B,0x9,0xD1,0xB1,0xEE,0x6E,0x5A,0x60,0xD0,0xEB,0xA1,0x35,
0xDC,0x35,0xDF,0x8A,0x9D,0xB7,0xF8,0xCA,0x77,0xD6,0xCE,0x8F,0x6F,0x33,0xEE,0xB3,0x74,0x3F,0xBA,0x19,0x3E,0x7A,0x78,
0x4E,0xDE,0xA9,0x9C,0xCF,0xB0,0x4B,0xCD,0x7E,0x4E,0x7E,0x59,0x6A,0x8,0x8B,0x83,0x68,0xA9,0x21,0xF6,0x7B,0xE9,
0x92,0x97,0xD6,0xE6,0xBE,0x17,0xDA,0xBE,0xE,0xAC,0xFC,0x8A,0xA9,0x62,0x7F,0x59,0x6A,0x8,0x83,0xC};
const char message81[]={0xE3,0x67,0xC7,0xB5,0x92,0xDF,0x2D,0x7B,0xDF,0xF,0xEF,0xA1,0x5,0x4B,0x2E,0x6E,0x51,0x97,0xD5,0x46,0x2E,0xDE,0xD9,
0x6,0xBC,0xC0,0x7C,0xC5,0xD4,0x80,0x6F,0xA1,0x1A,0x2,0xCC,0xFD,0x10,0x83,0xC};
const char message82[]={0x23,0x55,0x83,0x77,0x31,0xDA,0x38,0xEE,0x5B,0x2C,0x91,0xE8,0x89,0xBE,0xF8,0x16,0xAA,0x21,0xC0,0xD0,0xDC,0xF2,0x2F,
0xA5,0x9A,0x82,0x7C,0x1B,0x2,0xB2,0x10,0xF6,0xF0,0xB1,0x10,0xDF,0xE4,0x73,0xF2,0xCD,0x72,0xAF,0xD5,0x7B,0x7C,
0x96,0x5A,0x21,0x74,0x71,0x84,0x37,0x65,0xEF,0xB5,0xC4,0x58,0xBC,0xF2,0x6,0x77,0x16,0xAC,0x1C,0x64};
const char message83[]={0xAE,0x79,0xC3,0xBD,0x2A,0x5A,0xDC,0x6F,0x4B,0xAD,0xCE,0x73,0xB4,0xD4,0x5A,0x13,0x3,0x9E,0x5C,0x27,0xA0,0x3B,0x82,
0xFB,0x8,0x77,0x47,0x94,0x2A,0x72,0xF,0x77,0x51,0x28,0x86,0xD8,0xDD,0x3F,0x21,0xC4,0x72,0x2E,0x9E,0x93,0x6F,0x63,
0xE7,0xB,0x12,0xDD,0x11,0x7C,0x0,0x8F,0xFB,0x19,0x5F,0x4B,0xA5,0xFC,0xEE,0x91,0xFB,0x5,0xE6,0x5E,0xE8,
0xCA,0xDB,0x11,0x86,0x70,0x9B,0x66,0xC9,0x7D,0x84,0x8C,0xE7,0x64,0x3B,0xDC,0x6D,0x12,0x16,0xCF,0xC9,0xDB,0x11,
0xE6,0xB8,0x6F,0x33,0x93,0xE6,0x5,0xE6,0x98,0xE7,0x68,0x4E,0x81,0xD9,0x8B,0x5B,0xCA,0x6A,0x20,0x2C,0x9F,0x93,
0xDF,0x19,0xC0,0x41,0x6};
const char message84[]={0x63,0x21,0xBE,0x85,0xD5,0x52,0x97,0x7C,0x4E,0xDE,0x12,0x6B,0x83,0x79,0x84,0xE7,0xE4,0xBD,0x10,0x90,0x85,0xB0,
0x78,0x4E,0xC2,0xFD,0x10,0xEF,0xE8,0xE5,0x31,0x87,0xBB,0x4D,0xDE,0xAE,0xA4,0x1E,0xE1,0x39,0x79,0x4B,0xAC,
0xD,0xE6,0x71,0x7F,0xED,0x2C,0x1D,0x64};
const char message85[]={0x63,0x21,0xEE,0x21,0x98,0x4F,0x6C,0xBF,0x8A,0xE4,0x20,0x3};
const char message86[]={0xAE,0x29,0xB9,0x5F,0xB7,0x23,0xC,0xE1,0xF6,0x24,0xFB,0xE2,0x12,0xDD,0xA2,0xE6,0x67,0xED,0x3B,0x22,0x5F,0xD7,
0x70,0xF8,0x80,0x63,0x3E,0xE3,0xD,0xD2,0x39,0xA5,0x54,0x3F,0x27,0xC2,0xF2,0x19,0x4B,0xE6,0xA4,0x2E,0x6E,
0x89,0xBC,0x1F,0xE2,0x3B,0xB1,0xF7,0x3,0x69,0x5E,0xB7,0xCB,0x7F,0xC6,0x39,0x9A,0x53,0x60,0x6E,0x47,0x98,0xEF,
0x78,0xCE,0xCA,0xE7,0xE4,0x35,0x1C,0xDE,0xC6,0xDE,0x6F,0xF1,0xD,0x3A,0x79,0x1,0x86,0xFA,0x24,0x6C,
0xC,0x18,0x64};
const char message87[]={0xE3,0x19,0xF7,0xA4,0xB6,0x84,0x3B,0x1A,0x56,0x59,0xDD,0xBF,0xD8,0x3C,0xE6,0xE2,0x7E,0x88,0xAF,0x5,0xDF,0xE4,
0x73,0xF2,0x6B,0x67,0xE9,0x7B,0x35,0x78,0xBB,0x92,0x7A,0x1,0x86,0xFA,0x9C,0xBC,0x1D,0x61,0x8,0x77,0x7A,
0x41,0x63,0xF,0x32};
const char message88[]={0x63,0x21,0xCE,0xD1,0x9C,0x5E,0x8,0xF7,0x43,0xE8,0xD1,0xB0,0x9E,0x71,0x89,0x6E,0x51,0x73,0xC4,0x67,0x2C,0x99,0x93,
0xBA,0xB8,0x1F,0xE2,0x8E,0xC8,0xE7,0xE4,0xED,0x49,0xF6,0x23,0x3C,0x27,0xDF,0xAB,0xC1,0x7B,0x1A,0xED,0x73,
0xF2,0x26,0xD6,0xC6,0x70,0x57,0x78,0xDD,0xA3,0xFD,0x16,0x41,0x24,0xF7,0xE2,0x39,0x79,0xBB,0x92,0x7A,0x6C,0x1D,
0xE5,0x12,0x2A,0xB9,0x9F,0x93,0xB7,0x23,0xC,0xE1,0xDB,0x89,0x6,0xF7,0xB,0xCC,0x73,0xD2,0x3F,0x47,0x73,0xA,
0xCC,0xE2,0xBB,0xE3,0x72,0x66,0xF7,0x87,0xBB,0x4D,0x3E,0x9,0x1B,0x3,0x1E,0xDE,0x73,0xF2,0x1A,0xE,0x8F,0xB0,
0x2A,0x6B,0x73,0x2F,0x3E,0xA3,0x1B,0x84,0xE5,0x29,0xA5,0xFA,0x39,0x11,0x96,0xCF,0x58,0x32,0x27,0x75,0x90,0x1};
const char message89[]={0x6E,0x93,0xE7,0x68,0x4E,0x81,0xA1,0xF9,0x76,0xA2,0xC1,0xFD,0x6,0xE9,0x3C,0x27,0xAF,0xE1,0xF0,0x2,0xC,0xF5,
0x49,0xD8,0x18,0x30,0xDC,0xD5,0xBB,0x1F,0xE2,0x8E,0xC6,0x4A,0x9A,0xAF,0xA5,0xF4,0x44,0xEF,0xFE,0xE2,0x39,0x2B,
0xBF,0x67,0x88,0x6E,0x6E,0xF1,0x84,0x10,0xCB,0xF9,0x8C,0x2F,0x99,0xF7,0x43,0xDC,0xAA,0xB5,0xF1,0x8C,0x4B,0xB1,
0xF7,0x7A,0x53,0xC5,0x75,0xD,0x8D,0xBD,0x63,0x90,0x1};
const char message90[]={0xCD,0xC4,0x9C,0xCF,0xC9,0x4F,0x76,0xE7,0xE1,0x5D,0xA2,0x5B,0xD4,0x5C,0xDC,0xF,0x71,0x47,0xE4,0x73,0xF2,0xF6,
0x24,0xFB,0x3,0x32,0x9E,0x93,0x5F,0x4B,0x87,0x8F,0x85,0xB8,0xC5,0x25,0xC2,0x33,0x6E,0x14,0xA5,0xBC,0x94,0xEA,
0x7F,0x2D,0xA5,0x27,0x7A,0xF7,0x47,0x3C,0xE6,0xED,0xD0,0xC6,0x1E,0xE7,0x63,0x21,0xBE,0x64,0xDE,0xAA,0xB5,0xF1,0x8C,0x8F,0x50,
0x4A,0x80,0x7A,0xE5,0x73,0xF2,0x16,0x97,0x8,0x80,0xB0,0x7C,0x78,0xCF,0xC9,0x97,0x97,0x54,0x88,0x80,
0xE1,0xCD,0x9C,0x84,0xFB,0x21,0x4E,0x48,0xEA,0x73,0xF2,0x16,0x4B,0x24,0x7A,0xA2,0x7F,0x59,0x6A,0x8,0xF,0xEF,
0x52,0xEC,0xBD,0xDE,0x54,0x71,0x5D,0x43,0x63,0xEF,0x58,0x5C,0xA2,0x5B,0xD4,0xFC,0x2E,0x7F,0x8F,0x38,0xCA,0xE5,0xDD,0x9F,0x8B,0xF,
0xC3,0x70,0x9B,0xBD,0xF,0xC3,0xF0,0x71,0xCB,0x54,0xFB,0x11,0x30,0x33,0x14,0x1,0x87,0x61,0xB8,0x1F,0x42,0xF7,0xED,0xDA,
0xAF,0xAF,0x9D,0x52,0xEA,0xD1,0xB0,0x86,0x51,0x2E,0x2F,0xD1,0x2D,0x6A,0x2E,0xEE,0x74,0xD6,0xE6,0xE2,0x6B,0xF5,0xFE,0x96,
0x77,0xBF,0xC5,0x8E,0x35,0x8C,0x72,0x8F,0x4F,0xA1,0xB0,0x3F,0x71,0x7F,0xB2,0xCC,0xE2,0x96,0xC8,0xFB,0x21,0xBE,0x56,0xAE,
0xF3,0xF5,0xDD,0x62,0xE7,0x3,0x3E,0x71,0xDF,0xAB,0x95,0xF,0x91,0xF,0xEF,0x39,0xF9,0x35,0x14,0xA8,
0xF,0xEF,0x7E,0x8,0x3D,0x7D,0xE,0xA3,0x46,0x35,0x55,0x5C,0xD7,0xD0,0xD8,0x3B,0xDE,0x96,0xFF,0x59,0x52,0x7E,0x8D,0x96,0xB7,
0x6A,0x6D,0x2C,0xEE,0x87,0xF8,0x9E,0x21,0xBA,0xB9,0x87,0x60,0x3E,0xA9,0xC3,0x28,0x19};
const char message91[]={0xAE,0xF9,0xEA,0x3D,0xEC,0x7D,0x3F,0xC4,0x33,0x9E,0xD5,0x1B,0xCF,0xF8,0x8E,0x96,0x1,0x3C,0xFB,0xA6,0x3D,
0xA9,0x3C,0xC2,0x73,0xF2,0x52,0xEC,0xBD,0x2E,0xC5,0xFA,0xA6,0x94,0x5A,0xFD,0xE,0x3A,0xDC,0xC3,0xC7,0x42,0xBC,
0x2D,0xFF,0x6B,0xF5,0xFE,0x26,0xD4,0x25,0xC6,0xE2,0x39,0xF9,0x59,0x60,0xFC,0xB6,0x60,0x71,0xF4,0x3E,0x79,0xDC,
0x47,0x78,0x4E,0xDE,0x2A,0x85,0x41,0x6};
const char message92[]={0x2E,0x96,0xD2,0x13,0xBD,0xFB,0xE7,0x68,0xD5,0x22,0xF0,0x94,0x52,0xFD,0x87,0x35,0x5E,0x5C,0x73,0xB8,0x5B,0xF5,0xC6,0x33,
0xEE,0x30,0x9C,0xCE,0xE1,0x4D,0x5A,0xF6,0x3E,0x7C,0xFC,0x5A,0xF6,0xEB,0x6D,0x39,0x83,0xC};
const char message93[]={0xEE,0x77,0xDC,0xF5,0xDD,0x62,0xE7,0x7E,0xE5,0xFD,0x10,0xB7,0x27,0x76,0x7E,0x4F,0x1E,0xF7,0x8D,0xD8,0x89,0xB0,
0x7C,0x4E,0xDE,0x13,0xA,0x98,0x42,0x39,0xBC,0xC9,0xE4,0x7B,0x44,0x63,0x3F,0xD6,0x55,0x38,0x48,0xF3,0x2,0x73,
0x3F,0xC4,0x4D,0x80,0x64,0xDE,0x2E,0xC8,0x67,0xDC,0x8A,0x9C,0xD4,0x4F,0xEA,0x20,0x3};
const char message94[]={0x4D,0x26,0x8F,0xFB,0xF5,0xAC,0xDE,0x4F,0xA0,0x2E,0x99,0xB8,0xDE,0x8E,0xB6,0x60,0xF1,0xB2,0x42,0xE4,0x3D,0xF4,
0xD2,0xBF,0xCF,0xD2,0xFD,0xE8,0x66,0x71,0x1B,0x73,0xBE,0x6E,0x69,0x94,0xF9,0x6E,0xB1,0xF3,0x5,0xE6,0xBD,
0x74,0xC9,0xEF,0x19,0xA2,0x1B,0xEA,0x1E,0x64};
const char message95[]={0x6E,0x93,0xFE,0x5B,0xB1,0xF3,0xB3,0xA4,0xBC,0x57,0xBD,0x13,0xEE,0x69,0xB4,0x2F,0x78,0x54,0xE3,0xBD,0x76,0xBE,
0x44,0x8A,0x16,0x6,0x19};
const char message96[]={0x63,0x21,0xEE,0x85,0xAE,0x7C,0xC1,0x6B,0xD,0x85,0x23,0x64,0x3C,0x27,0x3F,0xA3,0x73,0xC4,0xE7,0xE4,0x2D,
0xB1,0x36,0x98,0xC7,0x7D,0xA5,0x53,0xA8,0x34,0xC3,0x65};
const char message97[]={0xAE,0x29,0xB9,0x5F,0xF0,0xE8,0xE6,0x76,0x84,0x21,0xDC,0x12,0x6B,0x83,0xB9,0x38,0xE6,0x67,0xED,0x3B,0x1A,0x56,0x59,
0xDD,0xBF,0x45,0xC2,0xF7,0xAA,0xE5,0x38,0x34,0xB7,0xB8,0x96,0xD8,0x7C,0x78,0xCF,0xC9,0xCF,0xE8,0x3C,0xC2,
0x73,0xF2,0x56,0x64,0x46,0x3B,0xC8,};
const char message98[]={0xAE,0x79,0x13,0xDC,0x20,0x99,0xEF,0x11,0x8D,0x67,0xC4,0x77,0x74,0x34,0x8B,0x5B,0x22,0x8F,0x79,0x1B,0x7B,0xFF,
0x5A,0xAA,0xFE,0x3B,0xBA,0x23,0xD0,0xDC,0xB,0x7D,0xDD,0x9E,0xD8,0x39,0xC8,};
const char message99[]={0x23,0x8F,0xC5,0x31,0x8F,0xFB,0x19,0x71,0xB,0x97,0x83,0xC};
const char message100[]={0x63,0x21,0xEE,0x88,0x7C,0x4E,0xDE,0x12,0x6B,0x83,0x79,0x84,0xE7,0xE4,0x53,0x58,0x2F,0x30,0xF7,0x43,0x3C,
0x1C,0xC2,0x73,0xF2,0xDB,0x2E,0x70,0xB9,0x67,0x39,0x34,0xF7,0x4A,0xAC,0xCC,0x67,0xDC,0xC3,0xDE,0x8F,0x79,0x1B,
0x73,0x7E,0x8D,0x6E,0x6E,0x57,0x52,0x7,0x19};
const char message101[]={0x23,0x8F,0xC5,0xFD,0x10,0x6F,0xCB,0x7F,0x56,0x83,0xDF,0xD1,0xF2,0xAD,0x30,0x8B,0x67,0xC4,0x20,0x3};
const char message102[]={0xA3,0xAF,0xC6,0x3B,0x4B,0xCA,0x3D,0xC8,};
const char message104[]={0xAE,0x79,0xDC,0xF7,0x44,0xEF,0xF,0xEF,0xCB,0x52,0xAB,0x96,0x1C,0x64};
const char message105[]={0x6E,0xB3,0xF2,0x36,0xF6,0x7E,0x8B,0x27,0x84,0x58,0xCE,0x7B,0xA1,0xCF,0xC9,0x27,0x77,0x5E,0xD1,0x70,0x90,0x1};
const char message106[]={0x63,0x21,0xBE,0x56,0xEF,0x47,0xC8,0x78,0x4E,0x5E,0x1A,0xB8,0xD2,0x41,0x87,0x2F,0x30,0x6F,0x42,0x5D,0x62,0xBC,
0x60,0xDB,0xD4,0x7D,0x4F,0xA3,0x7D,0x4E,0xDE,0x2A,0x85,0x11,0x47,0xDD,0xE5,0x47,0x3F,0x17,0x1F,0xB7,0x4C,0xB5,0x77,0xBF,0xC5,0x8E,
0x35,0xCE,0x5D,0x25,0xDB,0x8F,0x97,0xD8,0xF9,0x65,0x20,0x2C,0x9F,0x71,0xA7,0x17,0xE4,0x9D,0xD2,0xDD,0xE9,0xBF,0xC0,0xDC,
0xAA,0x8D,0xFD,0x9B,0x34,0xFB,0x8,0xCF,0xC9,0x2F,0x4B,0xD,0x61,0xF8,0x48,0x4C,0xC9,0xFD,0xAC,0xDE,0x78,0x4E,
0x2A,0x7,0x19};
const char message107[]={0xAE,0x29,0xB9,0xEF,0x95,0xA5,0xB8,0xDE,0x70,0xD,0xAD,0xA4,0xB9,0x8D,0x39,0xBF,0x8C,0x6E,0x8,0x2F,0x30,0x5F,
0x2A,0x9,0xEF,0x2C,0x29,0xF7,0x3,0xEE,0x54,0xE7,0x97,0x4A,0xC2,0x20,0x3};
const char message108[]={0x63,0x21,0xBE,0x3B,0x9D,0x7C,0x4E,0x2A,0xDF,0x6B,0xE7,0x1,0x97,0x33,0x7,0x19};
const char message109[]={0x6E,0x93,0xCF,0xB2,0x3A,0x5F,0x60,0x9E,0x93,0x5F,0x67,0xA1,0xBE,0x94,0x6F,0xCB,0xF0,0xE1,0xDD,0x8E,0x30,
0x8B,0x1B,0xAE,0xA1,0x95,0x34,0xB7,0x31,0xE7,0xBD,0x1E,0x5A,0xFD,0x39,0xD9,0x72,0xF,0x77,0x9B,0xFC,0x4A,
0x48,0xE5,0xC3,0x7B,0x4E,0x3E,0xCB,0xEA,0x7C,0x86,0x73,0xDC,0x5F,0x43,0x4A,0xA5,0xB9,0x8D,0x39,0xDF,0x59,
0x39,0xA9,0x2F,0x30,0xCF,0x49,0xE5,0x71,0xBF,0xBE,0xAC,0x7D,0x4B,0x28,0x50,0x47,0x7C,0xC1,0xD1,0xB0,0xFA,
0x9D,0x5E,0x2B,0xEF,0x85,0x5E,0x59,0x6,0x61,0xF9,0x2,0x73,0x5B,0x31,0x11,0x96,0x83,0xC};
const char message110[]={0xAE,0x79,0xDC,0xCF,0xC9,0x77,0xB4,0xB4,0xD4,0x7F,0x78,0x2F,0x38,0x47,0x73,0x7A,0x28,0x75,0xC4,0x63,0x7E,0xD,
0xC8,0x42,0xD8,0xAF,0xAF,0xD1,0x3B,0xD7,0xC4,0x80,0x87,0xF7,0xD4,0x92,0xB2,0x7F,0x67,0x28,0x72,0xDF,0xD3,
0x68,0x5F,0x46,0x4A,0x48,0xA1,0xD4,0xFD,0xF0,0x9E,0x93,0x1F,0x8F,0x11,0x5C,0x5D,0x5D,0x5F,0x60,0x3E,0x1E,0xAE,0xE3,0xF1,0x95,0x90,
0x42,0xFD,0x11,0xDF,0x16,0x42,0xF7,0x8F,0x70,0x89,0x8D,0xB5,0xB8,0x84,0xA7,0xB8,0xD6,0xB,0xCC,0x9B,0x84,0xC8,0x79,0x89,0x96,
0x8A,0x6B,0xD,0x1F,0xB,0x71,0xE5,0x1A,0x4B,0xC0,0xCD,0x8F,0xBF,0xD4,0x46,0x90,0xDC,0x6F,0xEE,0x36,0xF9,0x11,0xC2,0xAF,0x25,
0x1F,0xDE,0x73,0xF2,0x4D,0x59,0xCB,0xCE,0xE6,0x8B,0x8F,0x9C,0xBD,0x23,0xDF,0xB4,0xFB,0x92,0xFB,0xCD,0x25,0x34,0x4,0x98,0xE7,
0xE4,0x9B,0x19,0xDA,0xCD,0x11,0xDE,0x84,0x52,0x42,0xFA,0x2E,0xDD,0xEC,0xF8,0xF8,0xCB,0xDF,0xCD,0x17,0x77,0xBF,0xE3,0xF8,0xD4,0x9B,0xAC,0x68,
0xDA,0x50,0x4A,0xEE,0x37,0x77,0x71,0x22,0xD4,0xE2,0x39,0xF9,0x91,0x2,0x96,0x2E,0x47,0x42,0x29,0xCD,0xDD,0x6F,0x1D,0x54,0xE,0xCD,0x3F,
0x16,0xE2,0xD5,0x77,0x7C,0x93,0x1F,0x3F,0x47,0xC0,0x4C,0x4A,0xEE,0x37,0x77,0x9B,0xFC,0x8,0x98,0x19,0x8A,0x80,0xB7,0x34,
0x72,0x52,0xF7,0x88,0x1F,0x37,0xC,0x15,0xDE,0x46,0x86,0xDE,0xC1,0x0,0x52,0x77,0xF3,0x17,0x98,0x37,0x1F,0xBF,0xF8,
0x26,0x24,0xB6,0x84,0xBC,0xB2,0xE3,0x12,0x29,0x46,0xBB,0xE1,0xBE,0xFB,0x4B,0xDF,0x49,0x24,0xEC,0xE6,0xB7,0xFC,0xBB,0xAF,
0xC0,0x9D,0xF1,0x26,0xEB,0xC4,0x72,0x4A,0xD9,0x3B,0xE,0x32};
const char message111[]={0x63,0x21,0x9E,0x13,0xA1,0x71,0xCC,0xE3,0xBE,0x8B,0xA5,0x5A,0x5A,0x6F,0x4B,0xAD,0xCE,0x41,0x6};
const char message112[]={0x6E,0x93,0xEF,0xD5,0xE0,0xED,0x4A,0xEA,0x71,0x3F,0x23,0xBE,0x46,0x37,0x47,0xB8,0x84,0xA3,0xD8,0x7,0x19};
const char message113[]={0x6E,0x93,0xCA,0xE3,0x7E,0xDD,0x2B,0x84,0xFC,0x6E,0xD9,0xFB,0xC3,0xFB,0x1A,0x9E,0x47,0x2E,0x5E,0xFB,0x7E,
0x88,0xCF,0x32,0xF7,0x43,0xE8,0x2D,0x65,0x35,0xBC,0xDA,0xF9,0x49,0xE5,0x20,0x3};
const char message114[]={0x63,0x21,0xBE,0x5B,0xF6,0x7E,0xA7,0xB4,0x3C,0xF,0x61,0x71,0x15,0x96,0x45,0x7D,0x81,0x79,0x8B,0x40,0xAD,0xFE,
0xC0,0x3E,0xC8,};
const char message115[]={0x6E,0x93,0xCA,0xE3,0x7E,0x7D,0xB7,0xEC,0xFD,0xE1,0xDD,0xC3,0x3D,0x7,0x19};
const char message116[]={0x2E,0xD0,0xDC,0x2B,0x4B,0x71,0xBD,0x8D,0x39,0xBF,0x8C,0x6E,0x8,0x37,0x5C,0x43,0x2B,0x31,0x60,0xDF,0xC6,0x9C,
0x5F,0x32,0x5A,0xA6,0xE2,0x5A,0xFD,0x4E,0x65,0x52,0x61,0xF,0x32};
const char message117[]={0x6E,0x93,0x5F,0x67,0xA1,0xEE,0x97,0xF2,0x6B,0xB4,0x5E,0x68,0x96,0xD5,0xF9,0x2,0x73,0x83,0xDB,0x89,0x4D,
0xF3,0xD2,0x10,0x60,0x5E,0x70,0x6C,0x1D,0xE5,0xDE,0x28,0xE5,0x11,0x7A,0xF9,0x34,0xB7,0x23,0xC,0xE1,0x21,0xAD,
0xFE,0x2C,0xAB,0x73,0xF8,0x58,0x88,0xCF,0x32,0xAF,0x3B,0x9D,0xB5,0xB,0xF2,0x6,0x1,0xA8,0xB7,0x31,0xE7,0x9B,
0x2A,0xAE,0x6B,0x68,0xEC,0x1D,0xF7,0xB9,0x93,0x6A,0xCA,0xFF,0xA4,0x72,0x71,0x3F,0xC4,0x3D,0x4,0xDC,0x93,0xE6,
0x39,0x79,0x2B,0x32,0x3B,0x1F,0xDE,0x6D,0x4,0xDE,0x9E,0xD8,0x79,0x83,0x7B,0x15,0x7B,0x23,0x2C,0x5F,0x5E,
0x52,0xDF,0x5,0xAC,0x73,0xF1,0x9C,0x3C,0x5B,0x27,0xFD,0x5B,0x91,0xD9,0xF9,0x56,0xEC,0xFC,0x2C,0x29,0x6F,0x91,
0x70,0x4B,0x43,0x2C,0x67,0xDE,0xAA,0xB5,0xF1,0x8C,0xE7,0xE4,0x1B,0x98,0xEB,0x24,0x9C,0xA5,0xDD,0x7F,0x4E,0xDC,
0x6F,0x43,0x1,0x61,0x39,0xC8,};
const char message118[]={0xE3,0xE7,0x1A,0x5A,0x49,0x73,0x1B,0x73,0x3E,0xAA,0xF1,0xCE,0x92,0x72,0x2F,0x5E,0xEF,0xA5,0x4B,0x7E,0x9D,0x5,
0x86,0x1D,0xA9,0xEF,0xB8,0x9C,0xB9,0x9F,0x93,0x77,0x7A,0xAD,0xBC,0x8D,0x39,0xBF,0x71,0xB4,0x5B,0x42,0x81,0xBA,0x17,
0x47,0xB8,0x13,0x1D,0xF7,0xA4,0xB9,0xA5,0xB5,0xF7,0xE2,0x74,0x47,0xA0,0xE3,0xD0,0xDC,0xC6,0x9C,0xCF,0x49,0xD4,
0x7B,0x5A,0x4B,0xEC,0x7C,0xCE,0x50,0x14,0xED,0x97,0xB5,0xDF,0x16,0x64,0xE7,0x1E,0xEE,0x36,0xE9,0xBF,0x94,0xF,
0xCF,0x7B,0xE5,0x73,0xF2,0x6D,0xB4,0x84,0x1C,0x64};
const char message119[]={0x6E,0x93,0xFE,0x5B,0xB1,0xF3,0xB3,0xA4,0xBC,0x45,0xC2,0x9D,0x42,0x48,0x9A,0x57,0x3E,0x27,0x6F,0x71,0x89,
0x0,0x8,0xCB,0x87,0xF7,0x9C,0xFC,0x78,0xB8,0x8E,0xC7,0x57,0x42,0xA,0xF5,0x5F,0x60,0x9E,0x93,0xFE,0x95,0x8E,0x72,
0x13,0xF2,0x3D,0xD6,0xEA,0x97,0x22,0xED,0x3D,0x7C,0x2C,0xC4,0x95,0x6B,0x2C,0x1,0x37,0xDF,0x94,0xBD,0xD7,0x12,0x63,
0xF1,0xDA,0xDF,0x24,0xDC,0xD3,0x68,0x9F,0x93,0xEF,0xD5,0xE0,0x20,0x3};
const char message120[]={0x2E,0x3F,0x92,0x58,0xB1,0xF7,0x5A,0xDC,0xE6,0x53,0x91,0xE6,0x39,0xF9,0xB5,0x74,0xB8,0x6B,0x7E,0xD6,0xBE,0x45,
0xC2,0x77,0x59,0x91,0xB5,0xA4,0x19,0xF1,0x36,0x5F,0xBD,0x8D,0x9D,0xEF,0xB1,0xF3,0x75,0x7B,0x92,0xFD,0xC0,0xD2,
0x8F,0xBE,0x2F,0xB1,0xF6,0x5A,0xC3,0x28,0x97,0x6F,0x52,0x56,0x64,0x2D,0x69,0x46,0xF7,0xA6,0x22,0x17,0xB7,0xA7,0x3F,0xBA,0x51,0x2E,0xEF,0xFA,0xC9,
0x52,0xF3,0x9C,0x95,0x2F,0x88,0x9C,0xD4,0xAF,0xA5,0x9F,0xB5,0x6F,0x91,0x70,0xC3,0x8E,0x52,0x2A,0xCD,
0x33,0x3E,0x2E,0xF6,0x82,0x7B,0xA1,0xCF,0xC9,0x37,0xC1,0xDE,0xB8,0xB,0x51,0xE6,0x2E,0x14,0x9A,0x61,0x94,0xCB,0x37,0x73,0xC6,0xD7,
0x82,0x3B,0xB1,0x37,0x5A,0xDD,0xBF,0x89,0xE7,0xC4,0x3D,0xBA,0x51,0x63,0x21,0xBE,0xC5,0x72,0xC9,0x9D,0xCF,0x78,0x53,0xC5,0x75,
0xD,0x8D,0xBD,0xE3,0x7E,0x88,0xDB,0xD8,0xFB,0xD7,0x68,0x79,0xAB,0xD6,0xC6,0x33,0xEE,0x26,0x14,0xE1,0x19,0x5F,
0x32,0x9F,0x93,0xDF,0x4E,0x29,0xEF,0x94,0xE6,0xBE,0x17,0xFA,0x9C,0xFC,0x5A,0x7A,0x87,0xBA,0x3,0xAA,0x77,
0x7F,0x78,0x93,0xC9,0xD7,0x52,0xC9,0x7D,0x1B,0x73,0xDE,0xF,0xF1,0x2,0xF3,0x9C,0xBC,0x94,0xEA,0x7F,0x57,0xCB,
0x97,0x97,0x54,0x88,0x80,0xFB,0x21,0x9E,0xD5,0xE0,0xFD,0x10,0xFA,0xD4,0x42,0x18,0x46,0x8D,0x6A,0xB6,0xF6,0xB6,0x43,
0xCD,0xBD,0xD0,0xE7,0xE4,0x37,0xD7,0x0,0x73,0xA7,0x34,0x1F,0xDE,0x73,0xF2,0xCB,0x6A,0x39,0xE2,0x9B,0xB8,0xE7,0xDA,0xB4,0xE9,0xE8,
0x47,0x72,0xDF,0xCD,0xBD,0x8F,0xDE,0xBD,0xA6,0x12,0x4D,0xDC,0x24,0x46,0x92,0x90,0x1};
const char message122[]={0x63,0x21,0x6E,0x7,0x48,0xE6,0x81,0x34,0x97,0x62,0x74,0xC2,0xCA,0x67,0x7C,0x8D,0xD6,0xE9,0x4C,0x3E,0x27,
0xEE,0x3B,0xA5,0xF9,0xF0,0x9E,0x93,0x5F,0x56,0xCB,0x41,0x6};
const char message123[]={0x63,0x21,0x9E,0xEA,0x3F,0xE3,0x6D,0x35,0x78,0x3F,0x84,0xDE,0x2E,0xFF,0x19,0xCF,0xC9,0x5B,0xA5,0xB0,0xB8,0x25,
0xF2,0x1E,0x82,0xB9,0x1F,0x42,0xEF,0x54,0xCE,0x5B,0x3D,0xD6,0x6,0xCD,0x2D,0xFF,0x39,0xF9,0x65,0x25,0x87,0xBB,
0xE6,0xC3,0x92,0x62,0x88,0xDD,0xFD,0xE3,0x7E,0x8F,0xB5,0x41,0xB3,0x78,0xED,0x37,0xA1,0x2E,0x31,0xDE,0x20,0x9D,0xFD,0x9C,
0x7C,0xDA,0xF1,0xA6,0x8A,0xEB,0x1A,0x1A,0x7B,0x87,0xE4,0xBE,0x89,0xE5,0x7E,0x4E,0x2A,0x7,0x19};
const char message124[]={0xAE,0x29,0xB9,0x5F,0xF0,0xE8,0xC6,0xA5,0x57,0x7B,0x62,0x0,0xCD,0xF7,0xC,0x67,0x71,0x1B,0x73,0xBE,0x6E,0x47,0x18,
0xC2,0x37,0x2E,0xE1,0xBB,0x7C,0x84,0xE5,0x9B,0x8F,0xBF,0x3E,0x2,0x66,0x86,0x62,0x2C,0xBE,0xE2,0xDA,0xF1,0x7C,0x1B,0x19,
0x2B,0xAE,0x1D,0x87,0xE6,0x32};
const char message125[]={0x63,0x21,0x4E,0x48,0xEA,0x73,0xF2,0xEB,0x14,0xBA,0xCE,0x17,0x98,0xEF,0x2C,0xFF,0x39,0xA9,0xBC,0x17,
0xFA,0xBA,0x3D,0xB1,0x73,0xF8,0x58,0x88,0x97,0x69,0x51,0xF9,0x9C,0xBC,0x84,0x9,0xAD,0xC4,0x80,0x87,0xF7,0x9C,
0xBC,0xDB,0x54,0xF2,0xCD,0xC4,0xCD,0x8F,0x4B,0x78,0x81,0x79,0x4E,0xDE,0x5,0x1A,0xB2,0xA5,0xDE,0x62,0xDA,0x24,
0x3C,0x27,0x3F,0x2,0xEA,0x12,0xE1,0xE3,0x96,0xFA,0x2F,0x30,0x77,0x77,0x31,0xE1,0x39,0xF9,0xA6,0xE5,0x24,0xEE,0xBC,0xA7,
0xDC,0x6B,0xD0,0x3C,0xE0,0x39,0xF9,0x72,0x36,0x87,0xBB,0x4D,0xC2,0xE2,0x7E,0x88,0x73,0x34,0xCC,0xAF,0xD1,0x22,
0x2C,0x6F,0xD5,0xDA,0x78,0xC6,0x73,0xF2,0xDB,0x1D,0x51,0xCA,0xC5,0xED,0x0,0x43,0x45,0x58,0xDE,0x9E,0x95,0xEF,0xE8,
0xF1,0x76,0xED,0x77,0x6C,0xF0,0x5E,0xE8,0x73,0xF2,0xA5,0x89,0x3B,0xF7,0xED,0x19,0xB7,0x43,0x1B,0x34,0x9F,
0x54,0x2E,0x8E,0xF0,0x9C,0xB8,0xDF,0xD6,0x12,0xD0,0xC3,0x95,0x90,0x77,0x7A,0xAD,0xFC,0x78,0x89,0x9D,0x47,0xB8,0xA7,
0x1,0xF9,0xF0,0x9E,0x93,0xEF,0xD5,0xE0,0x20,0x3};
const char message126[]={0xE3,0xB6,0xED,0x30,0xC,0xF7,0x94,0x7B,0x76,0xFF,0x56,0x35,0x68,0x6E,0x29,0xCB,0x8C,0x23,0x3};
const char message127[]={0x63,0x21,0xEE,0x88,0x7C,0x7D,0x16,0x98,0x23,0xDC,0xF,0xA1,0x77,0x62,0x6D,0x30,0x5F,0x60,0xEE,0x87,0xB8,0x87,
0x60,0x5E,0xF7,0x68,0x7F,0xD,0x84,0x3D,0x7C,0x2C,0xC4,0x4B,0xF9,0x7A,0xC7,0xCC,0xCE,0x4F,0x1,0x4B,0xF5,
0x5F,0x60,0x6E,0x9,0xFF,0x75,0xA7,0x34,0x1F,0xDE,0x5B,0xAC,0xBD,0x62,0xDD,0xB,0xBD,0x1F,0x42,0x37,0xBB,0x37,0xE2,
0x31,0x25,0xF7,0xEB,0x6B,0x35,0xF8,0xB6,0xC,0x6F,0x63,0xCE,0x5B,0xCA,0x32,0x8B,0xB7,0xD8,0x1B,0x8B,0x7B,0xCA,0x3D,
0x5F,0x60,0x6E,0x14,0x69,0xEE,0xA9,0xC0,0xDC,0xF7,0x7A,0x8,0x7D,0x81,0xF9,0x16,0xCB,0xD2,0xE1,0xAE,0x29,0xB9,
0x6F,0xD8,0x71,0xC5,0x10,0x7B,0x90,0x1};
const char message128[]={0x23,0x8F,0xC5,0xFD,0x10,0x2F,0xE5,0x21,0xF2,0x53,0xC0,0x52,0xFD,0x17,0xF8,0x6D,0x28,0x7,0x19};
const char message129[]={0x6E,0x93,0xCA,0xE3,0x7E,0x7D,0xE3,0x12,0xBE,0xCB,0x47,0x58,0xBE,0xF9,0xB8,0xA5,0x2D,0x9E,0x5F,0x6A,0x1,0x26,0xE,
0xCD,0x65};
const char message130[]={0xEE,0x77,0xDC,0xF5,0x5D,0xFE,0x1E,0x71,0xD4,0x28,0x97,0x1F,0xB7,0x4C,0xB5,0x8B,0x3B,0x9D,0xB5,0x39,0xCE,0xDD,0x26,0xEF,0xF5,0x8,
0x3D,0xEE,0xDB,0xCC,0x23,0x3C,0x27,0xEE,0x6F,0x34,0x7C,0x78,0xCF,0xC9,0x6B,0x44,0xBB,0xB8,0x89,0x43,0xE4,
0x77,0xD2,0x79,0xC0,0x31,0xC7,0x91,0x1};
const char message131[]={0x6E,0x93,0xF7,0x7A,0x84,0x1E,0xF7,0x11,0xEE,0x44,0xC7,0x3D,0x69,0xDE,0x96,0x5A,0x9D,0x8B,0x4B,0xA9,0xFE,0xD9,
0xB9,0x2C,0xC8,0xE1,0xAE,0x29,0xB9,0x6F,0xD4,0x5F,0x1C,0xC2,0x1E,0x64};
const char message132[]={0x6E,0x93,0xF7,0x7A,0x84,0x1E,0xF7,0x11,0xEE,0x44,0xC7,0x3D,0x69,0xDE,0x96,0x5A,0x9D,0x8B,0x4B,0xA9,0xFE,0xD9,
0xB9,0x2C,0xC8,0xE1,0xEE,0x77,0xDC,0xF5,0x59,0xFB,0xE3,0x25,0x76,0xDE,0xAE,0x3D,0x69,0x8E,0xF9,0x2,0xF3,0x59,0xDD,
0x7B,0x78,0xCF,0xC9,0x6B,0x44,0x7B,0xDC,0xDF,0x89,0xBD,0xDF,0x66,0xE,0x1F,0xB,0xF1,0xB5,0xE0,0x10,0x79,
0xBB,0x7A,0xE3,0x1,0xCF,0x89,0xFB,0x1B,0xD,0x7,0x19};
const char message133[]={0xCD,0x9C,0x84,0xFB,0x21,0x4E,0x48,0xEA,0x73,0xF2,0x1A,0xD1,0x2E,0xEE,0x87,0xB8,0x47,0xF6,0x17,0xBC,0x50,
0xBF,0x53,0x59,0xED,0x73,0x56,0x7E,0x8D,0x96,0xFB,0x9E,0x46,0xFB,0x9C,0x7C,0x38,0x84,0xDB,0x8,0x26,0xEC,
0x3D,0xDC,0x35,0x6F,0x14,0xB9,0x9F,0x93,0xF7,0x7A,0x84,0xE,0x32};
const char message134[]={0x4D,0x92,0xD5,0x7E,0x2D,0xDD,0x7,0xD2,0xDC,0xAE,0xA4,0xBE,0xC0,0xDC,0x29,0x2D,0xCF,0x43,0x18,0x3E,0x16,0xE2,
0x40,0x9A,0x67,0xDC,0xC3,0xDE,0x6F,0x45,0xCE,0x67,0x41,0x63,0xF,0x32};
const char message135[]={0xAE,0x29,0xB9,0x5F,0x4F,0xDF,0xC1,0xB5,0xFA,0xAD,0x6A,0x50,0xFD,0x6F,0xF6,0x8E,0xB0,0xBC,0xA5,0x2C,0xF3,0x2,
0xF3,0x1E,0x6B,0xF5,0x3B,0xB5,0x53,0xFD,0x41,0x6};
const char message136[]={0x23,0x8F,0x7C,0x2B,0xD6,0xF9,0x42,0xFD,0x1A,0x2D,0xF7,0x3D,0x8D,0xF6,0x39,0x79,0x1B,0xC1,0x84,0x3D,0xDC,0x6D,0xF2,
0x5E,0x8F,0xD0,0xDB,0xD8,0xFB,0xB3,0x1A,0x7C,0xBD,0x7,0x2C,0x9F,0xD8,0xF2,0x19,0x37,0xEA,0xF,0x32};
const char message137[]={0x63,0x21,0x6E,0xB8,0xA2,0xE1,0x33,0xDE,0x20,0x9D,0x63,0xDE,0xB,0xBD,0x3D,0x9,0xF7,0x43,0xDC,0xC6,0xDE,
0x6F,0x14,0xA5,0x7C,0x4E,0x7E,0x2D,0x1D,0x64};
const char message138[]={0x63,0x21,0xCE,0xD1,0x9C,0x1E,0xCA,0xE7,0xE4,0x1B,0x98,0xEB,0x24,0x1C,0xE1,0x9B,0xA5,0xEB,0xBC,0x17,0xFA,0x1D,
0x2D,0x73,0x22,0x2C,0x2F,0x36,0x3D,0xD1,0x87,0x8F,0x85,0x78,0x40,0xF7,0xEF,0x21,0x98,0xE7,0xE4,0xD9,0x3A,0xE9,
0xDF,0x8A,0xCC,0xCE,0x87,0x77,0x1B,0x81,0xF7,0x43,0xDC,0x68,0x41,0xE3,0x3E,0x77,0x52,0x4D,0xF9,0xA7,0x94,0x80,
0xB0,0xBC,0x8D,0x39,0xDF,0x54,0x71,0x5D,0x43,0x63,0xEF,0x58,0xDC,0xC6,0x9C,0xC7,0xDC,0x5F,0x43,0x1B,0x83,0xC};
const char message139[]={0xEE,0xAF,0x2B,0x7B,0x27,0x24,0x3F,0x6E,0xE9,0xF8,0xB0,0x45,0x88,0x71,0x64};
const char message140[]={0x63,0x21,0xEE,0x85,0xAE,0x7C,0x4E,0x7E,0xD,0x6D,0x1C,0x21,0xE3,0x39,0xF9,0x19,0x9D,0x23,0x3E,0x27,0x6F,
0x89,0xB5,0xC1,0x3C,0xEE,0x2B,0x9D,0x42,0xA5,0x19,0x64};
const char message141[]={0xAE,0x29,0xB9,0x5F,0x77,0x94,0x99,0xFE,0x43,0xD,0x42,0xA9,0xFF,0x35,0xB4,0xF1,0x9C,0x95,0xF7,0x43,0xDC,0xB,
0x1,0xE6,0x8,0xCF,0xC9,0x37,0x30,0xD7,0x49,0x18,0x64};
const char message142[]={0x6E,0x93,0xB7,0x22,0xB3,0xF3,0xB8,0x9F,0x11,0xDF,0x6D,0xF5,0xFE,0x2,0x73,0x1,0x8E,0xD6,0x9A,0xB8,0x56,
0x7F,0xC6,0x3D,0xEC,0xFD,0x39,0xF9,0xB5,0x74,0xF8,0x78,0x46,0x30,0xAF,0xF7,0xD2,0x25,0xF5,0x6B,0x40,0x16,0x2,
0x75,0x90,0x1};
const char message143[]={0x63,0x21,0x6E,0x69,0xD8,0x9B,0x2F,0xD,0x1,0xE6,0x9B,0x36,0xC2,0xF2,0xA5,0x89,0x6B,0xE7,0x5E,0xDC,0x12,0x99,
0x1,0xFB,0x5,0xE6,0x6B,0x8F,0x9C,0x7B,0x71,0x4B,0xE4,0xFD,0x10,0x37,0x1,0x92,0x79,0x20,0xCD,0x73,0xB2,0x7D,
0xE5,0x73,0xF2,0x6D,0xB4,0x84,0x1C,0x64};
const char message144[]={0xAE,0x29,0xB9,0x5F,0xDF,0x6D,0xF5,0xFE,0xE8,0xC6,0xE5,0x4E,0xBF,0xF3,0x7B,0x86,0x33,0xDC,0x35,0xDF,0x23,0x1A,0xFB,0x1D,
0x1B,0x3C,0xE6,0x67,0xED,0x5B,0x24,0x3C,0x27,0x95,0xF7,0x42,0xDF,0x86,0xF2,0x39,0xB,0xEE,0xA1,0x97,
0xFE,0x7D,0x96,0xEE,0x41,0x6};
const char message145[]={0xEE,0x8F,0x56,0x2D,0x2,0x8F,0xB9,0xB8,0x87,0xBA,0x73,0x90,0x1};
const char message231[]={0x63,0x21,0xDE,0x96,0xFF,0x54,0x7F,0x71,0x4B,0xE4,0x31,0x6F,0x63,0xEF,0x77,0x34,0xAC,0xB2,0xBA,0x7F,0x88,0xBC,0x1D,
0xDA,0x18,0x64};
const char message400[]={0x23,0x8F,0xE1,0x63,0x21,0x5E,0x4A,0x90,0xCC,0x27,0x2A,0xCD,0xE2,0x10,0xF6,0x20,0x3};
const char message401[]={0x23,0x8F,0x3,0x69,0x9E,0x71,0x13,0xCF,0x59,0x79,0x8,0x7B,0x90,0x1};
const char message402[]={0xEE,0xBA,0x79,0x49,0xCB,0xA7,0xE4,0x33,0xBE,0x33,0x9C,0x3B,0xBD,0x7C,0x84,0xE5,0x20,0x3};
const char message407[]={0x6E,0x13,0xF7,0x71,0xBF,0x9E,0x1C,0x2D,0x5F,0x46,0x4A,0x48,0xA1,0xFC,0xB2,0x5A,0xE,0x77,0x81,0x65,0x6E,0xB8,
0x57,0x45,0x27,0x31,0x60,0x7F,0x2D,0xA5,0x27,0x7A,0xF7,0x5F,0x60,0x9E,0xBE,0xC3,0xAF,0xD1,0xB6,0x5,0x66,0x7F,0x8B,
0x75,0xBE,0xF6,0x25,0x39,0x5A,0xB5,0x8,0xBC,0x45,0x23,0x39,0xDC,0xCD,0x77,0xF8,0xE6,0x10,0x9A,0xB3,0xF9,0xE2,0xCD,0x77,0x88,0x9C,
0xCD,0x17,0x1F,0x86,0xE1,0x19,0x6F,0x43,0xCA,0x23,0x3C,0x27,0x6F,0xB8,0x51,0x69,0x6E,0x50,0xB9,0x26,0x6,0xC,
0xC3,0x25,0x2C,0x4B,0x29,0xC5,0x4A,0xC,0xD8,0x2F,0xE5,0x9D,0xD8,0x1B,0xAD,0xCE,0x37,0x1F,0xAD,0xF9,0xBD,0xD0,0x37,0xE7,0x68,
0xD5,0x22,0xB0,0xF9,0xE2,0xCD,0x7B,0xF3,0x67,0xBC,0x79,0x8F,0x68,0x34,0xFF,0xC8,0xC0,0x81,0xC3,0xD,0xF7,0xAA,0x68,0xF1,0x7E,
0x8,0xFD,0x2A,0x54,0x9,0xF9,0x1E,0x6B,0x25,0x6,0xBC,0x96,0x85,0x30,0x32,0x17,0x6F,0x8E,0xCD,0xEF,0x85,0xBE,0x39,0x82,0x94,
0x90,0xA1,0xFE,0xA2,0xF9,0x9B,0x43,0xF3,0x7B,0xA1,0x6F,0xE,0xA1,0x39,0x9B,0xBF,0xC0,0x7C,0xC7,0x3,0x86,0xBB,0xC5,0xDD,0x11,
0x98,0xCF,0xC9,0x2F,0xAB,0xE5,0xE2,0xE9,0x3B,0x7C,0x73,0xCB,0x67,0xF3,0xE1,0x6E,0x71,0xE5,0xCE,0xD2,0x3C,0xE6,0xE2,
0xE9,0x3B,0x7C,0x73,0xE5,0xCE,0xD2,0x6C,0x3E,0xC8,};
const char message408[]={0xCD,0x76,0xD6,0xE6,0xE2,0xE9,0x3B,0x7C,0xBD,0xD,0xE5,0xB7,0xC3,0x15,0x3D,0x5C,0x5F,0x6B,0x62,0xC0,0x30,0xC,0x32};
const char message504[]={0xCD,0x76,0xD6,0xE6,0x3D,0xB2,0xDF,0x53,0xF2,0x19,0x5F,0x3,0x12,0x41,0x70,0x71,0xF4,0xEE,0x87,0xB8,0x8D,
0x7B,0x3E,0x63,0x18,0x86,0xBB,0x4A,0x4A,0x79,0x8B,0x6B,0xB4,0x3C,0xB6,0xE,0x55,0x8A,0x21,0xF6,0x33,0xBE,0x6D,0x96,
0x22,0x2C,0x5F,0x60,0xEE,0x68,0x78,0x5,0x98,0xFE,0xEB,0x3D,0x60,0xF9,0xC4,0x96,0xAF,0x65,0xC,0x32};
const char message505[]={0x23,0x8F,0xC5,0xFD,0x10,0x37,0x1,0x92,0x79,0x8F,0xEC,0xCF,0xC9,0x3,0x69,0x6,0x19};
const char message518[]={0x63,0x21,0x24,0x7B,0x3F,0x47,0xAB,0x16,0x81,0xF7,0x43,0xE8,0x66,0xF7,0xDE,0x8A,0x75,0xDE,0x62,0x26,0xF5,0x36,0xE6,
0x7C,0xBD,0x45,0xD5,0xD0,0x41,0x6};
const char message996[]={0x63,0x21,0xBE,0xC9,0x43,0xE4,0x44,0x58,0x1E,0x21,0xA9,0xDC,0x89,0xB0,0x1C,0x64};
const char message997[]={0x63,0x21,0x6E,0x2,0x24,0xF3,0xBB,0x65,0xEF,0x2F,0xF0,0x73,0x22,0x2C,0x8F,0x70,0xA7,0x34,0x71,0x15,0xBD,0x74,
0xF1,0x72,0x4A,0xF3,0x9E,0x46,0xFB,0xBA,0x55,0xCA,0xEE,0xDF,0xA1,0xAE,0x74,0x12,0xAD,0xCE,0xEF,0x95,0x90,0xF,
0xEF,0xBD,0xA4,0x4,0x43,0x5D,0x7C,0x8D,0x16,0x61,0x79,0x4F,0xA3,0xBD,0x1F,0x42,0xBF,0xF6,0xC8,0xC9,0x3D,0xC8,};
const char message998[]={0x63,0x21,0x3E,0x4B,0xCA,0xD7,0x77,0x6A,0xC1,0x92,0xDF,0x84,0x5D,0x89,0x1,0x8B,0x57,0x6F,0x63,0xE7,0x6B,
0x1F,0xBD,0xFB,0x21,0x6E,0x53,0x79,0x8B,0x6B,0xB4,0x8,0xCB,0x77,0x5C,0xCE,0xA4,0xBE,0xC0,0xBC,0xE3,0x72,0x26,
0x75,0xB8,0x84,0x97,0xD4,0xD7,0xED,0x89,0x9D,0x8B,0x53,0x4A,0xF5,0x73,0x22,0x2C,0x6F,0x71,0x8D,0x96,0xFB,0x10,0xDA,
0x56,0x5F,0xBC,0x96,0x85,0x30,0xC8,};
const char message999[]={0x23,0x8F,0x27,0xB6,0xBC,0x17,0xFA,0x9C,0x95,0x8B,0x43,0xD8,0x83,0xC};
const char message1000[]={0xA3,0x6F,0x94,0x3F,0xC8,};
const char message1001[]={0xE3,0xF,0xE0,0x20,0x3};
const char message1002[]={0xE3,0xF,0xE0,0x20,0x3};
const char message1003[]={0x25,0x3};
const char message1004[]={0x25,0x3};
const char message1005[]={0x63,0x21,0xBE,0x16,0x48,0xE6,0xB3,0x1A,0x7C,0xCE,0xCA,0x71,0x64};
const char message1006[]={0x63,0x21,0xBE,0x16,0x48,0xE6,0x4D,0x3C,0x67,0xE5,0x38,0x32};
const char message1007[]={0x63,0x21,0x6E,0x2,0x24,0xF3,0xB3,0xA4,0x7C,0xCE,0xCA,0xDB,0x98,0xF3,0x7E,0x88,0x71,0x64};
const char message1008[]={0x63,0x21,0xBE,0x16,0x48,0xE6,0x97,0xF1,0x9C,0x95,0xB7,0xCB,0x1F,0x47,0x6};
const char message1009[]={0xAE,0xB7,0xB8,0xBC,0x1F,0x42,0xEF,0x94,0x9A,0x80,0xD1,0xC9,};
const char message1010[]={0x63,0x21,0xBE,0x16,0x48,0xE6,0x20,0x3};
const char message1011[]={0x63,0x21,0x5E,0x5D,0x59,0xC6,0xFF,0x2C,0x29,0x9F,0xB3,0xF2,0x36,0xE6,0xBC,0x1F,0x62,0x1C,0x19};
const char message1012[]={0xCD,0x9C,0x95,0x37,0x71,0x3F,0xC4,0xED,0x82,0x7C,0xC6,0x4D,0x8C,0x4E,0x6};
const char message1013[]={0x32};
const char message1018[]={0x23,0xC3,0xE,0x85,0x91,0x29,0x3};
const char message1019[]={0x32};
const char message1020[]={0x63,0x21,0xBE,0x16,0x7C,0x19,0x23,0x5E,0x6};
const char message1021[]={0x10,0x9A,0x53,0x6};
const char message1022[]={0x3B,0x44,0x4E,0x19};
const char message1023[]={0xAC,0x9D,0x32};
const char message1024[]={0x36,0x77,0xCA,};
const char message1025[]={0xC2,0x91,0x1};
const char message1026[]={0x26,0x6C,0x90,0x1};
const char message1027[]={0x32};
const char message1028[]={0x32};
const char message1029[]={0x32};
const char message1030[]={0x32};
const char message1031[]={0x63,0x21,0xE,0x91,0xB8,0x72,0xC4,0xCB,};
const char message1032[]={0x63,0x21,0x3E,0x4B,0xCA,0xDB,0x98,0xF3,0x7E,0x88,0x11,0x2F,0x3};
const char message1033[]={0x10,0x39,0x11,0x96,0x83,0xC};
const char message1035[]={0x32};
const char* dir[6]={
    message1021,
    message1022,
    message1023,
    message1024,
    message1025,
    message1026};

const char desc_l24[]={0xCD,0x2A,0xC2,0xCA,0xBD,0xDF,0x54,0x71,0x5D,0x43,0x63,0xEF,0x90,0x1};
const char desc_l25[]={0x12,0xDD,0xA2,0xE6,0x9B,0x45,0x60,0x97,0x1};
const char desc_l26[]={0x4D,0x71,0xF5,0xD7,0xCE,0x17,0x98,0xB7,0x91,0xA1,0x16,0x36,0xF8,0x96,0xEB,0x2C,0xC0,0x55,0x6};
const char desc_l27[]={0x12,0x5F,0xB,0xEE,0x89,0xDE,0x1F,0xDE,0x9D,0xD2,0xF2,0x3C,0x4,0x19};
const char desc_l28[]={0x4D,0x92,0xD5,0x7E,0x49,0xA0,0x56,0x86,0xCA,};
const char desc_l29[]={0xAE,0x6E,0x12,0x6F,0xC3,0xB0,0x7F,0xBC,0xC7,0xB7,0x19,0x32};
const char desc_l30[]={0x4D,0xA8,0x4B,0xC,0x19};
const char desc_l31[]={0x12,0xB7,0xC4,0xDA,0x60,0xDE,0x13,0xBD,0x3F,0xBC,0x7B,0xCA,0x3D,0x6F,0x57,0x52,0x65};
const char desc_l32[]={0x12,0x70,0xB6,0x4E,0xFA,0xB7,0xC4,0xDA,0x60,0x2E,0xAE,0x74,0xA,0x95,0x46,0x6};
const char desc_l33[]={0x12,0x77,0x62,0x27,0x55,0x6};
const char desc_l34[]={0x12,0xDF,0xEE,0x8,0x56,0xC3,0xBF,0x3D,0xC9,0x2E,0x3};
const char desc_l35[]={0x12,0xDF,0x6D,0xF5,0x7E,0x13,0x6B,0x43,0x6};
const char desc_l36[]={0x12,0x57,0x3A,0x85,0x4A,0x73,0x7B,0x92,0x5D,0x6};
const char desc_l37[]={0xEE,0x77,0xDC,0xB5,0x78,0x4E,0xBE,0x2D,0x34,0x32};
const char desc_l38[]={0x12,0xF0,0xE8,0xE6,0x96,0x58,0x1B,0xCC,0xC5,0x6D,0xCC,0xF9,0xFA,0x8C,0x4E,0x19};
const char desc_l39[]={0x12,0x6B,0x28,0x6C,0x19};
const char desc_l40[]={0xA3,0xAF,0xC6,0x3B,0x4B,0xCA,0x2D,0x3};
const char desc_l41[]={0x12,0xDF,0x33,0x34,0xDF,0x59,0xDE,0xB5,0x1A,0x94,0x1};
const char desc_l42[]={0x12,0xB7,0x11,0x78,0x2B,0x32,0x3B,0x17,0x67,0xEB,0xA4,0x2F,0x3};
const char desc_l253[]={0x12,0x5F,0x43,0x1B,0x32};
const int original_position[20 ]={
    4,17,18,0,18,0,0,0,0,19,20,21,0,5,0,15,15,0,0,0,};
object obj[20 ]={
    {24,desc_l24,4,0},
    {25,desc_l25,17,0},
    {26,desc_l26,18,0},
    {27,desc_l27,0,0},
    {28,desc_l28,18,0},
    {29,desc_l29,0,0},
    {30,desc_l30,0,0},
    {31,desc_l31,0,0+ 1 },
    {32,desc_l32,0,0+ 1 },
    {33,desc_l33,19,0},
    {34,desc_l34,20,0+ 1 },
    {35,desc_l35,21,0},
    {36,desc_l36,0,0+ 1 },
    {37,desc_l37,5,0},
    {38,desc_l38,0,0+ 1 },
    {39,desc_l39,15,0+ 1 },
    {40,desc_l40,15,0+ 1 },
    {41,desc_l41,0,0+ 1 },
    {42,desc_l42,0,0+ 1 },
    {253,desc_l253,0,0}
};

room_code current_position;
room_code next_position;
boolean retv;
extern unsigned char  ls;
extern char playerInput[];
boolean marker[129];
int counter[129];
object *odummy;

char *searchw(unsigned int w)  ;
boolean unwear(unsigned int o)  ;
void printnewline(void)
{
    writesameln("\n");
}

void printspace(void)
{
    writesameln(" ");
}

unsigned char  search_object(unsigned int o)  
{
    unsigned char  idx;
    for(idx=0; idx< 20 ;++idx)
        if(obj[idx].code==o)
            return idx;
    return 0;
}

object *search_object_p(unsigned int o)  
{
    return &obj[search_object(o)];
}
unsigned char  search_room(unsigned char  r)  
{
    for(cdummy=0; cdummy< 23 ;++cdummy)
        if(world[cdummy].code==r)
            return cdummy;
    return 0;
}

void restart(void)
{
    unsigned char  j;
    for(cdummy=1;cdummy<129;++cdummy){
        marker[cdummy]=0;
        counter[cdummy]=0;
    }
    for(j=0; j< 23 ;++j)
        for(cdummy=0; cdummy< 6 ;++cdummy)
            world[j].directions[cdummy]=original_connections[j][cdummy];
    marker[124]= 1 ;
    next_position=100;
    for(j=0; j< 20 ;++j)
        obj[j].position=original_position[j];
}

void show_messagenlf(const char *m)  
{
    boolean o;
    cpointer=0;
    bpointer=0;
    compressed=(char *)m;
    do{
        o=decode();
        writesameln(decompress_b);
    } while(o);
}

void show_message(const char *m)  
{
    show_messagenlf(m);
    printnewline();
}

boolean are_you_sure(void)
{
    show_message(areyousure);
    fgets(( playerInput ),( 128  ),(_impure_ptr ->_stdin) ); ;
    if(playerInput[0]=='Y' || playerInput[0]=='y') {
        return 1;
    }
    return 0;
}


# 1389 "silkdust1_no_UTF8.c"

void move(unsigned char  dir)  
{
    unsigned char  p;
    p=cr->directions[dir];
    if(p) {
        next_position=p;
        marker[120]= 0 ;
    } else 
        show_message(message1008);

}

boolean get(unsigned int o)  {

    odummy=search_object_p(o);
    if(odummy->position!=current_position) {
        show_message(message1006);
    } else if((odummy->attributes& 1 )==0) {
        show_message(message1005);
    } else {
        odummy->position= 1500 ;
        return 0 ;
    }
    return 1 ;
}
boolean vov(unsigned int v1, unsigned int v2);
boolean vovn(unsigned int v1, unsigned int v2, unsigned int n);
boolean vovn100_0(unsigned char  n)  ;
boolean non1(unsigned int n1, unsigned int n2);
void ok(void);
boolean check_verb_noun(unsigned int v, unsigned int n);
boolean cvn70(unsigned char  n)  ;
boolean check_verb_actor(unsigned int v, unsigned char  n);
boolean check_verb75_actor(unsigned char  n)  ;
boolean check_verb75_actor_available(unsigned char  n)  ;
boolean check_verb70_actor(unsigned char  n)  ;
boolean check_verb70_actor_available(unsigned char  n)  ;
unsigned char ams(unsigned char  v, unsigned char n, char* m);



    

void sendallroom(unsigned int s)  ;
# 1447 "silkdust1_no_UTF8.c"

    
    
    

boolean object_is_available(obj_code c)  
{
    return (search_object_p( c )->position==current_position) || (search_object_p( c )->position== 1500 ) ;
}
void set_object_position(obj_code c, int pos)
{
    search_object_p(c)->position=pos;
}
void set_object_position0(obj_code c)  
{
    set_object_position(c,0);
}
void set_object_positionC(obj_code c)  
{
    set_object_position(c,1500 );
}
void bring_object_here(obj_code c)  
{
    set_object_position(c,current_position);
}
void amsm(unsigned char  p, unsigned char  c, boolean v, const char *m);
boolean cvna(unsigned int v, unsigned int n, unsigned int o);
boolean cvna70(unsigned char  n, unsigned char  o);
boolean cvna70neq(unsigned char  n)  ;
boolean drop(unsigned int o)  
{
    odummy=search_object_p(o);    if(odummy->position== 1500 ){        odummy->position=current_position;    } else {        show_message(message1007);        return 1 ;    }    return 0 ;}
# 1487 "silkdust1_no_UTF8.c"

void jump(unsigned char  p)  
{
    next_position=p;
    marker[120]= 0 ;
}

void hold(unsigned int p)  ;
char iscarrsome(void);
char iswearsome(void);








char check_position_marker_on(unsigned int p, unsigned char f);
char check_position_marker_off(unsigned int p, unsigned char f);
void hi_cond(void)
{
    retv= 1 ;
     
    if(current_position==100) {
        wait_key(); ;
        jump(1);
        return;
    }

     
    if(current_position==19) if(marker[1]) if(marker[2]) if(marker[6]) if(marker[5]== 0 ) {
        set_object_position(29,9);
        set_object_position(30,9);
        marker[5]= 1 ;
        show_message(message73);
    }

     
    if(current_position==20) {
        bring_object_here(25);
    }

     
    if(current_position==21) {
        bring_object_here(25);
    }

     
    if(current_position==5) if(marker[16]) if(marker[17]) if(marker[18]== 0 ) {
        marker[18]= 1 ;
        show_message(message133);
    }

     
    if(current_position==5) if(marker[16]) if(marker[17]== 0 ) if(marker[18]== 0 ) {
        show_message(message136);
    }

     
    if(current_position==5) if(marker[17]) if(marker[16]== 0 ) if(marker[18]== 0 ) {
        show_message(message136);
    }

    retv= 0 ;    return;
}
void low_cond(void)
{
    retv= 1 ;
     
    if(check_verb_noun(70,409)) {
        show_message(message518);
        return;
    }

     
    if(verb==( 73 ) ) {
        if(are_you_sure()) {
             ; exit(0);
        }
        return;
    }

     
    if(vovn(74,0,72)) {
        { boolean gs= 0 ; show_message(message1032); for(cdummy = 0; cdummy< 20 ; ++cdummy) { dummy=obj[cdummy].position; if(dummy== 1500 ||dummy== 1600 ) { gs= 1 ;  ; show_messagenlf(obj[cdummy].desc);  ; if(dummy== 1600 ){ printspace(); show_messagenlf(message1018); } printnewline(); } } if(gs== 0 ) show_message(message1033);} ;
        return;
    }

     
    if(verb==987) {
        if(are_you_sure())
            restart();
        return;
    }

     
    if(verb==( 110 ) ) {
        marker[120]= 0 ;
        return;
    }

     
    if(vovn100_0(80)) {
        move(0);
        return;
    }

     
    if(vovn100_0(81)) {
        move(1);
        return;
    }

     
    if(vovn100_0(82)) {
        move(2);
        return;
    }

     
    if(vovn100_0(83)) {
        move(3);
        return;
    }

     
    if(vovn100_0(84)) {
        move(4);
        return;
    }

     
    if(vovn100_0(85)) {
        move(5);
        return;
    }

     
    if(verb==( 201 ) ) {
        show_message(message400);
        return;
    }

     
    if(check_verb_noun(12,10)) {
        show_message(message401);
        return;
    }

     
    if(verb==1000) {
        show_message(message998);
        return;
    }

     
    if(verb==400) {
        show_message(message504);
        return;
    }

     
    if(verb==401) {
        show_message(message61);
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message997);
        return;
    }

     
    if(current_position==13||current_position==14||current_position==9||current_position==8||current_position==16||current_position==17) if(cvn70(53)) {
        show_message(message82);
        return;
    }

     
    if(current_position==2||current_position==6) if(verb==( 70 ) ) if(non1(68,159)) {
        show_message(message56);
        return;
    }

     
    if(current_position==2||current_position==6) if(cvn70(22)) {
        show_message(message57);
        return;
    }

     
    if(check_verb70_actor_available(30)) {
        show_message(message70);
        return;
    }

     
    if(check_verb75_actor_available(30)) {
        show_message(message71);
        set_object_position0(30);
        set_object_position0(25);
        return;
    }

     
    if(cvna(56,29,29)) if(!object_is_available(27)) if(!object_is_available(31)) {
        show_message(message134);
        marker[3]= 1 ;
        marker[8]= 1 ;
        return;
    }

     
    if(vov(86,71)) if(noun1==87) if(object_is_available(31)) if(noun2==29) if(object_is_available(29)) {
        show_message(message137);
        return;
    }

     
    if(vov(86,71)) if(noun1==27) if(object_is_available(27)) if(noun2==29) if(object_is_available(29)) {
        show_message(message137);
        return;
    }

     
    if(cvna(56,29,29)) if(!object_is_available(27)) {
        show_message(message74);
        marker[3]= 1 ;
        return;
    }

     
    if(cvna(56,29,29)) if(!object_is_available(31)) {
        show_message(message75);
        marker[8]= 1 ;
        return;
    }

     
    if(cvna(56,29,29)) {
        show_message(message76);
        set_object_position(29,20);
        set_object_position(25,20);
        set_object_position0(31);
        set_object_position0(27);
        set_object_position0(41);
        jump(20);
        return;
    }

     
    if(cvna70neq(29)) {
        show_message(message72);
        return;
    }

     
    if(cvna70neq(34)) if(marker[7]== 0 ) {
        show_message(message77);
        marker[7]= 1 ;
        return;
    }

     
    if(cvna(50,34,34)) if(marker[7]== 0 ) {
        show_message(message145);
        return;
    }

     
    if(cvna70neq(34)) {
        show_message(message86);
        return;
    }

     
    if(cvna70(34,36)) {
        show_message(message89);
        return;
    }

     
    if(cvna70neq(35)) {
        show_message(message87);
        return;
    }

     
    if(check_verb70_actor_available(24)) {
        show_message(message24);
        return;
    }

     
    if(check_verb70_actor_available(25)) if(marker[7]) {
        show_message(message25);
        show_message(message85);
        return;
    }

     
    if(check_verb70_actor_available(25)) {
        show_message(message25);
        show_message(message55);
        return;
    }

     
    if(check_verb_actor(406,25)) if(object_is_available(25)) {
        show_message(message69);
        return;
    }

     
    if(check_verb75_actor_available(37)) if(marker[12]) {
        show_message(message42);
        return;
    }

     
    if(check_verb75_actor_available(37)) {
        show_message(message93);
        return;
    }

     
    if(check_verb70_actor_available(37)) {
        show_message(message94);
        return;
    }

     
    if(cvna70(32,38)) {
        show_message(message97);
        return;
    }

     
    if(cvna70neq(32)) {
        show_message(message98);
        return;
    }

     
    if(cvna(50,32,38)) {
        if(get(38)) return;
        ok();
        return;
    }

     
    if(cvna(55,32,38)) {
        if(drop(38)) return;
        ok();
        return;
    }

     
    if(current_position==13||current_position==14||current_position==9||current_position==8||current_position==16||current_position==17) if(object_is_available(38)||object_is_available(42)) if(noun1==32||noun1==42) if(noun2==53) {
        show_message(message101);
        return;
    }

     
    if(cvn70(39)) {
        show_message(message95);
        return;
    }

     
    if(vov(111,71)) if(noun1==32||noun1==39) if(object_is_available(38)) if(object_is_available(39)) {
        show_messagenlf(message96);
        show_message(message98);
        set_object_position0(38);
        set_object_positionC(32);
        return;
    }

     
    if(vov(111,71)) if(noun1==32||noun1==253) if(object_is_available(38)) if(object_is_available(253)) {
        show_messagenlf(message140);
        show_message(message98);
        set_object_position0(253);
        set_object_position0(38);
        set_object_positionC(32);
        return;
    }

     
    if(cvna70neq(27)) {
        show_message(message105);
        return;
    }

     
    if(cvna70neq(42)) {
        show_message(message139);
        return;
    }

     
    if(cvna70neq(253)) {
        show_message(message141);
        return;
    }

     
    if(cvna70neq(28)) {
        show_message(message67);
        return;
    }

     
    if(cvna70neq(41)) {
        show_message(message33);
        return;
    }

     
    if(cvna(50,28,28)) {
        show_message(message66);
        return;
    }

     
    if(check_verb75_actor_available(25)) if(marker[1]== 0 ) {
        show_message(message54);
        marker[1]= 1 ;
        return;
    }

     
    if(check_verb75_actor_available(25)) {
        show_message(message68);
        return;
    }

     
    if(check_verb75_actor_available(24)) if(marker[1]== 0 ) {
        show_message(message50);
        show_message(message51);
        show_message(message53);
        set_object_position0(24);
        marker[2]= 1 ;
        return;
    }

     
    if(check_verb75_actor_available(24)) {
        show_message(message50);
        show_message(message52);
        show_message(message53);
        set_object_position0(24);
        marker[2]= 1 ;
        return;
    }

     
    if(current_position==13||current_position==14||current_position==9||current_position==8||current_position==16||current_position==17) if(verb==( 63 ) ) {
        show_message(message112);
        return;
    }

     
    if(current_position<8) if(cvn70(159)) {
        show_message(message4);
        return;
    }

     
    if(vov(211,406)|| verb==( 67 ) ) {
        show_message(message401);
        return;
    }

     
    if(verb==( 50 ) ) if(noun1>24) if(noun1<50) {
        if(get(noun1)) return;
        ok();
        return;
    }

     
    if(verb==( 55 ) ) if(noun1>24) if(noun1<50) {
        if(drop(noun1)) return;
        ok();
        return;
    }

     
    if(verb==407) {
        show_message(message407);
        return;
    }

     
    if(cvn70(79)) {
        marker[120]= 0 ;
        return;
    }

     
    if(verb==( 210 ) ) {
        show_message(message231);
        return;
    }

     
    if(verb==( 70 ) ) {
        show_message(message996);
        return;
    }

     
    if(verb==( 15 ) ) {
        show_message(message408);
        return;
    }

     
    if(verb==( 78 ) ) {
        show_message(message122);
        return;
    }

     
    if(verb==988) {
        { _pcos_dstring( "Enter file name: " ) ; fgets(( playerInput ),(  128  ),(_impure_ptr ->_stdin) ); ; loadgame(playerInput); }  ;
        return;
    }

     
    if(verb==989) {
        { _pcos_dstring( "Enter file name: " ) ; fgets(( playerInput ),(  128  ),(_impure_ptr ->_stdin) ); ; savegame(playerInput); }  ;
        return;
    }

     
    if(verb==( 76 ) ) {
        show_message(message402);
        return;
    }

     
    if(verb==408) {
        show_message(message92);
        return;
    }

    retv= 0 ;
    return;
}
void local_cond(void)
{
    retv= 1 ;
    switch(current_position) {
    case 1:
     
    if(cvn70(10)) {
        show_message(message58);
        return;
    }

     
    if(non1(3,68)) if(verb==( 70 ) ) {
        show_message(message107);
        return;
    }

     
    if(cvn70(18)) {
        show_message(message108);
        return;
    }

     
    if(verb==( 201 ) ) {
        show_message(message400);
        return;
    }

     
    if(check_verb_noun(15,18)) {
        show_message(message400);
        return;
    }

     
    if(cvn70(51)) {
        show_message(message109);
        return;
    }

     
    if(cvn70(200)) {
        show_message(message110);
        return;
    }

     
    if(check_verb_noun(50,200)) {
        show_message(message999);
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message113);
        return;
    }

    break;
    case 2:
     
    if(non1(19,101)) if(verb==( 70 ) ) {
        show_message(message2);
        return;
    }

     
    if(cvn70(7)) {
        show_message(message3);
        return;
    }

    break;
    case 3:
     
    if(cvn70(14)) {
        show_message(message59);
        return;
    }

     
    if(verb==( 67 ) ) {
        show_message(message60);
        return;
    }

     
    if(verb==401) {
        show_message(message505);
        return;
    }

     
    if(cvn70(59)) {
        show_message(message62);
        return;
    }

     
    if(cvn70(219)) {
        show_message(message1);
        return;
    }

     
    if(object_is_available(36)||object_is_available(39)) if(noun1==32) if(noun2==59) {
        show_message(message99);
        return;
    }

     
    if(object_is_available(32)) if(noun1==32) if(noun2==14) {
        show_message(message100);
        set_object_position0(32);
        set_object_positionC(31);
        return;
    }

     
    if(non1(159,68)||noun1==7) if(verb==( 70 ) ) {
        show_message(message111);
        return;
    }

     
    if(cvn70(8)) {
        show_message(message5);
        return;
    }

    break;
    case 4:
     
    if(non1(3,68)) if(verb==( 70 ) ) {
        show_message(message116);
        return;
    }

     
    if(cvn70(51)) {
        show_message(message117);
        return;
    }

     
    if(cvn70(58)) {
        show_message(message118);
        return;
    }

     
    if(cvn70(61)) {
        show_message(message119);
        return;
    }

    break;
    case 5:
     
    if(cvn70(97)) if(marker[18]== 0 ) {
        show_message(message130);
        marker[19]= 1 ;
        return;
    }

     
    if(cvn70(97)) {
        show_message(message91);
        return;
    }

     
    if(check_verb75_actor(30)) {
        show_message(message38);
        return;
    }

     
    if(check_verb_noun(75,97)) if(marker[18]) if(marker[12]) {
        set_object_position(30,16);
        marker[12]= 0 ;
        show_message(message106);
        return;
    }

     
    if(check_verb_noun(75,97)) if(marker[12]== 0 ) {
        show_message(message401);
        return;
    }

     
    if(check_verb_noun(75,97)) {
        show_message(message130);
        marker[19]= 1 ;
        return;
    }

     
    if(cvn70(144)) if(marker[18]== 0 ) {
        show_message(message130);
        marker[19]= 1 ;
        return;
    }

     
    if(cvn70(144)) {
        show_message(message6);
        return;
    }

     
    if(non1(3,68)) if(verb==( 70 ) ) {
        show_message(message7);
        return;
    }

     
    if(cvn70(10)) {
        show_message(message8);
        return;
    }

     
    if(cvn70(159)) if(marker[18]) {
        show_message(message131);
        return;
    }

     
    if(cvn70(159)) {
        show_message(message132);
        return;
    }

     
    if(check_verb_noun(12,10)) if(marker[19]) {
        marker[16]= 1 ;
        ok();
        return;
    }

    break;
    case 6:
     
    if(vovn100_0(82)) if(marker[8]) if(marker[9]== 0 ) {
        show_message(message138);
        set_object_positionC(42);
        set_object_positionC(253);
        marker[9]= 1 ;
        return;
    }

     
    if(vovn100_0(82)) {
        show_message(message40);
        return;
    }

    break;
    case 7:
     
    if(check_verb75_actor_available(24)) {
        show_message(message120);
        { show_message(exitrestart); fgets(( playerInput ),( 128  ),(_impure_ptr ->_stdin) ); ; if(playerInput[0]=='E' || playerInput[0]=='e'){  ; exit(0); }} ;
        restart(); return;
    }

     
    if(cvn70(3)) {
        show_message(message10);
        return;
    }

     
    if(non1(228,159)) if(verb==( 70 ) ) {
        show_message(message11);
        return;
    }

     
    if(cvn70(22)) {
        show_message(message12);
        return;
    }

    break;
    case 8:
     
    if(verb==( 70 ) ) if(non1(101,60)) {
        show_message(message80);
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message81);
        return;
    }

     
    if(cvn70(57)) {
        show_message(message13);
        return;
    }

     
    if(cvn70(54)) {
        show_message(message14);
        return;
    }

    break;
    case 9:
     
    if(check_verb_noun(50,87)) if(noun2==32) if(object_is_available(32)) {
        set_object_position0(32);
        set_object_positionC(31);
        show_message(message84);
        return;
    }

     
    if(cvna(86,32,32)) {
        set_object_position0(32);
        set_object_positionC(31);
        show_message(message84);
        return;
    }

     
    if(cvna(86,42,42)) {
        show_message(message142);
        return;
    }

     
    if(cvn70(5)) {
        show_message(message17);
        return;
    }

    break;
    case 10:
     
    if(verb==( 143 ) ) {
        show_message(message19);
        return;
    }

     
    if(vovn100_0(81)) {
        show_message(message125);
        return;
    }

     
    if(check_verb_noun(56,99)) {
        show_message(message125);
        return;
    }

     
    if(cvn70(98)) {
        show_message(message20);
        return;
    }

     
    if(cvn70(99)) {
        show_message(message21);
        return;
    }

    break;
    case 11:
     
    if(verb==( 56 ) ) if(noun1==98||noun2==98) {
        jump(18);
        return;
    }

     
    if(check_verb_noun(56,381)) if(marker[15]== 0 ) {
        show_message(message127);
        marker[15]= 1 ;
        return;
    }

     
    if(check_verb_noun(56,380)) {
        show_message(message143);
        return;
    }

     
    if(check_verb_noun(70,380)) {
        show_message(message144);
        return;
    }

     
    if(check_verb_noun(56,381)) {
        show_message(message128);
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message126);
        return;
    }

     
    if(cvn70(98)) {
        show_message(message22);
        return;
    }

     
    if(verb==( 70 ) ) if(noun1==17) if(noun2==98) {
        show_message(message124);
        return;
    }

     
    if(check_verb_noun(70,381)) {
        show_message(message135);
        return;
    }

    break;
    case 12:
     
    if(check_verb_noun(56,98)) {
        jump(19);
        return;
    }

     
    if(cvn70(98)) {
        show_message(message129);
        return;
    }

    break;
    case 13:
     
    if(cvn70(2)) {
        show_message(message104);
        return;
    }

     
    if(check_verb_noun(50,2)) {
        show_message(message39);
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message115);
        return;
    }

     
    if(cvn70(90)) if(marker[11]== 0 ) {
        show_message(message34);
        bring_object_here(38);
        marker[11]= 1 ;
        return;
    }

     
    if(cvn70(90)) {
        show_message(message35);
        return;
    }

     
    if(check_verb_noun(50,32)) if(noun2==41) if(marker[14]== 0 ) {
        if(get(38)) return;
        show_message(message37);
        marker[14]= 1 ;
        return;
    }

     
    if(check_verb_noun(50,32)) if(marker[14]== 0 ) {
        show_message(message36);
        return;
    }

    break;
    case 14:
     
    if(vovn(70,56,6)) {
        show_message(message28);
        return;
    }

     
    if(cvn70(20)) {
        show_message(message29);
        return;
    }

    break;
    case 15:
     
    if(cvn70(68)) {
        show_message(message30);
        return;
    }

     
    if(cvn70(40)) {
        show_message(message102);
        return;
    }

    break;
    case 16:
     
    if(cvn70(4)) {
        show_message(message41);
        return;
    }

     
    if(check_verb75_actor_available(30)) if(marker[4]== 0 ) {
        show_message(message78);
        marker[4]= 1 ;
        return;
    }

     
    if(check_verb75_actor_available(30)) {
        show_message(message66);
        return;
    }

     
    if(cvn70(60)) {
        show_message(message15);
        return;
    }

     
    if(cvn70(89)) if(marker[13]== 0 ) {
        show_message(message31);
        bring_object_here(41);
        marker[13]= 1 ;
        return;
    }

     
    if(cvn70(89)) {
        show_message(message32);
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message15);
        return;
    }

     
    if(vovn100_0(82)) {
        show_message(message123);
        return;
    }

    break;
    case 17:
     
    if(verb==( 143 ) ) {
        show_message(message9);
        return;
    }

     
    if(cvn70(103)) {
        show_message(message16);
        return;
    }

     
    if(check_verb75_actor_available(30)) {
        show_message(message66);
        return;
    }

    break;
    case 18:
     
    if(cvn70(51)) {
        show_message(message27);
        return;
    }

     
    if(cvn70(27)) {
        show_message(message26);
        return;
    }

     
    if(cvn70(17)) {
        show_message(message23);
        return;
    }

     
    if(check_verb70_actor(26)) {
        show_message(message63);
        return;
    }

     
    if(check_verb75_actor(26)) if(marker[3]== 0 ) {
        show_message(message66);
        return;
    }

     
    if(check_verb75_actor(26)) if(marker[4]== 0 ) {
        show_message(message64);
        show_message(message65);
        marker[12]= 1 ;
        return;
    }

     
    if(check_verb75_actor(26)) {
        show_message(message64);
        show_message(message79);
        set_object_positionC(27);
        marker[3]= 0 ;
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message114);
        return;
    }

     
    if(verb==( 76 ) ) {
        move(3);
        return;
    }

    break;
    case 19:
     
    if(cvn70(33)) {
        show_message(message83);
        marker[6]= 1 ;
        return;
    }

     
    if(cvn70(69)) {
        show_message(message18);
        return;
    }

     
    if(verb==( 76 ) ) {
        move(3);
        return;
    }

    break;
    case 20:
     
    if(cvna(71,34,36)) {
        show_message(message90);
        set_object_position(37,7);
        set_object_position(24,7);
        set_object_position(30,17);
        jump(9);
        return;
    }

     
    if(check_verb_noun(56,29)) {
        show_message(message43);
        return;
    }

    break;
    case 21:
     
    if(vovn(71,55,34)) if(marker[7]) {
        show_message(message88);
        marker[10]= 1 ;
        set_object_position0(34);
        set_object_positionC(36);
        return;
    }

    break;
    case 22:
     
    if(check_verb_noun(12,10)) if(marker[19]) {
        marker[17]= 1 ;
        ok();
        return;
    }

     
    if(cvn70(10)) {
        show_message(message8);
        return;
    }

    }
    retv= 0 ;    return;
}

void game_cycle(void)
{
    unsigned char k;
    boolean ve,pa;
    while(1){
        current_position=next_position;
        if(marker[120]== 0 ) {
            printnewline();
             ;
            cr=&world[search_room(current_position)];
            show_messagenlf(cr->short_d);
            printspace();
             ;
             ;
            printspace();
            show_message(cr->long_d);
            printnewline();
            marker[120]= 1 ;
            ve= 0 ;
            for(k=0;k< 20 ;++k)
                if(obj[k].position==current_position) {
                    if(ve== 0 ) {
                        show_message(message1031);
                        ve= 1 ;
                         ;
                    }
                    show_message(obj[k].desc);
                }
             ;
            if(marker[124]) {
                pa= 0 ;
                for(k=0; k< 6 ; ++k)
                    if(cr->directions[k]) {
                        if(pa== 0 ) {
                            show_messagenlf(message1020);
                            pa= 1 ;
                        }
                     ;
                    show_messagenlf(dir[k]);
                    printspace();
                }
                 ;
                printnewline();
            }
        }
        ++counter[125];
        --counter[126];
        --counter[127];
        --counter[128];
        hi_cond();
        if(retv) continue;
        printnewline();
        if(ls==0 && counter[125]<5) show_message(message1012);
        interrogationAndAnalysis();
        local_cond();
        if(retv) continue;
        low_cond();
        if(retv) continue;
        show_message(verb==( 0 ) ?message1009:message1010);
    }
}

int main(void)
{
    restart();
    {showsplash();} ;
     ;
    show_message(header);
     ;
    wait_key(); ;
    game_cycle();
    return 0;
}






boolean vov(unsigned int v1, unsigned int v2)
{
    return verb==v1||verb==v2;
}
boolean vovn(unsigned int v1, unsigned int v2, unsigned int n)
{
    return vov(v1,v2)&&noun1==n;
}
boolean vovn100_0(unsigned char  n)  
{
    return vovn(100,0,n);
}
boolean non1(unsigned int n1, unsigned int n2)
{
    return noun1==n1||noun1==n2;
}
void ok(void)
{
        show_message(message1000);
}
boolean check_verb_noun(unsigned int v, unsigned int n)
{
    return verb==v&&noun1==n;
}
boolean cvn70(unsigned char  n)  
{
    return check_verb_noun(70,n);
}
boolean check_verb_actor(unsigned int v, unsigned char  n)
{
    return verb==v&&actor==n;
}
boolean check_verb75_actor(unsigned char  n)  
{
    return check_verb_actor(75,n);
}
boolean check_verb70_actor(unsigned char  n)  
{
    return check_verb_actor(70,n);
}
boolean check_verb70_actor_available(unsigned char  n)  
{
    return check_verb_actor(70,n)&&object_is_available(n);
}
boolean check_verb75_actor_available(unsigned char  n)  
{
    return check_verb_actor(75,n)&&object_is_available(n);
}
boolean cvna(unsigned int v, unsigned int n, unsigned int o)
{
    dummy= search_object_p( o )->position ;
    return check_verb_noun(v,n)&&(dummy==current_position||dummy== 1500 );
}
boolean cvna70(unsigned char  n, unsigned char  o)
{
   return cvna(70,n,o);
}
boolean cvna70neq(unsigned char  n)  
{
   return cvna70(n,n);
}
