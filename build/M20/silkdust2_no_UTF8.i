# 1 "silkdust2_no_UTF8.c"
 

# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 1 3
 








# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 1 3
 

 











# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/newlib.h" 1 3
 




 
 

 


 


 
 

 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



# 15 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 2 3

# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/config.h" 1 3



# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/ieeefp.h" 1 3



 






















































































# 100 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/ieeefp.h" 3














































 






































# 193 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/ieeefp.h" 3






































































# 4 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/config.h" 2 3


 







 














































# 76 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/config.h" 3















 









# 111 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/config.h" 3


 
























 




























 













# 16 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 2 3


 
 































# 68 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 3


 







 

# 90 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/_ansi.h" 3






# 10 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3




# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 


# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

 


































typedef long unsigned int  size_t;






















 




 





























 


























typedef short int wchar_t;

















# 283 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 





















# 14 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3


# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 1 3
 

 










# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/_types.h" 1 3
 

 








typedef long _off_t;
__extension__ typedef long long _off64_t;




typedef long _ssize_t;



# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 


# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

 

# 190 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 




 

# 271 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3









typedef unsigned int  wint_t;




 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 





















# 22 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/_types.h" 2 3


 
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;		 
} _mbstate_t;

typedef int _flock_t;

 
typedef void *_iconv_t;


# 14 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 2 3





typedef unsigned long  __ULong;















 




struct _Bigint 
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};

 
struct __tm
{
  int   __tm_sec;
  int   __tm_min;
  int   __tm_hour;
  int   __tm_mday;
  int   __tm_mon;
  int   __tm_year;
  int   __tm_wday;
  int   __tm_yday;
  int   __tm_isdst;
};

 





struct _on_exit_args {
	void *  _fnargs[32 ];	         
	__ULong _fntypes;           	         

};








struct _atexit {
	struct	_atexit *_next;			 
	int	_ind;				 
	void	(*_fns[32 ])(void);	 
        struct _on_exit_args _on_exit_args;
};


 






struct __sbuf {
	unsigned char *_base;
	int	_size;
};

 




typedef long _fpos_t;		 
				 





 
























# 156 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 3




struct __sFILE {
  unsigned char *_p;	 
  int	_r;		 
  int	_w;		 
  short	_flags;		 
  short	_file;		 
  struct __sbuf _bf;	 
  int	_lbfsize;	 





   
  void * 	_cookie;	 

  int   (*_read)   (void *  _cookie, char *_buf, int _n)  ;
  int   (*_write)   (void *  _cookie, const char *_buf,
					    int _n)  ;
  _fpos_t  (*_seek)   (void *  _cookie, _fpos_t _offset, int _whence)  ;
  int	 (*_close)   (void *  _cookie)  ;

   
  struct __sbuf _ub;	 
  unsigned char *_up;	 
  int	_ur;		 

   
  unsigned char _ubuf[3];	 
  unsigned char _nbuf[1];	 

   
  struct __sbuf _lb;	 

   
  int	_blksize;	 
  int	_offset;	 


  struct _reent *_data;	 



  _flock_t _lock;	 

};

# 252 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 3

typedef struct __sFILE   __FILE;


struct _glue 
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};

 




















struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};

 




 







# 531 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 3


struct _reent
{
  int _errno;			 

   


  __FILE *_stdin, *_stdout, *_stderr;

  int  _inc;			 
  char _emergency[25 ];
 
  int _current_category;	 
  const  char *_current_locale;

  int __sdidinit;		 

  void  (*__cleanup)   (struct _reent *)  ;

   
  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;

   
  int _cvtlen;			 
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26 ];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24 ];
          int _getdate_err;  
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
        } _reent;
   

 
      struct
        {

          unsigned char * _nextf[30 ];
          unsigned int _nmalloc[30 ];
        } _unused;
    } _new;

   
  struct _atexit *_atexit;	 
  struct _atexit _atexit0;	 

   
  void (**(_sig_func))(int);

   


  struct _glue __sglue;		 
  __FILE __sf[3];  		 
};










# 683 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/reent.h" 3






































 








extern struct _reent *_impure_ptr  ;

void _reclaim_reent  (struct _reent *)  ;

 


















# 16 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3

# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/stdlib.h" 1 3



 




# 17 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3


# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/alloca.h" 1 3
 

 
 















# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 2 3



 

typedef struct 
{
  int quot;  
  int rem;  
} div_t;

typedef struct 
{
  long quot;  
  long rem;  
} ldiv_t;


typedef struct
{
  long long int quot;  
  long long int rem;  
} lldiv_t;











extern   int __mb_cur_max;



void 	 abort   (void ) __attribute__ ( (noreturn) )   ;
int	 abs   (int)  ;
int	 atexit   (void  (*__func)(void ))  ;
double	 atof   (const char *__nptr)  ;

float	 atoff   (const char *__nptr)  ;

int	 atoi   (const char *__nptr)  ;
int	 _atoi_r   (struct _reent *, const char *__nptr)  ;
long	 atol   (const char *__nptr)  ;
long	 _atol_r   (struct _reent *, const char *__nptr)  ;
void * 	 bsearch   (const void *  __key,
		       const void *  __base,
		       size_t __nmemb,
		       size_t __size,
		       int (*  _compar )  (const void * , const void * )  )  ;
void * 	 calloc   (size_t __nmemb, size_t __size)  ;
div_t	 div   (int __numer, int __denom)  ;
void 	 exit   (int __status) __attribute__ ( (noreturn) )   ;
void 	 free   (void * )  ;
char *   getenv   (const char *__string)  ;
char *	 _getenv_r   (struct _reent *, const char *__string)  ;



char *	 _findenv   (const  char *, int *)  ;
char *	 _findenv_r   (struct _reent *, const  char *, int *)  ;
long	 labs   (long)  ;
ldiv_t	 ldiv   (long __numer, long __denom)  ;
void * 	 malloc   (size_t __size)  ;
int	 mblen   (const char *, size_t)  ;
int	 _mblen_r   (struct _reent *, const char *, size_t, _mbstate_t *)  ;
int	 mbtowc   (wchar_t *, const char *, size_t)  ;
int	 _mbtowc_r   (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *)  ;
int	 wctomb   (char *, wchar_t)  ;
int	 _wctomb_r   (struct _reent *, char *, wchar_t, _mbstate_t *)  ;
size_t	 mbstowcs   (wchar_t *, const char *, size_t)  ;
size_t	 _mbstowcs_r   (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *)  ;
size_t	 wcstombs   (char *, const wchar_t *, size_t)  ;
size_t	 _wcstombs_r   (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *)  ;


int      mkstemp   (char *)  ;
char *   mktemp   (char *)  ;


void 	 qsort   (void *  __base, size_t __nmemb, size_t __size, int(*_compar)(const void * , const void * ))  ;
int	 rand   (void )  ;
void * 	 realloc   (void *  __r, size_t __size)  ;



void 	 srand   (unsigned __seed)  ;
double	 strtod   (const char *__n, char **__end_PTR)  ;
double	 _strtod_r   (struct _reent *,const char *__n, char **__end_PTR)  ;
float	 strtof   (const char *__n, char **__end_PTR)  ;

 




long	 strtol   (const char *__n, char **__end_PTR, int __base)  ;
long	 _strtol_r   (struct _reent *,const char *__n, char **__end_PTR, int __base)  ;
unsigned long  strtoul   (const char *__n, char **__end_PTR, int __base)  ;
unsigned long  _strtoul_r   (struct _reent *,const char *__n, char **__end_PTR, int __base)  ;

int	 system   (const char *__string)  ;


long     a64l   (const char *__input)  ;
char *   l64a   (long __input)  ;
char *   _l64a_r   (struct _reent *,long __input)  ;
int	 on_exit   (void  (*__func)(int, void * ),void *  __arg)  ;
void 	 _Exit   (int __status) __attribute__ ( (noreturn) )   ;
int	 putenv   (const char *__string)  ;
int	 _putenv_r   (struct _reent *, const char *__string)  ;
int	 setenv   (const char *__string, const char *__value, int __overwrite)  ;
int	 _setenv_r   (struct _reent *, const char *__string, const char *__value, int __overwrite)  ;

char *	 gcvt   (double,int,char *)  ;
char *	 gcvtf   (float,int,char *)  ;
char *	 fcvt   (double,int,int *,int *)  ;
char *	 fcvtf   (float,int,int *,int *)  ;
char *	 ecvt   (double,int,int *,int *)  ;
char *	 ecvtbuf   (double, int, int*, int*, char *)  ;
char *	 fcvtbuf   (double, int, int*, int*, char *)  ;
char *	 ecvtf   (float,int,int *,int *)  ;
char *	 dtoa   (double, int, int, int *, int*, char**)  ;
int	 rand_r   (unsigned *__seed)  ;

double  drand48   (void )  ;
double  _drand48_r   (struct _reent *)  ;
double  erand48   (unsigned short [3])  ;
double  _erand48_r   (struct _reent *, unsigned short [3])  ;
long    jrand48   (unsigned short [3])  ;
long    _jrand48_r   (struct _reent *, unsigned short [3])  ;
void    lcong48   (unsigned short [7])  ;
void    _lcong48_r   (struct _reent *, unsigned short [7])  ;
long    lrand48   (void )  ;
long    _lrand48_r   (struct _reent *)  ;
long    mrand48   (void )  ;
long    _mrand48_r   (struct _reent *)  ;
long    nrand48   (unsigned short [3])  ;
long    _nrand48_r   (struct _reent *, unsigned short [3])  ;
unsigned short *
        seed48   (unsigned short [3])  ;
unsigned short *
        _seed48_r   (struct _reent *, unsigned short [3])  ;
void    srand48   (long)  ;
void    _srand48_r   (struct _reent *, long)  ;
long long  atoll   (const char *__nptr)  ;
long long  _atoll_r   (struct _reent *, const char *__nptr)  ;
long long  llabs   (long long)  ;
lldiv_t	 lldiv   (long long __numer, long long __denom)  ;
long long  strtoll   (const char *__n, char **__end_PTR, int __base)  ;
long long  _strtoll_r   (struct _reent *, const char *__n, char **__end_PTR, int __base)  ;
unsigned long long  strtoull   (const char *__n, char **__end_PTR, int __base)  ;
unsigned long long  _strtoull_r   (struct _reent *, const char *__n, char **__end_PTR, int __base)  ;


void 	 cfree   (void * )  ;
# 188 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 3




char *	 _dtoa_r   (struct _reent *, double, int, int, int *, int*, char**)  ;

void * 	 _malloc_r   (struct _reent *, size_t)  ;
void * 	 _calloc_r   (struct _reent *, size_t, size_t)  ;
void 	 _free_r   (struct _reent *, void * )  ;
void * 	 _realloc_r   (struct _reent *, void * , size_t)  ;
void 	 _mstats_r   (struct _reent *, char *)  ;

int	 _system_r   (struct _reent *, const char *)  ;

void 	 __eprintf   (const char *, const char *, unsigned int, const char *)  ;

# 231 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdlib.h" 3


 


# 3 "silkdust2_no_UTF8.c" 2

# 1 "config2.h" 1
 

















# 4 "silkdust2_no_UTF8.c" 2


# 1 "aws.h" 1



typedef unsigned char boolean;



typedef unsigned char word_type;








typedef struct info_d {
    char *version;
    unsigned int textcolor;
    unsigned int backcolor;
    unsigned int textcolordark;
    unsigned int backcolordark;
    char *name;
    char *author;
    char *date;
    char *description;
    unsigned int code;
    char *fontname;
    unsigned int charsize;
    unsigned int fontstyle;
    unsigned int startroom;
    boolean graphical;
    unsigned int maxcarryingw;
    unsigned int maxcarryings;
} info;

typedef struct word_d {

    char c1,c2,c3;



    unsigned int code;
    word_type t;
} word;




    typedef unsigned char room_code;


typedef struct room_d {
    room_code code;
    const char *long_d;
    


    const char *short_d;

    





        
         
        room_code directions[6 ];
    
} room;

typedef struct message_d {
    unsigned int code;
    char *txt;
} message;




    typedef unsigned char obj_code;




        
typedef struct object_d {
    obj_code code;
    


    const char *desc;
    



    unsigned int position;       
    unsigned char attributes;
} object;

typedef struct tree_d {
    unsigned char c;
    unsigned char son0idx;
    unsigned char son1idx;
} tree;

void restart(void);










# 6 "silkdust2_no_UTF8.c" 2


# 1 "inout.h" 1


# 1 "systemd.h" 1



 
























# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 1 3
 















 
# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/time.h" 1 3


















# 18 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 2 3









# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 


# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 

# 131 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

 


# 188 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3





 




 

# 271 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


# 283 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 





















# 27 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 2 3


# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 1 3
 






















typedef short int __int16_t;
typedef unsigned short int __uint16_t;


typedef long int __int32_t;
typedef unsigned long int __uint32_t;









__extension__ typedef long long __int64_t;
__extension__ typedef unsigned long long __uint64_t;














# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 







 

 




 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 





















typedef long int  ptrdiff_t;









 




 

 


# 188 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3





 




 


# 269 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3
















 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 













 







# 55 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 2 3

# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/types.h" 1 3



 





# 28 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/machine/types.h" 3








typedef long int __off_t;
typedef int __pid_t;

__extension__ typedef long long int __loff_t;








# 56 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 2 3


 


















 
typedef	unsigned char	u_char;
typedef	unsigned short	u_short;
typedef	unsigned int	u_int;
typedef	unsigned long	u_long;



typedef	unsigned short	ushort;		 
typedef	unsigned int	uint;		 



typedef unsigned long  clock_t;




typedef long  time_t;


 

struct timespec {
  time_t  tv_sec;    
  long    tv_nsec;   
};

struct itimerspec {
  struct timespec  it_interval;   
  struct timespec  it_value;      
};


typedef	long	daddr_t;
typedef	char *	caddr_t;








typedef	unsigned short	ino_t;




# 146 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 3


 











typedef	short	dev_t;




typedef long		off_t;

typedef	unsigned short	uid_t;
typedef	unsigned short	gid_t;


typedef int pid_t;

typedef	long key_t;

typedef _ssize_t ssize_t;













typedef unsigned int mode_t __attribute__ ((__mode__ (__SI__))) ;




typedef unsigned short nlink_t;

 









 









typedef	long	fd_mask;





 

typedef	struct _types_fd_set {
	fd_mask	fds_bits[((( 64  )+((  (sizeof (fd_mask) * 8 )  )-1))/(  (sizeof (fd_mask) * 8 )  )) ];
} _types_fd_set;


















 



# 374 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/types.h" 3







# 29 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 2 3


 

struct tm
{
  int	tm_sec;
  int	tm_min;
  int	tm_hour;
  int	tm_mday;
  int	tm_mon;
  int	tm_year;
  int	tm_wday;
  int	tm_yday;
  int	tm_isdst;
};

clock_t	    clock       (void)  ;
double	    difftime    (time_t _time2, time_t _time1)  ;
time_t	    mktime      (struct tm *_timeptr)  ;
time_t	    time        (time_t *_timer)  ;

char	  *  asctime     (const struct tm *_tblock)  ;
char	  *  ctime       (const time_t *_time)  ;
struct tm *  gmtime      (const time_t *_timer)  ;
struct tm *  localtime   (const time_t *_timer)  ;

size_t	    strftime    (char *_s, size_t _maxsize, const char *_fmt, const struct tm *_t)  ;

char	  *  asctime_r   	(const struct tm *, char *)  ;
char	  *  ctime_r   	(const time_t *, char *)  ;
struct tm *  gmtime_r   	(const time_t *, struct tm *)  ;
struct tm *  localtime_r   	(const time_t *, struct tm *)  ;

 






char      *  strptime        (const char *, const char *, struct tm *)  ;
void        tzset   	(void )  ;
void        _tzset_r   	(struct _reent *)  ;

 

# 95 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3


 
extern   time_t _timezone;
extern   int _daylight;
extern   char *_tzname[2];

 




 
# 119 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3







# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/features.h" 1 3
 


























 

# 72 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/features.h" 3








# 90 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/features.h" 3






# 126 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 2 3


# 166 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3

# 175 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3







 

 




 


                            
                            

                            
                            

 



 




 

# 217 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3


# 227 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/time.h" 3

























# 29 "systemd.h" 2


 












    
    

# 621 "systemd.h"


    
# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 1 3
 


















 













# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 1 3






 


# 19 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3



 


 





 


# 61 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 





 


















 





 

 


# 126 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3


 




 

 


# 188 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3





 




 


# 269 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3
















 

# 315 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stddef.h" 3




 













 







# 34 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 2 3



# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stdarg.h" 1 3
 













































 



 
















 






typedef void *__gnuc_va_list;



 

# 121 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stdarg.h" 3







 

 












# 210 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/include/stdarg.h" 3




# 37 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 2 3


 








 

typedef __FILE FILE;








typedef _fpos_t fpos_t;





# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/stdio.h" 1 3



 










# 65 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 2 3






	 


















 








































































 









FILE *	 tmpfile    (void)  ;
char *	 tmpnam    (char *)  ;
int	 fclose    (FILE *)  ;
int	 fflush    (FILE *)  ;
FILE *	 freopen    (const char *, const char *, FILE *)  ;
void	 setbuf    (FILE *, char *)  ;
int	 setvbuf    (FILE *, char *, int, size_t)  ;
int	 fprintf    (FILE *, const char *, ...)  ;
int	 fscanf    (FILE *, const char *, ...)  ;
int	 printf    (const char *, ...)  ;
int	 scanf    (const char *, ...)  ;
int	 sscanf    (const char *, const char *, ...)  ;
int	 vfprintf    (FILE *, const char *, __gnuc_va_list )  ;
int	 vprintf    (const char *, __gnuc_va_list )  ;
int	 vsprintf    (char *, const char *, __gnuc_va_list )  ;
int	 fgetc    (FILE *)  ;
char *   fgets    (char *, int, FILE *)  ;
int	 fputc    (int, FILE *)  ;
int	 fputs    (const char *, FILE *)  ;
int	 getc    (FILE *)  ;
int	 getchar    (void)  ;
char *   gets    (char *)  ;
int	 putc    (int, FILE *)  ;
int	 putchar    (int)  ;
int	 puts    (const char *)  ;
int	 ungetc    (int, FILE *)  ;
size_t	 fread    (void * , size_t _size, size_t _n, FILE *)  ;
size_t	 fwrite    (const void *  , size_t _size, size_t _n, FILE *)  ;



int	 fgetpos    (FILE *, fpos_t *)  ;

int	 fseek    (FILE *, long, int)  ;



int	 fsetpos    (FILE *, const fpos_t *)  ;

long	 ftell    ( FILE *)  ;
void	 rewind    (FILE *)  ;
void	 clearerr    (FILE *)  ;
int	 feof    (FILE *)  ;
int	 ferror    (FILE *)  ;
void     perror    (const char *)  ;

FILE *	 fopen    (const char *_name, const char *_type)  ;
int	 sprintf    (char *, const char *, ...)  ;
int	 remove    (const char *)  ;
int	 rename    (const char *, const char *)  ;


int	 asprintf    (char **, const char *, ...)  ;




int	 fseeko    (FILE *, off_t, int)  ;
off_t	 ftello    ( FILE *)  ;

int	 vfiprintf    (FILE *, const char *, __gnuc_va_list )  ;
int	 iprintf    (const char *, ...)  ;
int	 fiprintf    (FILE *, const char *, ...)  ;
int	 siprintf    (char *, const char *, ...)  ;
char *	 tempnam    (const char *, const char *)  ;
int	 vasprintf    (char **, const char *, __gnuc_va_list )  ;
int	 vsnprintf    (char *, size_t, const char *, __gnuc_va_list )  ;
int	 vfscanf    (FILE *, const char *, __gnuc_va_list )  ;
int	 vscanf    (const char *, __gnuc_va_list )  ;
int	 vsscanf    (const char *, const char *, __gnuc_va_list )  ;

int	 fcloseall    (void )  ;
int	 snprintf    (char *, size_t, const char *, ...)  ;



 





FILE *	 fdopen    (int, const char *)  ;

int	 fileno    (FILE *)  ;
int	 getw    (FILE *)  ;
int	 pclose    (FILE *)  ;
FILE *   popen    (const char *, const char *)  ;
int	 putw    (int, FILE *)  ;
void     setbuffer    (FILE *, char *, int)  ;
int	 setlinebuf    (FILE *)  ;
int	 getc_unlocked    (FILE *)  ;
int	 getchar_unlocked    (void)  ;
void	 flockfile    (FILE *)  ;
int	 ftrylockfile    (FILE *)  ;
void	 funlockfile    (FILE *)  ;
int	 putc_unlocked    (int, FILE *)  ;
int	 putchar_unlocked    (int)  ;


 



int	 _asprintf_r    (struct _reent *, char **, const char *, ...)  ;
int	 _fcloseall_r    (struct _reent *)  ;
FILE *	 _fdopen_r    (struct _reent *, int, const char *)  ;
FILE *	 _fopen_r    (struct _reent *, const char *, const char *)  ;
int	 _fscanf_r    (struct _reent *, FILE *, const char *, ...)  ;
int	 _getchar_r    (struct _reent *)  ;
char *	 _gets_r    (struct _reent *, char *)  ;
int	 _iprintf_r    (struct _reent *, const char *, ...)  ;
int	 _mkstemp_r    (struct _reent *, char *)  ;
char *	 _mktemp_r    (struct _reent *, char *)  ;
void	 _perror_r    (struct _reent *, const char *)  ;
int	 _printf_r    (struct _reent *, const char *, ...)  ;
int	 _putchar_r    (struct _reent *, int)  ;
int	 _puts_r    (struct _reent *, const char *)  ;
int	 _remove_r    (struct _reent *, const char *)  ;
int	 _rename_r    (struct _reent *,
			   const char *_old, const char *_new)  ;
int	 _scanf_r    (struct _reent *, const char *, ...)  ;
int	 _sprintf_r    (struct _reent *, char *, const char *, ...)  ;
int	 _snprintf_r    (struct _reent *, char *, size_t, const char *, ...)  ;
int	 _sscanf_r    (struct _reent *, const char *, const char *, ...)  ;
char *	 _tempnam_r    (struct _reent *, const char *, const char *)  ;
FILE *	 _tmpfile_r    (struct _reent *)  ;
char *	 _tmpnam_r    (struct _reent *, char *)  ;
int	 _vasprintf_r    (struct _reent *, char **, const char *, __gnuc_va_list )  ;
int	 _vfprintf_r    (struct _reent *, FILE *, const char *, __gnuc_va_list )  ;
int	 _vprintf_r    (struct _reent *, const char *, __gnuc_va_list )  ;
int	 _vsprintf_r    (struct _reent *, char *, const char *, __gnuc_va_list )  ;
int	 _vsnprintf_r    (struct _reent *, char *, size_t, const char *, __gnuc_va_list )  ;
int	 _vfscanf_r    (struct _reent *, FILE *, const char *, __gnuc_va_list )  ;
int	 _vscanf_r    (struct _reent *, const char *, __gnuc_va_list )  ;
int	 _vsscanf_r    (struct _reent *, const char *, const char *, __gnuc_va_list )  ;

ssize_t  __getdelim    (char **, size_t *, int, FILE *)  ;
ssize_t  __getline    (char **, size_t *, FILE *)  ;

# 331 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 3

 
 



int	 __srget    (FILE *)  ;
int	 __swbuf    (int, FILE *)  ;

 




FILE	*  funopen   (const void *  _cookie,
		int (*readfn)(void *  _cookie, char *_buf, int _n),
		int (*writefn)(void *  _cookie, const char *_buf, int _n),
		fpos_t (*seekfn)(void *  _cookie, fpos_t _off, int _whence),
		int (*closefn)(void *  _cookie))  ;





 





# 387 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 3




# 400 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 3

 










# 432 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/stdio.h" 3





























 









 


# 623 "systemd.h" 2

    
# 1 "/opt/z8kgcc-jan-19-2009/lib/gcc-lib/z8k-pcos/2.9-ecosSWtools-990319-m20z8k-3/../../../../z8k-pcos/include/sys/pcos.h" 1 3
 







 








































 









 


























extern unsigned short _pcos_extent_length;

 
extern int errno_from_pcos_err(int pcos_err);

extern void __inline__ _pcos_print(char *str)
{
     





    asm("pushl   @rr14,rr12 \n\t"
        "ldl     rr12,%S0   \n\t"
        "push    @rr14,r5   \n\t"   
        "sc      #89        \n\t"
        "pop     r5,@rr14   \n\t"
        "popl    rr12,@rr14 \n\t" : : "r" (str)  );
}

 
struct pcostime {
    int ticks;   
    int seconds;
    int minutes;
    int hours;
    int day;
    int month;
    int year;
};

typedef unsigned char cursor_shape[12];

 












 
extern int _pcos_dgetlen(int did, unsigned long *length);
extern int _pcos_dgetposition(int did, unsigned long *length);
extern int _pcos_dseek(int did, unsigned long offset);
extern int _pcos_resetbyte(int did);
extern int _pcos_eof(int did, unsigned int *status);
extern int _pcos_putbyte(int did, unsigned char byte);
extern int _pcos_getbyte(int did, unsigned char *byte);
extern int _pcos_writebytes(int did, const void *buffer,
                            unsigned int nbytes, unsigned int *retbytes);
extern int _pcos_readbytes(int did, const void *buffer,
                           unsigned int nbytes, unsigned int *retbytes);
extern int _pcos_readline(int did, const void *buffer,
                          unsigned int nbytes, unsigned int *retbytes);
extern int _pcos_new(unsigned short length, void **memory);
extern int _pcos_newsamesegment(unsigned short length, void **memory);
extern int _pcos_dispose(int length, void **memory);
extern int _pcos_drename(const char *from, int fromlen, const char *to, int tolen);
extern int _pcos_dremove(const char *name, int namelen);
extern int _pcos_openfile(int did, const char *name, int namelen, int mode,
                          int extent_len);
extern int _pcos_close(int did);
extern int _pcos_ddirectory(const char *name, int namelen);
extern int _pcos_maxsize(unsigned short *maxsize);
extern int _pcos_search(int drive, int search_mode, int *length, char **file_pointer,
                        char *name_pointer);
extern void _pcos_selectcur(int mode);
extern void _pcos_cls(void);
extern int _pcos_crlf(void);
extern void _pcos_grfinit(int *color, void **pointer);
extern int _pcos_cleartext(unsigned int column, unsigned int row,
                           unsigned int xlen, unsigned int ylen);
extern int _pcos_scrolltext(unsigned int plane_mask, unsigned int function,
                            unsigned int src_x, unsigned int src_y,
                            unsigned int dst_x, unsigned int dst_y,
                            unsigned int xlen, unsigned int ylen);
extern int _pcos_bset(void *dest, unsigned char val, unsigned int len);
extern int _pcos_bwset(void *dest, unsigned short val, unsigned int len);
extern int _pcos_bclear(void *dest, unsigned int len);
extern int _pcos_bmove(void *dest, const void *src, unsigned int len);
extern int _pcos_dstring(char *string);
extern int _pcos_dhex(unsigned int word);
extern int _pcos_dhexbyte(unsigned char byte);
extern int _pcos_dhexlong(unsigned long byte);
extern int _pcos_dlong(unsigned long byte);
extern int _pcos_dnumw(unsigned int word, unsigned int field_width);
extern int _pcos_gettime(char *buf, unsigned int buflen);
extern int _pcos_getdate(char *buf, unsigned int buflen);
extern int _pcos_settime(char *buf, unsigned int buflen);
extern int _pcos_setdate(char *buf, unsigned int buflen);
extern int _pcos_lookbyte(int did, unsigned char *byte, unsigned char *buffer_status);
extern int _pcos_chgwindow(unsigned int fgcolor, unsigned int bgcolor);
extern int _pcos_readcur0(cursor_shape *shape, unsigned int *blinkrate,
                          unsigned int *column, unsigned int *row);
extern int _pcos_readcur1(cursor_shape *shape, unsigned int *blinkrate,
                          unsigned int *x_pos, unsigned int *y_pos);
extern int _pcos_chgcur0(unsigned int column, unsigned int row);
extern int _pcos_chgcur1(unsigned int x_pos, unsigned int y_pos);
extern void _pcos_chgcur2(unsigned int blinkrate);
extern void _pcos_chgcur3(unsigned int blinkrate);
extern void _pcos_chgcur4(cursor_shape new_shape);
extern void _pcos_chgcur5(cursor_shape new_shape);
extern int _pcos_setcontrolbyte(int did, unsigned int word_number, unsigned int word);
extern int _pcos_getstatusbyte(int did, unsigned int word_number, unsigned int *word);
extern int _pcos_checkvolume(void);

 
extern void _get_pcostime(struct pcostime *cur_time);



 
 
 
 
# 624 "systemd.h" 2


    
    
    

    
    
    
    void m20_putc(char c);
    void wait_key(void);

    
    
    

    

     
    

    
    
    
    
    
    

    
    
    

    
# 1 "m20sp.h" 1


void showsplash(void);


# 656 "systemd.h" 2

    





    

# 1185 "systemd.h"



    







    



    









    











    



# 3 "inout.h" 2

# 1 "loadsave.h" 1



void savegame(char *filename)  ;
void loadgame(char *filename)  ;
char *i2s(char *s, int v);



# 4 "inout.h" 2


void writesameln(const char *line)  ;
void writeln(const char* line)  ;
unsigned int readln(void);
char *eatcr(char *s)  ;
void interrogationAndAnalysis(void);
void clear(void);









# 8 "silkdust2_no_UTF8.c" 2



extern unsigned int verb;
extern unsigned int noun1;
extern unsigned int noun2;
extern unsigned char  adve;
extern unsigned char  actor;
extern unsigned char  adjective;
unsigned int dummy;
unsigned char  cdummy;


room *cr;

char *compressed;
unsigned char bpointer;
unsigned int cpointer;
char decompress_b[128 +1];
unsigned char currbyte;


const tree huftree[141 ]={
    {90,255,255},
    {41,255,255},
    {255,0,1},
    {40,255,255},
    {54,255,255},
    {255,3,4},
    {52,255,255},
    {51,255,255},
    {255,6,7},
    {59,255,255},
    {55,255,255},
    {255,9,10},
    {57,255,255},
    {85,255,255},
    {255,12,13},
    {255,2,11},
    {255,8,5},
    {255,14,15},
    {86,255,255},
    {255,18,16},
    {68,255,255},
    {50,255,255},
    {255,20,21},
    {49,255,255},
    {255,23,17},
    {87,255,255},
    {113,255,255},
    {255,25,26},
    {76,255,255},
    {53,255,255},
    {255,28,29},
    {67,255,255},
    {71,255,255},
    {255,31,32},
    {122,255,255},
    {255,34,19},
    {80,255,255},
    {63,255,255},
    {255,36,37},
    {106,255,255},
    {66,255,255},
    {255,39,40},
    {70,255,255},
    {120,255,255},
    {255,42,43},
    {79,255,255},
    {78,255,255},
    {255,45,46},
    {255,22,24},
    {255,33,30},
    {48,255,255},
    {255,27,50},
    {82,255,255},
    {58,255,255},
    {255,52,53},
    {255,38,35},
    {45,255,255},
    {255,41,56},
    {33,255,255},
    {255,58,44},
    {72,255,255},
    {255,47,60},
    {77,255,255},
    {69,255,255},
    {255,62,63},
    {34,255,255},
    {83,255,255},
    {255,65,66},
    {255,48,49},
    {255,51,54},
    {255,55,57},
    {10,255,255},
    {73,255,255},
    {255,71,72},
    {84,255,255},
    {255,59,74},
    {65,255,255},
    {255,61,76},
    {255,64,67},
    {39,255,255},
    {255,79,68},
    {89,255,255},
    {255,81,69},
    {107,255,255},
    {255,70,83},
    {255,73,75},
    {255,77,78},
    {118,255,255},
    {255,87,80},
    {44,255,255},
    {255,89,82},
    {0,255,255},
    {98,255,255},
    {255,91,92},
    {112,255,255},
    {255,84,94},
    {119,255,255},
    {103,255,255},
    {255,96,97},
    {102,255,255},
    {255,99,85},
    {46,255,255},
    {255,101,86},
    {109,255,255},
    {255,88,103},
    {99,255,255},
    {255,90,105},
    {121,255,255},
    {255,107,93},
    {100,255,255},
    {255,95,109},
    {255,98,100},
    {117,255,255},
    {255,112,102},
    {108,255,255},
    {255,114,104},
    {104,255,255},
    {255,106,116},
    {114,255,255},
    {255,108,118},
    {115,255,255},
    {110,255,255},
    {255,120,121},
    {105,255,255},
    {255,110,123},
    {255,111,113},
    {97,255,255},
    {111,255,255},
    {255,126,127},
    {116,255,255},
    {255,129,115},
    {255,117,119},
    {101,255,255},
    {255,132,122},
    {255,124,125},
    {255,128,130},
    {32,255,255},
    {255,136,131},
    {255,133,134},
    {255,135,137},
    {255,138,139},
};




char hufget(void)
{

unsigned char  iii;

    iii= 141 -1;
    while(1) {
        if(currbyte&0x1) {
            iii=huftree[iii].son1idx;
        } else {
            iii=huftree[iii].son0idx;
        }
        if(++bpointer==8) {
            bpointer=0;
            currbyte=compressed[++cpointer];
        } else {
            currbyte>>=1;
        }
        if(huftree[iii].c!=255)
            return huftree[iii].c;
    }
}

boolean decode(void)
{
    register char c;
    unsigned char  k=0;
    if(bpointer==0)
       currbyte=compressed[cpointer];
    do {
        c=hufget();
         ;
        decompress_b[k++]=c;
    } while(c!='\0'&&!(c==' '&&k> 128 -15)&&k< 128 );
    if(c!='\0') {
        decompress_b[k]='\0';
        return 1 ;
    }
    return 0 ;
}
const word dictionary[349 ]={
    {0xf7, 0x41, 0x4b,1,1},
    {0xe9, 0x4f, 0x41,2,2},
    {0xe9, 0xe2, 0x41,2,2},
    {0x5d, 0x52, 0x40,3,2},
    {0xef, 0x5b, 0x41,3,2},
    {0x43, 0x4b, 0xf9,3,2},
    {0x4a, 0xfa, 0xfb,3,2},
    {0x4a, 0x57, 0xfb,3,2},
    {0xe8, 0x59, 0x49,3,2},
    {0x4b, 0x54, 0x5f,3,2},
    {0xea, 0xed, 0x50,3,2},
    {0xe9, 0x4f, 0x4f,4,2},
    {0xfd, 0x41, 0x54,4,2},
    {0xfb, 0xf0, 0xe3,4,2},
    {0xf6, 0x52, 0x43,4,2},
    {0x4f, 0xf6, 0xe3,4,2},
    {0xe3, 0xf6, 0xe3,4,2},
    {0x41, 0x55, 0xe9,5,2},
    {0x42, 0x41, 0x52,6,2},
    {0x5b, 0x55, 0x47,7,2},
    {0xe5, 0xf8, 0xef,7,2},
    {0xfc, 0xf9, 0x45,7,2},
    {0x41, 0x4c, 0xfd,8,2},
    {0x5d, 0xf4, 0xfb,8,2},
    {0xef, 0xf5, 0x41,9,2},
    {0xec, 0xf8, 0xe4,10,2},
    {0x40, 0xf8, 0xe4,10,2},
    {0xec, 0xe9, 0xee,11,2},
    {0x40, 0xe9, 0xee,11,2},
    {0xfe, 0x50, 0x45,12,1},
    {0xe5, 0xf3, 0xfa,12,1},
    {0xef, 0xf7, 0xe6,13,2},
    {0x54, 0x55, 0x42,14,2},
    {0x54, 0xf7, 0xfc,14,2},
    {0x55, 0x53, 0x45,15,1},
    {0x5e, 0xf4, 0xf2,17,2},
    {0x5e, 0x59, 0xf2,17,2},
    {0xf8, 0x49, 0x4b,17,2},
    {0x4b, 0x56, 0x53,17,2},
    {0xf8, 0xe4, 0x4b,17,2},
    {0xe7, 0x56, 0x53,17,2},
    {0x42, 0x45, 0x44,18,2},
    {0xfc, 0x4b, 0x4b,19,2},
    {0xfc, 0xe6, 0x4b,19,2},
    {0xec, 0xe4, 0x43,19,2},
    {0xed, 0xec, 0x56,20,2},
    {0x50, 0x42, 0xf7,22,2},
    {0xea, 0xef, 0xf7,22,2},
    {0x48, 0xf2, 0xfa,22,2},
    {0x4d, 0x42, 0xf1,24,4},
    {0x44, 0xe7, 0xf2,24,4},
    {0xff, 0xef, 0x55,24,4},
    {0xf3, 0xf2, 0x44,24,4},
    {0xfb, 0xe0, 0xeb,25,4},
    {0xea, 0xfb, 0x4e,25,4},
    {0x4c, 0x47, 0xf0,26,4},
    {0x4b, 0x49, 0xfb,26,4},
    {0x43, 0x41, 0x4e,27,2},
    {0x54, 0x49, 0x4e,27,2},
    {0x4a, 0x41, 0x52,27,2},
    {0x4a, 0x53, 0xea,27,2},
    {0x58, 0x49, 0xe9,27,2},
    {0x56, 0x58, 0x5d,28,2},
    {0x43, 0x41, 0x52,29,2},
    {0xef, 0x41, 0x52,29,2},
    {0x49, 0x54, 0x41,29,2},
    {0x31, 0x35, 0x30,29,2},
    {0x31, 0x30, 0x30,29,2},
    {0xeb, 0xf2, 0xe0,30,4},
    {0x46, 0x56, 0xe1,30,4},
    {0xf6, 0xee, 0xea,32,2},
    {0xfb, 0xf4, 0xfc,33,2},
    {0xed, 0xfa, 0x45,34,2},
    {0xf0, 0x4f, 0x43,35,2},
    {0xe9, 0xf3, 0x49,37,4},
    {0xf6, 0x41, 0x49,37,4},
    {0xec, 0xf3, 0xe1,39,2},
    {0xec, 0xf3, 0x4f,39,2},
    {0xf5, 0x45, 0x41,40,2},
    {0xe5, 0xfe, 0xef,40,2},
    {0xe8, 0x41, 0x4b,41,2},
    {0xe7, 0xe2, 0xfe,43,4},
    {0xe6, 0xf5, 0x43,43,4},
    {0xf1, 0xfa, 0xfb,44,4},
    {0x5b, 0xf8, 0xee,44,4},
    {0x54, 0xf2, 0xf5,45,4},
    {0xfb, 0x4c, 0x42,45,4},
    {0xff, 0x48, 0x47,45,4},
    {0xe7, 0xfe, 0xfb,46,2},
    {0x56, 0xe3, 0xeb,47,4},
    {0x40, 0x52, 0x4e,47,4},
    {0xff, 0xfe, 0x4e,48,4},
    {0x5f, 0x49, 0xfc,48,4},
    {0x5b, 0xfa, 0xe9,49,2},
    {0x47, 0x45, 0x54,50,1},
    {0xfa, 0x52, 0x41,50,1},
    {0xee, 0x41, 0x4b,50,1},
    {0xe7, 0xfa, 0x42,51,2},
    {0xfe, 0xf3, 0x4e,51,2},
    {0xf5, 0xe4, 0x41,51,2},
    {0xf5, 0xe4, 0xef,51,2},
    {0xf0, 0x45, 0x53,51,2},
    {0xe5, 0xfd, 0x41,52,1},
    {0xf6, 0x41, 0x4b,53,2},
    {0xfe, 0x49, 0x45,53,2},
    {0xfe, 0xf3, 0x4f,53,2},
    {0xe5, 0xfa, 0xe8,53,2},
    {0xec, 0xf9, 0x52,54,2},
    {0xeb, 0x52, 0x4f,55,1},
    {0xe5, 0xfe, 0x41,55,1},
    {0xe4, 0xe1, 0x52,55,1},
    {0xf8, 0x4f, 0x53,55,1},
    {0xed, 0xe9, 0x49,56,1},
    {0xff, 0xe2, 0x54,56,1},
    {0xe5, 0xf6, 0x4c,57,2},
    {0xec, 0x45, 0x41,58,2},
    {0xe3, 0x41, 0x4d,58,2},
    {0xe3, 0xec, 0x4d,58,2},
    {0xf3, 0xee, 0xfd,58,2},
    {0x5f, 0xee, 0xfd,58,2},
    {0xf4, 0xf1, 0x53,59,2},
    {0xf4, 0xf1, 0xfd,59,2},
    {0xfc, 0xfa, 0xe1,60,2},
    {0xf5, 0xe8, 0x52,60,2},
    {0x50, 0x52, 0xfd,61,2},
    {0x50, 0x52, 0x53,61,2},
    {0xee, 0xf7, 0xe0,62,2},
    {0x42, 0xf7, 0xe0,62,2},
    {0xee, 0x55, 0x44,62,2},
    {0xe1, 0x57, 0x49,63,1},
    {0xfe, 0x49, 0x56,63,1},
    {0xfd, 0x49, 0x56,66,1},
    {0xf5, 0xea, 0x46,66,1},
    {0xee, 0xe4, 0x55,67,1},
    {0xe0, 0x41, 0x53,67,1},
    {0xe4, 0x41, 0x4c,68,2},
    {0xe4, 0xec, 0x4c,68,2},
    {0xea, 0xf3, 0x4e,68,2},
    {0xea, 0xf3, 0xe0,68,2},
    {0x5b, 0x4a, 0xfa,68,2},
    {0xf0, 0xf3, 0xea,68,2},
    {0xfb, 0xf7, 0x41,68,2},
    {0xfb, 0xf7, 0xef,69,2},
    {0x5c, 0x50, 0xe8,69,1},
    {0xe3, 0x55, 0x4c,69,1},
    {0xf7, 0xf2, 0xe7,69,1},
    {0xf7, 0x4f, 0x56,69,1},
    {0xe7, 0x55, 0x53,69,1},
    {0xfc, 0xff, 0x45,69,1},
    {0x45, 0xfe, 0xfe,69,1},
    {0x45, 0x58, 0x0,70,1},
    {0x4d, 0xef, 0xf2,70,1},
    {0x58, 0x0, 0x0,70,1},
    {0xe9, 0x45, 0x41,70,1},
    {0xfe, 0xf8, 0xf4,70,1},
    {0xe8, 0xf7, 0x49,71,1},
    {0x50, 0x55, 0x54,71,1},
    {0x53, 0x45, 0x54,71,1},
    {0x49, 0x0, 0x0,72,2},
    {0x49, 0x4e, 0x56,72,2},
    {0xf3, 0x4e, 0x56,72,2},
    {0x43, 0x52, 0x5b,72,2},
    {0x42, 0x59, 0x45,73,1},
    {0xfb, 0x48, 0x4f,74,1},
    {0xe8, 0x48, 0x41,75,1},
    {0xed, 0xe5, 0x45,75,1},
    {0xe0, 0x41, 0x4c,75,1},
    {0xf9, 0xe2, 0x4f,75,1},
    {0xee, 0x58, 0x49,76,1},
    {0xfc, 0x54, 0x4f,76,1},
    {0xfa, 0x55, 0x49,76,1},
    {0xf6, 0x4c, 0x41,77,1},
    {0xfc, 0xe7, 0x45,78,1},
    {0x49, 0xe9, 0xe1,78,1},
    {0x5e, 0x5f, 0xe8,78,1},
    {0xf8, 0x49, 0x4c,78,1},
    {0xe0, 0x4f, 0x4f,79,2},
    {0x4e, 0x0, 0x0,80,2},
    {0xe5, 0xf9, 0x52,80,2},
    {0x53, 0x0, 0x0,81,2},
    {0xf8, 0xf9, 0x55,81,2},
    {0x45, 0x0, 0x0,82,2},
    {0xee, 0x41, 0x53,82,2},
    {0x57, 0x0, 0x0,83,2},
    {0xfc, 0x45, 0x53,83,2},
    {0xe8, 0xf9, 0x4f,84,2},
    {0x55, 0x0, 0x0,84,2},
    {0x55, 0x50, 0x0,84,2},
    {0x53, 0x42, 0xe7,84,2},
    {0xf2, 0xec, 0x4c,85,2},
    {0x44, 0x0, 0x0,85,2},
    {0xf5, 0x4f, 0x57,85,2},
    {0xe7, 0x55, 0x51,85,1},
    {0xef, 0xe2, 0x44,85,2},
    {0xf5, 0x49, 0x4c,86,1},
    {0xed, 0xed, 0x54,87,2},
    {0x42, 0x55, 0x59,88,1},
    {0xf8, 0xff, 0xf9,89,2},
    {0xe1, 0xef, 0x4d,89,2},
    {0xea, 0x4f, 0x4c,90,2},
    {0xfb, 0x4f, 0x53,90,2},
    {0xe4, 0x49, 0x43,95,1},
    {0x5c, 0x5a, 0x5c,97,2},
    {0xfc, 0x48, 0x4f,98,2},
    {0xfc, 0xe5, 0x4f,98,2},
    {0x40, 0x56, 0xfd,98,2},
    {0x40, 0x56, 0x53,98,2},
    {0xee, 0xfc, 0xf4,98,2},
    {0x42, 0xfc, 0xf4,98,2},
    {0xe4, 0xf4, 0x55,98,2},
    {0xe4, 0xf4, 0xfb,98,2},
    {0xee, 0xf5, 0xe0,99,2},
    {0x47, 0x4f, 0x0,100,1},
    {0x52, 0x55, 0x4e,100,1},
    {0xe3, 0x41, 0x4c,100,1},
    {0xee, 0x52, 0x45,101,2},
    {0xee, 0xff, 0x45,101,2},
    {0xe1, 0xe6, 0x41,101,2},
    {0xe1, 0xe6, 0xef,101,2},
    {0x4a, 0x4f, 0xf6,101,2},
    {0xe2, 0xef, 0x4f,102,2},
    {0xe2, 0xef, 0xe1,102,2},
    {0xe6, 0x4f, 0x43,102,2},
    {0xe6, 0xe2, 0x43,102,2},
    {0xe8, 0x4f, 0x53,103,2},
    {0xe8, 0xe2, 0x53,103,2},
    {0xfe, 0xef, 0x4f,108,2},
    {0xfe, 0xef, 0xe1,108,2},
    {0x4c, 0x0, 0x0,110,1},
    {0xf8, 0x4f, 0x4f,110,1},
    {0xec, 0xf2, 0xff,111,1},
    {0xfa, 0x45, 0x41,120,1},
    {0x54, 0xf5, 0xea,121,1},
    {0xef, 0xf1, 0xf8,121,1},
    {0xfc, 0x41, 0x49,122,1},
    {0xe0, 0xef, 0x59,123,2},
    {0xe0, 0xef, 0xf7,123,2},
    {0xe0, 0xff, 0x45,143,1},
    {0x5d, 0x4e, 0x43,144,2},
    {0x5d, 0x56, 0xf6,144,2},
    {0x45, 0xff, 0xfd,144,2},
    {0xf5, 0xff, 0xe3,156,2},
    {0xf6, 0xe0, 0x4f,159,2},
    {0xed, 0xe2, 0xf6,159,2},
    {0xe7, 0x49, 0x46,160,1},
    {0x50, 0x40, 0xec,161,2},
    {0x50, 0x40, 0x42,161,2},
    {0x53, 0xe2, 0xf5,161,2},
    {0xff, 0xf2, 0x4d,161,2},
    {0xfc, 0x49, 0x52,164,2},
    {0xf9, 0xf2, 0x43,165,2},
    {0xfb, 0xe3, 0x47,166,2},
    {0xed, 0x4c, 0x50,167,2},
    {0x4a, 0x55, 0xe9,167,2},
    {0x4a, 0x55, 0x47,167,2},
    {0xec, 0xf3, 0xf6,167,2},
    {0xfb, 0xe5, 0xeb,167,2},
    {0x8d, 0xe5, 0x6d,167,2},
    {0xe3, 0x4f, 0x52,168,2},
    {0xfb, 0xfd, 0x53,169,2},
    {0xfb, 0xff, 0x54,170,4},
    {0x4d, 0x50, 0x44,171,2},
    {0xec, 0x4f, 0x43,171,2},
    {0x43, 0xe5, 0xf5,173,2},
    {0xec, 0xf2, 0xeb,173,2},
    {0xfb, 0xec, 0x52,173,2},
    {0x35, 0x30, 0x41,174,2},
    {0xf2, 0x4d, 0x50,175,4},
    {0x49, 0x4e, 0x53,175,4},
    {0xe9, 0xe4, 0xe7,176,2},
    {0x4b, 0x45, 0x59,177,2},
    {0xf3, 0xfe, 0xff,178,2},
    {0xed, 0x4e, 0x47,179,2},
    {0xf6, 0xe9, 0x56,179,2},
    {0xff, 0xfa, 0x4c,180,2},
    {0x50, 0x4f, 0xe3,181,2},
    {0x41, 0xfe, 0xe0,182,4},
    {0x4d, 0xf2, 0xe3,182,4},
    {0x4d, 0x56, 0xfe,183,4},
    {0x4a, 0x52, 0x5d,183,4},
    {0xf8, 0xfe, 0x49,184,4},
    {0xf8, 0xfe, 0xe7,184,4},
    {0x4f, 0x49, 0x4c,185,2},
    {0xf5, 0xe5, 0x4c,185,2},
    {0x5c, 0x42, 0xf0,186,2},
    {0xe6, 0xef, 0xf0,186,2},
    {0xe2, 0xe8, 0x4e,187,2},
    {0x47, 0xf6, 0xed,200,2},
    {0xf6, 0x4f, 0x4f,200,2},
    {0xf6, 0xe2, 0x4f,200,2},
    {0x53, 0x49, 0x54,201,1},
    {0xe9, 0xe2, 0x45,201,1},
    {0x44, 0xfa, 0xf7,202,2},
    {0xef, 0xf7, 0x4f,203,1},
    {0xe7, 0x4f, 0x4f,206,2},
    {0xe7, 0xe2, 0x4f,206,2},
    {0xf7, 0xe0, 0x49,206,2},
    {0xf6, 0x52, 0x41,210,1},
    {0xf5, 0xe7, 0x49,211,1},
    {0x45, 0x41, 0x54,211,1},
    {0x48, 0xe5, 0xf3,211,1},
    {0xe3, 0xf4, 0xfd,212,2},
    {0x4f, 0xf4, 0xfd,212,2},
    {0xe5, 0x55, 0x52,213,1},
    {0xeb, 0x4f, 0x4f,216,2},
    {0xe0, 0xf8, 0xfd,219,2},
    {0xec, 0xfa, 0xfb,228,2},
    {0x45, 0x5f, 0xf2,229,2},
    {0xea, 0x4f, 0x52,230,1},
    {0x4f, 0x57, 0x57,231,2},
    {0xf7, 0xfb, 0x4f,236,1},
    {0x54, 0x4a, 0xe7,237,2},
    {0xf3, 0x41, 0x52,238,2},
    {0xfa, 0xfa, 0xe2,239,2},
    {0x48, 0x5c, 0x52,240,2},
    {0xea, 0x25, 0x5b,240,2},
    {0xe4, 0x5c, 0x52,240,2},
    {0xea, 0x88, 0x5b,240,2},
    {0xe9, 0x45, 0x4c,240,2},
    {0xe9, 0xe8, 0x4c,240,2},
    {0xea, 0xe2, 0x41,240,2},
    {0xe0, 0xf0, 0x45,241,2},
    {0x4c, 0xe0, 0xfd,241,2},
    {0x4e, 0x52, 0x53,242,2},
    {0xe2, 0x52, 0x53,242,2},
    {0xef, 0xee, 0x52,400,1},
    {0xf2, 0x55, 0x43,400,1},
    {0xe8, 0x55, 0x4e,400,1},
    {0xe8, 0xf8, 0x4e,400,1},
    {0xfc, 0x49, 0x53,400,1},
    {0x50, 0x45, 0x45,401,1},
    {0xf8, 0x48, 0x49,401,1},
    {0x50, 0x4f, 0x4f,401,1},
    {0xf9, 0xec, 0xfc,406,1},
    {0x50, 0x45, 0x54,406,1},
    {0xe8, 0xf9, 0x55,406,1},
    {0xe7, 0x49, 0x53,406,1},
    {0xe7, 0x45, 0x4c,407,1},
    {0xf9, 0x4e, 0x46,407,1},
    {0xe3, 0x49, 0x4e,408,1},
    {0xf6, 0xfa, 0xf5,409,2},
    {0x4d, 0x45, 0x0,409,2},
    {0xf7, 0xeb, 0xe8,409,2},
    {0x52, 0xfa, 0xfc,987,1},
    {0xf7, 0x4f, 0x41,988,1},
    {0xe9, 0x41, 0x56,989,1},
    {0xfd, 0xfe, 0x5a,1000,1},
    {0xe5, 0x48, 0x45,9999,3},
    {0x41, 0x4e, 0x44,9999,3}
};

const char long_d30[]={0x47,0xE9,0x16,0x1F,0xA3,0xA,0x96,0xCA,0xE6,0x94,0x17,0x6B,0xF1,0x4D,0xEC,0x4C,0xF7,0xEB,0x89,0x2F,0xBD,0xD9,
0x5F,0xCC,0x8A,0xB3,0xF2,0x3F,0x3,0xD7,0xF,0x3E,0x31,0xA5,0x29,0xCF,0xFA,0xC9,0xB5,0xB4,0xF6,0xA4,0x5B,
0xB0,0x5C,0xEC,0x1D,0x9F,0xF,0x33,0xB4,0xEE,0x62,0xD4,0x47,0x6B,0x93,0x99,0xFF,0x30,0xA5,0x25,0xEF,0x49,0xF7,
0xF7,0xD5,0xBC,0xE5,0xBD,0x0};
const char short_d30[]={0x76,0xC5,0x59,0xF9,0x9F,0x9D,0xE9,0x7E,0x3D,0xF1,0xE5,0xB};
const char long_d31[]={0xF6,0x17,0x3B,0xC1,0xF5,0xA3,0xED,0x46,0x6B,0x53,0x5A,0x5D,0xEC,0x22,0x7E,0x2D,0xAD,0xD5,0xC5,0xAC,0x38,
0x2B,0xFF,0xE3,0xCD,0xB6,0xA6,0xB4,0x16,0xDF,0xC4,0x82,0xE5,0xC,0xB4,0x36,0x6D,0xCD,0xF5,0xCA,0x51,0x90,0x7B,
0x3F,0x33,0x94,0x65,0x1A,0xB4,0xE4,0xD5,0xC5,0x48,0x25,0x68,0x69,0xAD,0x2E,0x76,0xD5,0xBC,0xFB,0x99,0x96,
0xB7,0xA3,0x74,0x23,0x60,0x7D,0xF0,0x33,0x23,0xBF,0x10,0x9F,0xF6,0x76,0xF4,0x1C,0x16,0x44,0xE8,0xDF,0x4D,0xD9,0xDC,
0x79,0x83,0x48,0x69,0xC1,0x72,0xE2,0x87,0x18,0x5F,0xD9,0x5C,0x8F,0xF3,0x6,0xEB,0x19,0x6D,0x62,0xFC,0x22,0xEF,0x5};
const char short_d31[]={0x7E,0x42,0x79,0x37,0x5A,0x7B,0x1};
const char long_d32[]={0xB6,0x3C,0xEB,0x27,0xD7,0xD2,0xDA,0x93,0xEE,0xB0,0x27,0xDD,0x8,0x58,0x5D,0x4C,0x6C,0x71,0x62,0xC6,0xC5,
0xC7,0xA8,0x10,0xFD,0xC0,0xA6,0x32,0x68,0x56,0xFE,0x9D,0xF1,0x69,0xF1,0xB1,0x20,0x42,0xFF,0x6E,0x90,0xB,
0x96,0x2B,0x50,0x41,0x7A,0x3B,0x4A,0x37,0x2,0x16,0x6B,0xF1,0x4D,0xEC,0xD,0x3E,0xEF,0x2C,0xD7,0xDA,0xD2,
0x5A,0x65,0x36,0x5A,0xB0,0x5C,0x4C,0xD4,0xD6,0xE2,0x4F,0x7E,0x6D,0xED,0x30,0xF9,0xB5,0x3,0xDE,0xFB,0x59,0xAC,
0xC5,0x37,0xB1,0x86,0xA8,0x8B,0xBF,0x37,0x5A,0xCD,0xFA,0xD9,0x2F,0x19,0x4B,0x6B,0x75,0xB1,0x9F,0x15,0xA5,
0x6C,0xAE,0x29,0x83,0x6E,0x58,0x45,0xBB,0x8E,0xCD,0x59,0x3F,0xFB,0xD5,0xC5,0x7E,0xA6,0xE5,0xBD,0x0};
const char short_d32[]={0x7E,0xD9,0x54,0xC6,0x6E,0xB4,0xF6,0x2};
const char long_d33[]={0xF6,0x57,0x69,0x4A,0xAB,0x8B,0x89,0x2D,0x4E,0xCC,0xB8,0xF8,0x58,0x5D,0xEC,0xCC,0x38,0xAF,0xE0,0xB7,0xD3,0x26,
0xF1,0x69,0x46,0x7E,0xA1,0x37,0x7B,0x23,0xD7,0xE2,0x9B,0x58,0x7D,0x15,0x77,0xA3,0xEF,0xF1,0x69,0x79,0x9E,0x4E,0x7C,0x56,
0x17,0x3B,0xC1,0xF5,0xB1,0xB4,0x56,0x17,0xBB,0xD1,0xDA,0x61,0x7D,0x76,0x20,0xF7,0x7E,0xD6,0x10,0x75,0xF1,
0xF7,0x46,0x2B,0x5A,0x85,0x50,0xD9,0x9C,0x98,0x6,0xFE,0xAC,0x9F,0xFD,0xEA,0x62,0x4D,0x19,0x74,0xC3,0xAA,0x45,
0x55,0x9C,0x17,0x72,0x95,0xAB,0x8B,0xFD,0x4C,0xCB,0x9B,0xEF,0x3A,0xA9,0x27,0x44,0x15,0x31,0xA5,0x75,0x94,0xF4,
0xDD,0xB0,0xE4,0xD5,0xC5,0x38,0x7F,0xDD,0x19,0xD1,0x9A,0xF7,0x2};
const char short_d33[]={0xDD,0xC9,0x38,0xAF,0xE0,0xB7,0xD3,0x26,0x95,0xCD,0xDD,0x68,0xED,0x5};
const char long_d34[]={0x47,0xE9,0x26,0xE4,0x34,0xF6,0xA4,0xFB,0xB3,0xA2,0x2E,0x7E,0x17,0x2D,0x2D,0x4B,0x4F,0xCC,0x40,0x6B,0xDE,0x7C,0x2A,
0xCD,0xC8,0x94,0xE0,0x49,0x90,0x70,0x4A,0xB3,0x5C,0x6B,0x4B,0x6B,0xEF,0xE6,0x20,0x7E,0xE5,0xA2,0x5,0xCB,0xC5,
0x5A,0x7C,0x13,0x7B,0x67,0xA,0x67,0xB9,0xD6,0x96,0xD6,0xCE,0x68,0xA7,0x6B,0x51,0x9A,0x4C,0xDE,0x7C,0x62,0x4A,0x13,
0x7F,0xBE,0xE3,0xDD,0x9E,0x49,0x90,0x9A,0xAC,0x6C,0x2E,0xC6,0x30,0x6,0x36,0x95,0xB1,0xFC,0xA3,0xEC,0x51,
0x57,0xD9,0x1C,0x69,0xAF,0x2D,0xBE,0xF7,0x2};
const char short_d34[]={0x47,0xE9,0xFE,0xAC,0xA8,0x8B,0xDF,0x45,0x4B,0xCB,0xD2,0x13,0x2F};
const char long_d35[]={0xF6,0x57,0x69,0x4A,0xAB,0x8B,0x89,0x2D,0x4E,0xCC,0xB8,0xF8,0x58,0x5D,0x2C,0x64,0xAF,0xAC,0x54,0x3F,0x4A,
0x3B,0x18,0x95,0xB3,0xAC,0x29,0x4D,0x26,0xC3,0x9B,0x6F,0x6B,0xAB,0x8B,0xBD,0x9B,0x83,0xF8,0x95,0x8B,0x96,0xD6,
0xEA,0x62,0x56,0x9C,0x95,0xFF,0x59,0x7C,0x4C,0x8,0xB1,0xA6,0xBC,0xBA,0x4A,0x13,0x5B,0x9C,0x38,0x2C,0x79,
0x2D,0xBE,0x89,0xD1,0x45,0xEB,0x80,0xBC,0x17};
const char short_d35[]={0xBE,0xB2,0x57,0x56,0xAA,0x1F,0xA5,0xC9,0xB,0x96,0x8B,0x7F,0x5E,0xED,0x80,0x5E,};
const char long_d36[]={0xF6,0x57,0x69,0x62,0x8B,0x13,0x53,0x5A,0x9E,0xA7,0x13,0x15,0x72,0xEF,0x67,0x31,0x9,0x12,0x1E,0x16,0x93,0x3F,
0xC,0x65,0x73,0xEF,0x8C,0x2F,0x17,0x2C,0xA7,0x34,0x34,0x98,0xC1,0xD5,0x9E,0x49,0x9C,0xF9,0xA3,0x20,0x67,0x68,
0xDD,0xC5,0xC4,0x50,0x2E,0x65,0xD3,0x7B,0x1};
const char short_d36[]={0x47,0xE9,0xFE,0x1C,0x9F,0xD,0x5D,0xB4,0xB4,0x2C,0x3D,0xF1,0x2};
const char long_d37[]={0xF6,0x57,0x69,0x62,0x8B,0x13,0x3B,0x93,0x2B,0x94,0x69,0x75,0xB1,0x3E,0x94,0x47,0x85,0xE8,0x7,0x36,0x95,
0xB1,0xB4,0x56,0x17,0xB3,0xE2,0xAC,0xFC,0x8F,0xF7,0x2};
const char short_d37[]={0x82,0xC6,0xE7,0x17};
const char long_d40[]={0x47,0xE9,0x46,0x15,0x2C,0xF7,0x86,0x95,0x1F,0x8B,0x51,0x85,0xFE,0x33,0x8,0x6B,0x8,0xA9,0x6C,0xAE,0x72,
0x75,0x31,0xEB,0x27,0xD7,0xD2,0x5A,0xAC,0x4F,0x76,0x3D,0xB8,0xA2,0xCD,0xC8,0x94,0xE0,0xC9,0xCC,0xEF,0xCD,
0xAE,0x9F,0xFD,0xEA,0x2A,0xD,0xD,0x9D,0x28,0xC8,0x89,0x2D,0x4E,0x1C,0x56,0x17,0xEB,0x28,0x8C,0x55,0x1A,0xF1,
0x25,0xAD,0x2E,0x86,0xA0,0x9A,0xD2,0xCE,0x1B,0xBF,0x57,0x36,0xBD,0xD9,0x5F,0x7C,0x74,0xD1,0x62,0x95,0xD9,0xE8,
0x42,0xAE,0x72,0x75,0x31,0x4A,0x57,0xF7,0x30,0x43,0xEB,0x2E,0x66,0x64,0x4A,0xF0,0x64,0xE6,0xF7,0x5E,};
const char short_d40[]={0x7E,0xB9,0x7E,0xF0,0x89,0xA5,0xB5,0xBA,0x58,0xBC,0xDF,0x78,0x5E,};
const char long_d41[]={0x47,0xE9,0x16,0x1F,0x4B,0x5E,0x8C,0xA,0x10,0x47,0x15,0xFA,0x8D,0x78,0xE6,0x58,0xE2,0x2F,0x76,0xD5,0xBC,
0x3B,0xA1,0x4D,0xD9,0x3C,0xEC,0xED,0xB4,0xD5,0x18,0x76,0xD7,0x2A,0x57,0x17,0xFB,0x79,0xA,0x97,0xD6,0xEA,0x62,
0x7D,0x3A,0xAE,0x50,0x3E,0xAC,0x69,0xE1,0x47,0x6B,0xCF,0x1C,0x4B,0xFC,0xD5,0xC5,0xCE,0xEB,0xFE,0x79,0xBD,0x75,0x4F,
0xCD,0x5B,0xA3,0xAB,0xC,0x5A,0xDD,0x9F,0xCE,0xBC,0xAB,0x8B,0x89,0xF9,0x2B,0xDA,0xA2,0x56,0x17,0xAB,0x14,
0x97,0xD6,0xEA,0x62,0x54,0xA1,0xDF,0x88,0xC7,0xDB,0x51,0xBA,0x11,0x30,0x2B,0xDD,0x1F,0x9,0xD1,0x50,0xC9,
0x74,0x18,0x55,0xB0,0x54,0x36,0x17,0xEF,0xEC,0x60,0x4F,0xBA,0x29,0x2F,0xC6,0x7A,0x5E,0x2C,0x79,0x75,0x31,
0x3,0x54,0x33,0xA2,0x35,0x6F,0x2F};
const char short_d41[]={0xFE,0x2B,0xF4,0x1B,0xF1,0x2C,0xAD,0xD5,0xC5,0x24,0x42,0xBE,0x0};
const char long_d42[]={0x47,0xE9,0x46,0xC0,0x62,0x6F,0x84,0x2B,0xB5,0x5C,0x9B,0x98,0xBF,0xA2,0x1D,0x66,0x68,0xDD,0xC5,0x8,0xBD,0x9E,
0xFA,0x4F,0xD7,0xE2,0x2F,0xFE,0x79,0x47,0x4E,0x14,0xF3,0x17,0xE4,0xDE,0xCF,0x44,0x6D,0x2D,0x3E,0x1D,0x66,0x29,0xA3,
0x3D,0x3B,0xE3,0x77,0x20,0xA7,0xBC,0xBA,0x18,0x55,0x32,0xBC,0x17};
const char short_d42[]={0xDD,0x4E,0x4A,0x8D,0x73,0x62,0xFE,0x8A,0xF6,0x2};
const char long_d43[]={0x47,0xE9,0x16,0x1F,0x4B,0x5E,0xEC,0x1D,0xED,0x4C,0x7E,0xE,0x33,0x2E,0x3E,0xF6,0xA4,0x1B,0x1,0x8B,0xD6,
0x56,0x17,0xF3,0xEF,0x28,0xD6,0x89,0xD6,0xF0,0x1C,0x56,0x69,0xC4,0x97,0xB4,0xBA,0xD8,0x71,0x79,0x9E,0x1A,0x3D,0x5A,
0x32,0xD6,0xA7,0xE3,0xA,0x65,0xEF,0x5};
const char short_d43[]={0xC7,0x0,0xD5,0x4,0x8D,0x76,0x26,0x3F,0x2F};
const char long_d44[]={0x47,0xE9,0x16,0x1F,0x53,0x26,0x95,0x58,0x5D,0xEC,0xBC,0xEE,0x9F,0x77,0x69,0xAD,0x2E,0x16,0xEF,0x37,0x1E,0x6F,
0x47,0xE9,0x46,0xC0,0x3A,0xF1,0x35,0x1D,0x2D,0xFE,0x79,0xB5,0x70,0x96,0xFB,0xD1,0x46,0xF5,0x34,0xD0,0x61,0x41,
0xAB,0xAB,0xB4,0xF3,0xBA,0x7F,0xDE,0xDD,0xA0,0x9D,0xD,0xF1,0xDB,0xB3,0x37,0xC0,0x7B,0x3B,0x6D,0xB5,0x60,
0x39,0xD8,0x5D,0x60,0x9,0x39,0xE5,0x49,0xB5,0x2C,0x7C,0x70,0x4D,0xC4,0xD7,0x94,0xE4,0xCD,0x57,0x24,0xD0,0xE2,
0x63,0x6F,0xA7,0xAD,0xA6,0xBC,0xF7,0xD7,0x53,0x48,0xB,0x96,0xAB,0x8B,0xBD,0xE3,0x14,0x2E,0xAD,0xD5,0xC5,0xCE,0xEB,
0xFE,0x79,0x77,0x83,0x16,0x3C,0xFD,0x1F,0xA6,0x6B,0xF1,0x47,0x37,0x44,0x78,0xB3,0xBF,0xF8,0x98,0xD2,0x8C,0xFC,
0xC2,0x29,0x4F,0xFC,0x69,0x7E,0x10,0x2D,0x79,0x75,0xB1,0x4E,0xB8,0x56,0xDE,0xB};
const char short_d44[]={0xDD,0xB9,0xEE,0x9F,0xF7,0x5};
const char long_d45[]={0x47,0xE9,0x16,0x1F,0x4B,0x5E,0xEC,0x1D,0xED,0x4C,0x7E,0xE,0x33,0x2E,0x3E,0xF6,0xA4,0x1B,0x1,0xEB,0xD3,
0x71,0x85,0x32,0x4D,0x79,0xD6,0x4F,0xAE,0xA5,0xB5,0x27,0xDD,0xE2,0xFC,0x49,0xB4,0xBA,0x58,0x27,0x5A,0xC3,0x73,
0x58,0xF4,0xC9,0xE6,0xEA,0xA2,0x3F,0xAC,0x4F,0xC7,0x35,0x3F,0x8E,0x94,0xD1,0xE5,0xBD,0x0};
const char short_d45[]={0x7E,0x83,0x6A,0x82,0x46,0x3B,0x93,0x9F,0x17};
const char long_d46[]={0x47,0xE9,0x66,0x44,0x13,0x2E,0xFA,0x64,0x93,0x6A,0x75,0xB1,0xEF,0x94,0x69,0x69,0x2D,0x78,0xF1,0xE,0x96,0xC9,
0x90,0x13,0xE3,0xD7,0xD2,0x5A,0x5D,0x2C,0xDE,0x6F,0x3C,0xDE,0xFC,0x67,0x8F,0xBD,0x1D,0x5D,0xD0,0xC,0xAD,0x3B,
0xAB,0xA5,0x81,0xBF,0xB7,0x93,0x34,0xF3,0xA7,0xB1,0x8B,0x8F,0x5,0xCB,0xD5,0xC5,0x87,0xF7,0x2};
const char short_d46[]={0xC7,0x39,0x65,0x7A,0x1};
const char long_d47[]={0xB6,0xD5,0x45,0xB,0x5E,0x36,0x39,0x23,0x53,0x82,0x47,0x17,0xF2,0x30,0xE5,0x31,0x20,0x97,0xD6,0x28,0x7B,
0xEC,0x43,0xC,0xFD,0x74,0x58,0xD0,0x7E,0x28,0xCF,0x44,0xD1,0x94,0x49,0x25,0xBC,0xF9,0x8F,0xD6,0x89,0xCA,
0x8F,0x51,0xE5,0x7,0xAD,0x2E,0x56,0x99,0x8D,0x76,0x31,0x47,0xA0,0x59,0xF9,0x57,0x17,0xEB,0xC0,0x44,
0xC5,0xBB,0x61,0x66,0x7C,0x9,0x5E,0x5D,0x7C,0x78,0x2F};
const char short_d47[]={0xF6,0x99,0x8D,0x2E,0xE4,0xB};
const char long_d101[]={0x47,0xE9,0x16,0xFF,0x6B,0x7,0x72,0xCA,0xB3,0x77,0x5F,0x79,0xC9,0xB3,0xEB,0xAB,0x8C,0x67,0xE8,0x80,0x95,0xCD,0xC3,
0x94,0xAD,0xFC,0x3D,0xE4,0x9E,0x74,0x7F,0x56,0xD4,0xC5,0x3F,0xAC,0x2E,0x78,0x24,0x82,0x6B,0x75,0x31,0x3,
0x10,0x82,0xE5,0x3E,0x42,0x2A,0x9B,0xDE,0x7C,0x4C,0x63,0x5A,0x5D,0x34,0x7B,0x7,0x92,0xF1,0xCC,0x57,0xFC,0xDA,0xD6,0x4D,0x81,0x7B,
0x58,0xB7,0xBA,0xCD,0xB1,0xDD,0xBE,0xB7,0xA3,0x74,0x3B,0xA3,0xC7,0x2A,0x57,0x17,0xB3,0xB5,0xF7,0x9D,0x15,0x67,0xE5,0x7F,0x56,0x57,0x69,
0x7D,0x7E,0x56,0x36,0x57,0xB9,0xFC,0x66,0xB0,0x12,0x26,0x51,0xA1,0x8D,0x96,0xD6,0xEA,0x62,0x12,0x4D,0x3B,
0xF8,0xCF,0xD2,0x1A,0x89,0xF1,0x31,0x31,0x7E,0xD1,0x2A,0x27,0xC0,0x57,0x3E,0x41,0x34,0x41,0xBF,0x9E,0x67,0xFE,
0x24,0x4A,0x6F,0xC7,0xB8,0xE0,0x3D,0xE9,0xD6,0x60,0xD5,0x2E,0xFE,0x61,0x74,0x31,0x65,0xAA,0xEF,0xCE,0x82,0x9C,0x6F,
0x7B,0xE3,0xD7,0x2A,0x67,0x7C,0x2D,0x2C,0xD6,0x83,0x28,0x4C,0xCC,0xB8,0x7A,0xDE,0xD1,0x4D,0xD7,0xE4,0x6E,0x74,
0xB0,0xF8,0x5F,0x3B,0x90,0x8B,0x5A,0x5D,0xCC,0x8A,0xB3,0xF2,0x3F,0x7B,0x3F,0xE3,0x34,0xBC,0x1D,0xA5,0x1B,0xDD,
0x74,0x4D,0xCE,0x52,0x96,0x7B,0xD2,0xFD,0x59,0x51,0x17,0x7F,0xC1,0x72,0x52,0xE9,0x74,0x44,0xD3,0xF2,0x5E,};
const char short_d101[]={0xB6,0x5C,0x3F,0xA5,0x3B,0x4B,0x93,0x5F,};
const char long_d110[]={0x7E,0xB9,0xF0,0x27,0x6,0x91,0x91,0x5F,0xBE,0x0};
const char short_d110[]={0xB6,0x5C,0x3F,0xA5,0x3B,0x4B,0x93,0x5F,};

const room_code original_connections[18 ][6 ]={
    {31,0,0,0,0,0,},
    {32,30,33,35,0,0,},
    {0,31,0,34,0,0,},
    {0,0,0,31,0,0,},
    {0,35,32,0,0,0,},
    {34,0,31,36,0,0,},
    {0,0,35,0,0,0,},
    {0,0,0,30,0,0,},
    {0,47,46,99,41,0,},
    {0,0,0,0,42,40,},
    {43,0,0,0,0,41,},
    {0,42,44,0,0,0,},
    {0,0,45,43,0,46,},
    {0,0,0,44,0,0,},
    {0,0,0,40,44,0,},
    {40,0,0,0,0,0,},
    {0,0,0,0,0,0,},
    {0,0,0,0,0,0,}
};
room world[18 ]={
    {30,long_d30,short_d30,{31,0,0,0,0,0,}},
    {31,long_d31,short_d31,{32,30,33,35,0,0,}},
    {32,long_d32,short_d32,{0,31,0,34,0,0,}},
    {33,long_d33,short_d33,{0,0,0,31,0,0,}},
    {34,long_d34,short_d34,{0,35,32,0,0,0,}},
    {35,long_d35,short_d35,{34,0,31,36,0,0,}},
    {36,long_d36,short_d36,{0,0,35,0,0,0,}},
    {37,long_d37,short_d37,{0,0,0,30,0,0,}},
    {40,long_d40,short_d40,{0,47,46,99,41,0,}},
    {41,long_d41,short_d41,{0,0,0,0,42,40,}},
    {42,long_d42,short_d42,{43,0,0,0,0,41,}},
    {43,long_d43,short_d43,{0,42,44,0,0,0,}},
    {44,long_d44,short_d44,{0,0,45,43,0,46,}},
    {45,long_d45,short_d45,{0,0,0,44,0,0,}},
    {46,long_d46,short_d46,{0,0,0,40,44,0,}},
    {47,long_d47,short_d47,{40,0,0,0,0,0,}},
    {101,long_d101,short_d101,{0,0,0,0,0,0,}},
    {110,long_d110,short_d110,{0,0,0,0,0,0,}}
};

const char areyousure[]={0xBE,0x1F,0x7B,0xD2,0x8D,0xDC,0x87,0x80,0xB3,0x7F,0x44,0xAC,0xEB,0xA8,0x6B,0xC1,0x72,0x1F,0xE5,0x3E,0x4F,0xAD,0x3D,
0x20,0xEF,0x5};
const char exitrestart[]={0x5D,0x7E,0xBB,0x16,0x2C,0xF7,0x51,0xEE,0xF3,0x2A,0x7,0xBB,0xB5,0xE,0xB,0x7E,0xEA,0x2A,0x9B,0x43,0x23,0xAC,
0x72,0x1F,0x54,0xF1,0xCB,0x7B,0x1};
const char header[]={0xFE,0xB5,0x9,0xD7,0xD,0x47,0x75,0x98,0x18,0xBF,0xD6,0x4D,0x9B,0x6E,0x44,0x47,0x25,0x26,0xA8,0x3B,0x4F,0xB5,0x11,0x18,0x3E,0x69,0xF2,0xBA,
0xE5,0x1D,0xEB,0x75,0xEB,0x30,0xFF,0x10,0xCB,0x5B,0x37,0x8F,0xED,0xE6,0xB1,0x82,0xFD,0x43,0x2C,0x6F,0xDD,0x3C,0xB6,0x9B,0xDD,0xB4,0xF1,0x3D,0x86,0xFF,0x9,0x5C,0xEF,0xD8,0x17};
const char message61[]={0xDD,0xC1,0xAF,0x50,0x6E,0xCF,0x38,0x6B,0x17,0x1F,0x76,0x5E,};
const char message66[]={0x47,0xE9,0x26,0x93,0xBB,0x6A,0x46,0x70,0xAD,0x72,0x52,0xA9,0xDC,0x7F,0xEF,0x6A,0xEF,0xCD,0x27,0xBA,0x68,0x79,0x9E,
0x4E,0x54,0x48,0xEF,0x5};
const char message122[]={0x47,0xE9,0x66,0x24,0x77,0xD5,0x18,0x90,0xEB,0x68,0x36,0xF0,0x89,0x55,0xEE,0xCC,0x5E,0x6C,0x28,0xAC,0xAE,
0xD2,0xC4,0xF8,0xB5,0xB4,0x56,0x17,0x33,0xA3,0x87,0xF7,0x2};
const char message200[]={0x47,0xE9,0xFE,0xAC,0xA8,0x8B,0x3F,0xEA,0xB5,0x81,0x8E,0xB7,0xB1,0x11,0x3C,0x3F,0xCF,0x24,0xE2,0xCF,0x6F,0xAF,0x4D,0xE3,0xB0,
0x27,0xDD,0xFA,0x90,0xD8,0x31,0x9D,0x16,0x16,0x3C,0xED,0xC5,0xF,0x22,0x4D,0x5E,0xE5,0x4,0xF8,0xCA,0x27,0x88,
0x26,0xE8,0xD7,0xF3,0xCC,0x9F,0x44,0xE9,0xCD,0xFF,0xC5,0x8C,0x9F,0x85,0xC5,0x1A,0xAA,0xF0,0x57,0xB9,0x8F,0x63,0x3A,
0x50,0xAD,0x6E,0xD4,0x82,0x17,0x26,0xB8,0x66,0xFD,0xEC,0x67,0x6B,0xEF,0x3B,0x41,0x52,0x99,0x56,0x17,0xFB,0xD1,
0xDA,0xE3,0xCD,0x97,0xE5,0xE8,0x62,0xCA,0xA4,0x54,0x90,0xD3,0x1A,0xDD,0x74,0x4D,0xEE,0x8D,0x3D,0xE9,0x3C,0x1B,0x9B,
0xA3,0x74,0x3B,0x83,0xBB,0x6A,0x6F,0x34,0x45,0x7,0xD3,0xB2,0xB3,0xA3,0x74,0x8B,0xD6,0x27,0xD5,0xE8,0xFC,0x88,0x7E,
0x86,0xD6,0x9D,0x20,0xF9,0x1C,0xBF,0xBA,0x51,0x33,0xB4,0xB5,0xBD,0xB1,0xD8,0x47,0xB4,0x85,0xEC,0x80,0xCB,0x7D,0xD8,
0x99,0x2F,0xCB,0xD5,0x8D,0x9A,0x6F,0x7B,0xE3,0x97,0xE7,0x79,0x73,0xB7,0xF7,0x3C,0x6F,0x17,0x53,0x5A,0xAC,0xA2,0x81,
0xB,0x72,0x3D,0xCE,0x1B,0xAC,0xA7,0x67,0x63,0x23,0x78,0x47,0xE9,0x66,0x68,0x6B,0xBB,0xD1,0xC1,0x2A,0x27,0xBF,0x76,0xB0,
0xBA,0xD8,0x19,0x7F,0xC1,0x72,0xC6,0xD7,0xC2,0xE2,0x97,0x9E,0xD,0x34,0x2B,0xFF,0xEA,0x62,0xE2,0x7,0xD1,
0x61,0x95,0x7B,0x63,0x4,0xAE,0xBD,0x9F,0x15,0x1A,0xCC,0x1F,0xE2,0x9D,0x74,0x5F,0xD9,0x5C,0x5D,0xEC,0x47,0x6B,
0x8F,0xB7,0xEE,0x64,0xAF,0x6C,0xAE,0x72,0x24,0xC6,0x7,0x1D,0x76,0xF1,0x31,0xA5,0xC5,0x1A,0xAA,0xF0,0xBD,0x75,
0x37,0x47,0xC0,0x9E,0x74,0x7F,0x8E,0xCF,0x86,0xC3,0x2E,0x66,0x68,0x6B,0xCB,0x6F,0x6,0x2B,0x61,0x75,0x31,
0x89,0xA6,0x1D,0xFC,0xC7,0xB3,0xB1,0x39,0x4A,0x37,0xEA,0xB5,0x61,0x86,0x4A,0xB4,0x67,0xC6,0xD5,0x86,0x3D,0xE9,0x56,0x21,
0xC4,0xB4,0x16,0x2C,0x27,0xBA,0x9A,0xD6,0x94,0xF7,0xA4,0xFB,0x13,0xF3,0x14,0xA2,0xBC,0x17};
const char message201[]={0x47,0xE9,0x96,0x22,0x78,0x75,0xB1,0x86,0x2A,0x7C,0x6F,0xF6,0x17,0x1F,0x53,0x5A,0xAC,0x29,0xD5,0xD2,
0x5A,0x5D,0x8C,0xC4,0xF8,0xA0,0x31,0x20,0x21,0x67,0xE5,0x5F,0x5D,0xEC,0x8C,0xEF,0xCD,0xB7,0xBD,0xF1,0x6B,0x52,
0xE9,0xCC,0xE,0x3E,0xE4,0xEA,0x62,0x1F,0xF1,0x17,0x76,0x37,0xEC,0x86,0xDC,0x1B,0xE0,0x55,0xF4,0x22,0x3E,
0xE4,0xC,0xAD,0x7B,0x58,0x65,0x7A,0x13,0x14,0x55,0xF8,0x33,0xB5,0x83,0xD5,0x8D,0x5A,0xE5,0x9E,0x74,0x7F,0x8E,
0xCF,0x6,0x6F,0xF6,0x17,0x1F,0x53,0x5A,0x70,0xD6,0xC5,0x5F,0xF,0xA2,0x30,0x71,0x58,0x48,0xF9,0x41,0x4,
0xB9,0xCA,0x3D,0xE9,0xBC,0x17};
const char message202[]={0xC7,0xB8,0xDA,0xB0,0x27,0xDD,0xE2,0x63,0x29,0x82,0x95,0xCD,0xD5,0xC5,0x64,0xE6,0x5F,0x5A,0x7B,0xD2,0xFD,
0x39,0x3E,0x1B,0xBA,0x68,0x69,0x59,0x7A,0xE2,0xB0,0xE3,0xF2,0x8D,0x5F,0x71,0xD8,0x93,0xEE,0xCF,0xF1,0xD9,0xD0,0x45,0x23,0x9C,
0x1F,0x15,0xFF,0x19,0xC5,0x43,0xC7,0xDB,0xD8,0x8,0x9E,0x9F,0x90,0xD1,0x1F,0xE6,0x47,0xA9,0xF0,0x67,0xEF,0x5A,0xD3,0x9C,0xD2,
0xF2,0x3C,0x9D,0xA8,0x90,0x53,0x5E,0xAC,0x7,0x4A,0xD9,0x3C,0x4C,0x6C,0x8,0xC2,0xCE,0xEC,0xB1,0xCA,0x11,
0xB0,0xAB,0xFD,0xA2,0x16,0x9C,0x75,0xF1,0xD7,0x67,0xF,0x2E,0xEF,0x5};
const char message203[]={0xFE,0x2F,0xA6,0xB4,0x27,0x1D,0x9B,0xB,0x96,0x6B,0x99,0x42,0x5A,0xE5,0xDE,0x58,0x7,0xFF,0x19,0xE1,0x6B,
0x3A,0x5A,0xB0,0xDC,0x99,0x7D,0xAF,0x55,0x90,0xAB,0xDC,0xC5,0x9F,0x91,0x5F,0xE8,0xBD,0x0};
const char message204[]={0x82,0x77,0x5C,0xBE,0xF1,0x2B,0xE,0xB3,0xDD,0x45,0xFC,0x75,0x52,0x4F,0xD0,0xAC,0x9F,0xFD,0xFA,0x67,0x8E,0xCF,0x86,0x2E,
0x5A,0x5A,0x96,0x9E,0xE8,0xF6,0x66,0xDC,0x9C,0xD2,0x7A,0xA0,0x94,0xCD,0x5D,0xED,0x5,0xB4,0x11,0x3C,0xDF,0x9,0x92,0xEE,0x73,
0x34,0xA5,0x3A,0x2C,0x76,0xE2,0x57,0x28,0xEF,0x38,0x15,0x48,0x20,0x2D,0xB4,0xA6,0x87,0x59,0x3F,0xFB,0x75,0x2F,0xD6,0xC9,0x13,
0x93,0x68,0xEB,0xA3,0x4A,0x39,0xF,0x8B,0x31,0xC,0x12,0x43,0xC4,0x9F,0xF2,0xFC,0x68,0xB,0xF6,0x66,0x3B,0x99,
0xDC,0x55,0x13,0x72,0x1A,0xEB,0xDD,0x79,0x17,0x62,0xFC,0x9A,0xF5,0xB3,0x5F,0xDD,0xA8,0x5D,0xEC,0x6,0xED,0xD,
0xF0,0x94,0x27,0x95,0x4E,0x47,0xA4,0xC9,0x33,0xB4,0xEE,0x9E,0x74,0x7F,0x8E,0xCF,0x86,0x59,0xF9,0x17,0xB5,
0x86,0xA0,0x5A,0x32,0x76,0xD3,0x7D,0xEF,0x5};
const char message205[]={0x3E,0xF1,0xC7,0xD1,0x63,0x4A,0xEB,0xAE,0x66,0x27,0x98,0xE3,0xB0,0xB7,0xAB,0xF5,0xC1,0xCF,0xCE,0x68,0x6D,0x17,0x7F,
0x3E,0x6,0x73,0x78,0xF3,0x7F,0x31,0xA5,0xD5,0xC5,0x9E,0x74,0x6C,0xEE,0xBC,0xA,0x6B,0x3D,0xCE,0x1B,0xAC,0xE7,
0x2E,0x3E,0x16,0x2C,0x47,0x17,0x53,0x9A,0x99,0x29,0x17,0x35,0x2D,0x6F,0xDD,0xD5,0xEC,0x4,0x73,0xEC,0x6,
0xED,0xCC,0x1E,0x3,0x89,0x38,0x35,0x5A,0x7B,0x66,0xFD,0xEC,0x77,0x5C,0xF6,0x58,0xE5,0x8C,0xFC,0xC2,0x45,0xCD,0xD6,0xDE,
0xF7,0xB0,0x8B,0x8F,0x29,0xCF,0xDE,0x7D,0x65,0x6F,0x7E,0x3B,0xF8,0xCF,0x3B,0xE5,0xB3,0x10,0xC5,0x8F,0x53,0xA3,0x40,0xBB,
0xF8,0x87,0x5D,0xFC,0x81,0xF1,0xCD,0x67,0xC1,0x72,0x17,0x7F,0x71,0x9E,0xE0,0xF2,0xE6,0xFF,0x62,0x4A,0x2B,
0xE5,0xE7,0x30,0x43,0xEB,0xAE,0x25,0x9B,0x7B,0xFF,0x34,0x78,0x37,0xF4,0x8F,0x2E,0x26,0x4,0x44,0x5A,0xA5,0x89,
0xBA,0xF8,0x33,0xB4,0xEE,0x62,0x1F,0x72,0x56,0xBA,0x16,0x5F,0x1E,0x66,0x20,0xBE,0xB2,0xB9,0x3E,0x84,0x70,0xE2,
0x82,0xE5,0xDE,0x5F,0xCD,0x5B,0xCB,0x1F,0x6C,0x62,0xD9,0xC1,0x8F,0xD6,0xC8,0x9B,0xFF,0x8B,0x29,0xED,0x74,0xFF,0x83,
0xAB,0x3D,0xB,0x22,0xF4,0xEF,0xA6,0x6C,0x2E,0x46,0xA8,0xA5,0x35,0x4B,0x3B,0x18,0x15,0xA2,0x1F,0xD8,0x54,
0x6,0x79,0x2F};
const char message206[]={0x47,0xE9,0x46,0xAE,0xEF,0xE3,0x2B,0x61,0xC6,0x8D,0xDA,0x93,0xEE,0xCF,0x8A,0xBA,0xF8,0xA3,0x50,0xB9,0xCA,0x3D,
0xE9,0x16,0x2C,0xE7,0x63,0x30,0xC7,0xA8,0xD7,0x6,0xDA,0xFB,0x67,0xC8,0xF6,0x1C,0x6F,0x63,0x23,0x78,0x7E,0x7B,0x6D,0x1A,0x87,
0x69,0xAD,0x65,0xA,0x69,0x4D,0x85,0x98,0x6D,0x57,0x6B,0xBB,0xD1,0xC1,0x62,0x2D,0x6B,0x69,0xCD,0xC8,0x2F,0x5C,
0xE5,0x64,0xAE,0x72,0x1F,0x62,0xE8,0x5F,0x5D,0xEC,0x8C,0x3F,0xE3,0x82,0xF7,0xA4,0x9B,0x89,0xDA,0x3B,0x4E,0xE1,
0xAC,0x9F,0xFD,0xEA,0x62,0x3F,0x5A,0x7B,0xBC,0x75,0x23,0x57,0xFF,0x59,0xE5,0xDE,0x5F,0xD9,0x9C,0xD6,0xDE,0x71,0xA,
0xA7,0xBC,0x64,0x4C,0x54,0x9C,0xB0,0x63,0x63,0xE3,0xFF,0x62,0x75,0xC1,0x7B,0xE3,0xCC,0x1E,0x34,0xC2,0xD7,0x74,0x74,
0xBC,0x8D,0x8D,0xE0,0x9,0xFA,0xAC,0x2E,0x66,0xC4,0x73,0x98,0x5A,0xB3,0x9D,0xA5,0x2C,0x67,0xDC,0x1C,0xC5,0x3B,0x2B,0x4C,0xC8,
0xD5,0xC5,0xDE,0xA0,0x5A,0xB7,0xBA,0x7F,0xEC,0xC,0xEC,0xED,0xB4,0xD5,0x61,0xB6,0x33,0xB4,0xB5,0xF5,0x21,0xC4,0xEA,0xA2,
0x9F,0x4,0xC4,0xF6,0xEC,0xC3,0xFC,0xA8,0x69,0x79,0x36,0x36,0xBE,0x2C,0xF7,0xA4,0x5B,0x5D,0x65,0xE1,0xE8,0x62,0x1F,
0xD1,0xDA,0xB3,0x1E,0xC1,0x34,0xAD,0xC3,0x4C,0xED,0x80,0x57,0x17,0x33,0xE2,0x19,0x5D,0xAC,0x7,0xC7,0xA9,0x6C,
0xB6,0x67,0x37,0x58,0x36,0xD0,0xEA,0x62,0xDD,0x14,0xF8,0x7D,0x3F,0x12,0x83,0x19,0x7F,0x74,0xB1,0x1B,0x34,0xE5,
0x5D,0xFC,0xDD,0x60,0x69,0xE7,0x5};
const char message207[]={0xFE,0x2F,0xD6,0x32,0x85,0xB4,0xB7,0xA3,0xC7,0x9B,0x9F,0x78,0xDE,0x58,0x8B,0xC2,0xF7,0x5E,};
const char message208[]={0xB6,0xD5,0x45,0x8B,0x35,0xA5,0x5A,0x5A,0x23,0x31,0x3E,0x26,0xC6,0x2F,0xF2,0x5E,};
const char message209[]={0x36,0x2,0x8B,0xF,0xE6,0x38,0xCC,0x57,0xFC,0xDA,0xD6,0xCD,0xEE,0x1F,0xD6,0xAD,0x6E,0x73,0x6C,0xB7,0x6F,0x63,0xD3,0xD,0xC4,0x9F,0x1F,0x25,0x9A,0xDF,0x5E,
0x9B,0xC6,0xC1,0x66,0xB3,0x9D,0x20,0x8E,0x6A,0xD,0xF1,0x19,0x72,0x75,0xA3,0x26,0xC0,0x57,0x3E,0x41,0x34,0x41,0xBF,0x9E,
0x67,0xFE,0x24,0xCA,0x5,0x9,0x21,0xF7,0xA4,0x5B,0xE5,0x2A,0x84,0x98,0x18,0xBF,0xA6,0xBC,0xBA,0xD8,0x8F,
0xD6,0x1E,0x6F,0x7E,0x9E,0x5D,0xC4,0xAF,0x29,0xCD,0x72,0xAD,0x2D,0xAD,0x9,0x92,0xCF,0x61,0x41,0xB3,0x9D,0x91,0xAE,0xC9,
0xBD,0xB1,0x9B,0x9C,0xEE,0x43,0xAE,0x72,0x66,0x2E,0x79,0x75,0x95,0x16,0xB2,0x3,0x2E,0xF7,0x31,0x43,0xEB,
0x2E,0x26,0xBF,0x76,0xF0,0x17,0x34,0x53,0xAD,0x82,0x5C,0xD0,0x9E,0x74,0xDE,0x7C,0xA6,0x81,0xE,0xFE,0x61,0xFD,
0xB3,0x33,0x99,0x4E,0x5,0x9F,0x58,0xA1,0x35,0x5A,0x8F,0x55,0xCE,0x88,0xCF,0x7B,0xD2,0xAD,0x6E,0xD4,0xB4,
0xD6,0xC7,0xB3,0x37,0x26,0x83,0x4D,0xFC,0x74,0xB4,0x60,0xB9,0xFE,0x59,0x53,0xB,0x33,0xD2,0x35,0xB9,0x37,0xCE,0xEC,
0xB1,0x1E,0xC1,0xCA,0x66,0x3,0xD1,0xD4,0x1A,0x65,0x8F,0xBA,0xCA,0xE6,0x6E,0x88,0x22,0x18,0x72,0x95,0x7B,
0xD2,0x79,0x13,0xA0,0x21,0x8,0xFB,0xE8,0x43,0x79,0x41,0xE4,0x3E,0xE4,0xEA,0x46,0xCD,0xB8,0x51,0xE8,0xE0,
0xEF,0x49,0xF7,0x27,0x71,0x2A,0x69,0xF2,0x61,0xB6,0x33,0xD2,0x35,0xB9,0x37,0xD6,0xC1,0x7F,0x76,0x43,0x14,0x9F,0x45,
0x4D,0xFC,0x49,0x22,0xCE,0x5A,0x5A,0xEB,0x81,0x52,0x36,0xF7,0xA4,0x5B,0x98,0xA1,0xEC,0xD9,0xD8,0x1C,0xA5,0xFB,0xB4,0xFA,
0xAE,0x3D,0x7,0x9B,0xCD,0xB7,0xBD,0xF1,0x6B,0x2,0x28,0xA3,0xD9,0xD8,0xD8,0x56,0x17,0xED,0x98,0x4E,0xB,0xB,0x43,0x68,0xC4,0x97,0xC7,
0xEF,0x49,0xB7,0xF8,0x58,0xBC,0x1B,0x56,0xB9,0xA,0x21,0x76,0xC6,0xC7,0xD2,0xDA,0x93,0xEE,0x13,0x9A,0x75,
0xD8,0xDB,0xD5,0x9E,0x74,0x7B,0x37,0x47,0x77,0x9C,0x8C,0xBA,0x68,0x20,0x9A,0xA1,0x75,0x17,0x3B,0xF1,0x2B,0x94,
0x27,0x36,0x4,0xB9,0x8F,0x7D,0x84,0x54,0x36,0x57,0x17,0xEB,0x41,0x14,0x26,0x8E,0x5F,0xDD,0xA8,0x3D,0xE9,
0xD8,0x5C,0x1F,0x3C,0x2,0x7A,0x9A,0x72,0xE1,0x83,0xA,0x72,0x95,0x7B,0xD2,0x79,0x2F};
const char message210[]={0xB6,0xD6,0x9E,0x74,0xFB,0x38,0xA3,0xB5,0x19,0x68,0xED,0xB0,0xBA,0x4A,0xEB,0xA4,0x9E,0x10,0x55,0xC4,0x94,0x76,
0x26,0x33,0xCE,0x82,0x5C,0xE5,0x9E,0x74,0x7F,0x8E,0xCF,0x86,0x2E,0x5A,0x5A,0x96,0x9E,0xF0,0x5E,};
const char message211[]={0x47,0xE9,0x96,0x22,0x78,0x75,0xB1,0x33,0x3B,0xF8,0x4B,0x6B,0x75,0xB1,0x4E,0xEA,0x9,0x51,0x45,0x2C,0x58,
0x4E,0x74,0x74,0x57,0x17,0x7B,0xBB,0xAA,0x64,0x6F,0xF6,0x57,0x69,0x4,0x96,0xB4,0x33,0x7B,0xF1,0x83,0x8,0x72,
0xA1,0x7F,0x75,0xA3,0xD6,0x87,0x10,0xB4,0x58,0xD3,0xAA,0x86,0xBD,0xD1,0xDA,0xBE,0xB2,0x39,0xE5,0x3D,0xE9,
0xFE,0x1C,0x9F,0xD,0x5D,0xB4,0xB4,0x2C,0x3D,0xE1,0xCD,0x27,0x16,0x4C,0x6,0x3E,0x1D,0x6F,0x63,0x23,0x78,0x3E,0xD1,0x5A,0x7A,0x36,0x82,
0x67,0xDB,0xD5,0xCF,0x6F,0xAF,0x4D,0xC3,0x5B,0x37,0x72,0x4F,0xBA,0xD5,0x55,0x16,0xEE,0x49,0xB7,0x33,0x78,0x67,0xF6,0x10,0x70,
0xB6,0x63,0x40,0xAE,0x72,0x24,0x22,0x84,0xAB,0xDC,0x93,0xCE,0xB3,0x11,0x3C,0x1F,0xEE,0x61,0xF,0xE8,0x30,0xDB,0xAE,0xD6,
0x76,0x66,0x8F,0x69,0xDF,0x43,0x6A,0x14,0xDA,0xE3,0xD9,0xD8,0xF8,0x5A,0x85,0xBF,0xD8,0x99,0x4E,0x6C,0x58,0x5A,0xEB,0x95,
0x5D,0x81,0xE,0x7B,0xD2,0x8D,0x80,0x3D,0xE9,0xFE,0x1C,0x9F,0xD,0x8B,0xFF,0xB5,0xA3,0x6C,0x4E,0x79,0x75,
0xB1,0x1B,0xAD,0x79,0x2F};
const char message212[]={0xF6,0xAE,0x35,0xCD,0x29,0xED,0x49,0xF7,0xE7,0xF8,0x6C,0xF0,0xE6,0x13,0x53,0x5A,0xBC,0xD3,0xD5,0x4,0x4E,0xF7,0xF7,0x20,
0x3E,0x2D,0x9B,0x5C,0xB0,0xDC,0xC5,0x94,0x56,0x17,0x7B,0xD2,0xB1,0x89,0xBF,0xF7,0xCF,0xBA,0xF8,0x4B,0x6B,
0x4F,0xBA,0x3F,0x2B,0xEA,0xE2,0x7B,0xF3,0x89,0x91,0x98,0xBF,0x68,0xB1,0xF7,0x4F,0x83,0xF7,0x46,0x7C,0xB9,0x60,
0x39,0xA5,0x45,0x33,0xE2,0xA1,0xC9,0xF,0x22,0xC8,0x29,0x2F,0x66,0xE5,0xEF,0xA3,0xCD,0x88,0xE7,0xB0,0xB7,0xAB,
0x19,0x5A,0x37,0x5D,0x2D,0xA9,0xC0,0x15,0xA5,0xC9,0xDE,0x7C,0x62,0x4A,0x8B,0x99,0x1F,0x51,0x8B,0x5F,0x4A,
0x35,0xE5,0x5D,0xA5,0x59,0x8A,0x26,0xBD,0x17};
const char message213[]={0x47,0xE9,0x26,0x93,0xBB,0x6A,0xC,0xC8,0x55,0xEE,0x8C,0xD6,0xF6,0xA4,0xFB,0x73,0x7C,0x36,0x8C,0xD3,0xF0,0xE6,
0x27,0x9E,0x37,0xD6,0xA2,0xF0,0xBD,0x17};
const char message214[]={0x3E,0xE6,0x61,0x4F,0xBA,0x19,0xC1,0xB5,0xCA,0x49,0xA5,0xD3,0x11,0x4D,0x6B,0x86,0xD6,0xDD,0x93,0xEE,0xCF,0xF1,
0xD9,0xE0,0xBD,0x0};
const char message215[]={0x82,0xE7,0xB7,0xD7,0xA6,0x71,0x58,0xDD,0x60,0x21,0xCD,0xCA,0xBF,0x1B,0x1D,0x65,0x73,0x67,0xB4,0x6,0xB9,0x1E,0x76,0x66,
0x7F,0xA3,0xF6,0xA4,0x63,0x73,0x82,0xA4,0xFB,0x1C,0x4D,0xA9,0x66,0x4,0x8D,0x72,0xCA,0xA4,0x54,0xC1,0xE5,0xCD,
0x27,0x66,0x4,0x17,0xE4,0x2A,0x27,0xE4,0x34,0x86,0xE,0xFE,0x53,0x57,0xD9,0x5C,0xBC,0xD3,0xD5,0xEA,0x62,0x7D,
0x4A,0xB4,0x75,0xAB,0xFB,0xC7,0xCE,0xC0,0x8,0x5C,0xAB,0x9C,0xC0,0xE2,0x83,0x39,0x16,0x2C,0x77,0xD3,0x98,0xA0,0x5F,0xCF,
0x33,0x7F,0x12,0xE5,0x94,0x26,0x7E,0x88,0xF1,0x95,0xCD,0x59,0xF9,0x57,0x17,0xFB,0xD1,0xDA,0xE3,0xBD,0x0};
const char message216[]={0x47,0xE9,0x16,0xED,0x23,0xE4,0x33,0xA9,0x74,0x3A,0x22,0xC8,0x19,0x5A,0x77,0x4F,0xBA,0x3F,0xC7,0x67,0x83,0x37,0x9F,
0x98,0xD2,0xC4,0x9F,0xEF,0x78,0xB7,0x67,0x46,0x68,0x29,0x9B,0xB3,0xF2,0xAF,0x2E,0x26,0x48,0xBA,0xCF,0xD1,0x94,
0x6A,0x95,0x33,0x73,0x61,0xC4,0xE3,0xBD,0x0};
const char message217[]={0x47,0xE9,0xF6,0x71,0xA6,0xC9,0x4A,0x58,0x5D,0xCC,0x8A,0x5E,0x9B,0xC6,0x5F,0x6A,0x7B,0x46,0x3D,0x5A,0x5B,0x5A,
0x3B,0x5D,0x95,0xB2,0x39,0xAB,0x39,0x95,0xDE,0xB};
const char message218[]={0x3E,0xD1,0x45,0x8B,0x99,0x1A,0x5C,0x87,0xBD,0x5D,0xCD,0xD0,0xBA,0xBB,0x4A,0x6B,0xF1,0x4D,0xEC,0x6,0x4B,0xDA,
0xC5,0xCE,0x1F,0x56,0xD1,0x24,0x9A,0x9E,0x51,0x58,0x8F,0x8A,0x36,0x3A,0x5D,0x13,0xCB,0x7D,0x90,0xF7,0x2};
const char message219[]={0x3E,0x31,0xA5,0x39,0x52,0x36,0x97,0x8C,0xA5,0xB5,0xBA,0x18,0xA7,0xD2,0x33,0x31,0xD,0xFC,0xDD,0xE8,0x7B,
0x7C,0xF2,0x5E,};
const char message220[]={0x3E,0xE6,0x61,0x4F,0xBA,0x9,0x39,0x8D,0xD5,0x8D,0x9A,0x2F,0x17,0x72,0x32,0x41,0xE3,0xAC,0x35,0x15,0x62,0x95,
0x7B,0x63,0xCA,0x85,0xFF,0x9D,0x58,0x90,0x8B,0x5A,0xB4,0x36,0xE3,0x6A,0xC3,0x2E,0xA6,0x34,0x23,0xBF,0x50,
0xD9,0xF4,0x5E,};
const char message221[]={0xB6,0xD5,0x45,0xAB,0xCC,0x71,0x2A,0x3D,0xBB,0xF8,0x58,0xE5,0x1C,0x61,0x75,0xB1,0x4E,0xEA,0x9,0x51,0x45,
0x78,0x2F};
const char message222[]={0x47,0xE9,0xD6,0x32,0x85,0x8B,0x5A,0xDD,0x24,0xEC,0x8D,0x70,0xA5,0x96,0x6B,0x63,0x18,0x3B,0xE3,0xD3,0xF1,0x8B,
0xF5,0x29,0xD1,0xD6,0xAD,0x63,0x8F,0x5D,0xB0,0x5C,0xAC,0x4F,0x89,0xB6,0xEE,0x1F,0xEB,0xEB,0xBD,0x0};
const char message223[]={0x82,0xE7,0xCB,0x85,0x3C,0x8C,0xF2,0xFF,0x67,0x95,0x7B,0x67,0x5D,0xFC,0x3D,0xE9,0xE,0xD3,0x1A,0x1,0x3D,0xAD,
0x72,0x3D,0x56,0x37,0x6A,0x75,0xF1,0x31,0xA5,0xC5,0x24,0xB8,0xA6,0xBC,0xBA,0xD8,0x3B,0x99,0x51,
0x4B,0x6B,0x75,0xB1,0x3E,0x25,0xDA,0xBA,0x75,0xEC,0xB1,0x13,0xE3,0xB,0x21,0xA7,0xBC,0xBA,0xD8,0x99,0xEE,0xD7,0x13,0x5F,
0x7A,0xB3,0xA5,0xD5,0x8D,0x1A,0xE7,0xEF,0xA3,0x9,0x68,0x63,0x23,0x78,0xC7,0xF0,0xE9,0x6B,0x3F,0x7B,0x9F,0x7E,0x3D,0xCF,0x13,0x70,0x7E,0x7C,0x8F,0xEB,0x8E,0xDF,0xEE,
0x75,0xCF,0xD6,0x47,0x1F,0x7C,0xF0,0xC1,0x7,0x1F,0xEC,0xD8,0xB1,0x63,0x63,0x33,0xFB,0x8B,0xBD,0xF3,0xD9,0x77,0x4C,0xB,0x23,0x9E,0xD1,0x19,0x1F,0x72,
0xC1,0xF2,0x30,0x43,0xEB,0x2E,0x66,0x7E,0xC7,0x75,0x98,0x2F,0x17,0x72,0x14,0xF,0x1D,0x6F,0x63,0x23,0x78,0xB6,0x5D,0xFD,0xCC,
0x54,0x36,0x57,0xB9,0xF3,0xE2,0x14,0x7A,0x36,0x36,0xBE,0x5C,0xC8,0x35,0x44,0x7,0xB4,0x60,0x39,0xAA,0x14,0x69,0x75,
0xB1,0x1B,0x7D,0x8F,0xEF,0xCD,0xF7,0xDE,0x7B,0x18,0x69,0x3,0x9F,0xB0,0xF3,0x2};
const char message224[]={0x3E,0x31,0xA5,0xD5,0x7F,0x94,0xCD,0x55,0xEE,0xA3,0xCF,0xE,0x56,0x17,0x93,0xE0,0x9A,0xA1,0x75,0x77,0x95,
0xF6,0x8E,0x8F,0xDD,0x60,0x49,0xB,0x96,0x8B,0x51,0x1F,0xAD,0xCD,0xC8,0x94,0xE0,0xF5,0xD1,0x1A,0xCA,0xCE,0x7C,
0x59,0xCE,0xD0,0xBA,0x8B,0x9D,0xF8,0x15,0xCA,0x23,0x77,0x9E,0x20,0x3A,0xCC,0xFA,0xD9,0xCF,0xB8,0x51,0x7B,0xD2,
0xED,0xC,0x9E,0x20,0x4E,0x9A,0xF0,0x66,0x7F,0x95,0xD6,0x7,0x4F,0x69,0xDA,0x8B,0x1F,0x44,0xDA,0x81,0xF7,0x2};
const char message225[]={0x47,0xE9,0x66,0x6A,0x7,0xAB,0x8B,0x35,0x54,0xE1,0xCF,0xD0,0xBA,0xAB,0x8B,0x35,0xA5,0x5A,0x5A,0x23,0x31,
0x3E,0x26,0xC6,0x2F,0x5A,0xE5,0x9E,0x74,0x7F,0x8E,0xCF,0x6,0xCF,0xC6,0x46,0xF0,0xBA,0xED,0xED,0xF,0xF3,0xDB,0x6B,0xD3,0x38,
0xCC,0x76,0x86,0xB6,0xB6,0xF8,0x3F,0xD8,0xC4,0xD0,0xC1,0x7F,0xEA,0x2A,0x9B,0xDE,0xBA,0x91,0x7B,0xD2,0x8D,0x1C,0x89,0x38,
0x6B,0x94,0x3D,0x92,0x21,0xE0,0x6C,0x77,0x26,0x57,0x9C,0x5,0xB9,0xBA,0xD8,0x79,0x15,0xD6,0xD2,0x5A,0x5D,
0xAC,0x7E,0x30,0x89,0xF9,0x6B,0x67,0xF6,0x62,0xF0,0x73,0xD8,0xC5,0x94,0x46,0x21,0x17,0xEF,0x74,0x35,0xE3,0x46,
0xED,0x86,0x28,0x82,0x21,0x17,0x2C,0x47,0xA1,0x72,0x75,0xF1,0x4C,0x2A,0x9D,0xD9,0xC1,0x87,0x1C,0x65,0x8F,
0x64,0xEC,0xFD,0x53,0x88,0x29,0x57,0xAE,0x2E,0xF4,0xCF,0x88,0x8F,0x9B,0x8E,0x30,0xE5,0xF9,0xD1,0x16,0xBC,0xBA,
0x18,0xAB,0x79,0x6B,0x6F,0x58,0xF9,0xB1,0xBA,0x98,0x44,0xD3,0xE,0xFE,0xE3,0xCD,0xFE,0x42,0xFF,0x94,0xC9,
0xFD,0xE0,0x13,0x33,0xB4,0xB5,0x55,0x8,0xB1,0x33,0x3E,0x96,0xD6,0xD0,0xC1,0x7F,0xEA,0x2A,0x9B,0xDE,0xB};
const char message226[]={0x82,0xE7,0xA7,0x2B,0xFA,0xC5,0xC7,0x9E,0x74,0xF3,0xDB,0x6B,0xD3,0x98,0xC0,0xB4,0x2A,0xBF,0xB2,0xA,0x68,0x63,0x23,0x78,0x47,0xA0,
0xC3,0x6C,0x17,0xBD,0x67,0x63,0x23,0x78,0x3E,0xEA,0x89,0x55,0x4E,0xC8,0x69,0xEC,0x49,0x77,0x58,0xFF,0x8C,0xA3,0xC7,0x94,0x76,
0x9C,0xA,0xA4,0xF8,0xB9,0xE3,0x54,0x20,0x81,0xB4,0xD0,0x9A,0x2E,0x58,0xCE,0x76,0x46,0x7E,0xE1,0xAC,0xFC,0xAB,0x8B,0x9,0x2C,
0x4F,0x4C,0xA2,0xAD,0x8F,0x2A,0xE5,0x1C,0xC3,0x20,0x31,0x44,0x7C,0xCF,0xC6,0xC6,0xFE,0x62,0x4F,0x3A,0x36,0xD7,0x7,
0x8F,0x2A,0x7E,0xD1,0x2A,0x17,0x24,0xDC,0x93,0x6E,0x7D,0xF0,0xB3,0x63,0x3A,0x50,0x69,0x32,0x79,0xB3,0x2B,0x7F,0x39,
0x8E,0x42,0x7B,0xE,0x7B,0xD2,0xCD,0xC,0x65,0xC8,0xC1,0x6E,0x11,0x5F,0xC1,0x27,0x76,0x83,0x65,0x53,0x36,0xA7,
0x4C,0x4A,0x15,0x5C,0x3B,0xA6,0x3,0x95,0x26,0xE3,0xD3,0xEA,0x7E,0x60,0xF,0xE2,0xD3,0xC2,0xCC,0xC3,0x8C,
0xB,0xDE,0x93,0x6E,0x67,0xF4,0xD8,0x3B,0x4E,0xE1,0xAC,0x9F,0xFD,0xEA,0x62,0xBD,0x12,0x69,0xF2,0x2A,0xE7,0xD7,0x7C,
0xC4,0xF2,0x76,0x94,0x6E,0xF1,0xB1,0x78,0x37,0xAC,0x72,0xB0,0xBB,0x7E,0x9C,0xB5,0x27,0xDD,0x27,0x34,0x6B,0xD6,0xCF,
0x7E,0x75,0xB1,0x33,0xB9,0x83,0x4F,0x51,0x9A,0x7C,0x98,0x98,0x4D,0xB,0xED,0xD9,0x83,0x9A,0xA5,0xBF,0x6F,0x8F,
0x37,0xDF,0x5A,0x5D,0xC,0x2C,0xF,0x3B,0x4E,0x5,0x12,0x48,0xB,0xAD,0xE9,0x4C,0xED,0x80,0xF6,0xA4,0x5B,0xEC,0x4C,0xF1,
0x59,0x5A,0xAB,0x8B,0x31,0xC,0x12,0x43,0xC4,0xDF,0xC5,0x8C,0xFC,0x42,0x9A,0x95,0xDF,0x9B,0x4F,0xAC,0x2E,0x78,
0x41,0x42,0x9A,0x5A,0x7B,0xD2,0xAD,0xAE,0xB2,0x70,0x4F,0xBA,0x3F,0xC7,0x67,0xC3,0xC,0x6D,0x6D,0x1F,0xE5,0x3E,
0x8F,0x32,0x79,0xC1,0x72,0xD,0xD1,0x1,0x2D,0xAC,0xC2,0xDF,0x93,0xEE,0x8F,0x61,0x46,0x69,0x7,0xB,0x26,
0x3,0xDF,0x7B,0x1};
const char message227[]={0xB6,0xD5,0x45,0x8B,0xF9,0xD1,0x16,0xC,0xC2,0x18,0x6,0x89,0x21,0xE2,0xEF,0x8C,0xD6,0x20,0xE7,0xAF,0x7B,0xB1,0x4E,0x9E,
0x98,0x44,0x5B,0x1F,0x55,0xCA,0xE9,0xF9,0x9B,0x6D,0xED,0x4C,0xAE,0x50,0xA6,0x5,0x2F,0x7E,0xE9,0xD9,0x30,
0xE5,0xD5,0xC5,0x2C,0xFD,0x54,0x13,0xC3,0xC4,0xF1,0xF3,0xE7,0x5F,0x9B,0x70,0xC7,0x65,0xC8,0x1D,0x17,0xAD,0x3D,0xC7,0xAF,0x2E,
0xF6,0x33,0xE4,0x2A,0x57,0x17,0x13,0x7F,0x9A,0x1F,0x44,0x2,0xFA,0x9B,0x7D,0x8E,0x5C,0xDF,0xC7,0x57,0xC2,0x61,0x75,
0xB1,0x70,0x75,0xF3,0x4F,0x69,0xE4,0x3E,0x56,0x37,0x6A,0x31,0x72,0xE7,0x9,0xA2,0xA5,0x35,0x72,0xE7,0x5D,
0xF0,0xC0,0x12,0xD1,0x49,0xF7,0x67,0xA4,0x6B,0x72,0x6F,0xEC,0xD,0x86,0xA5,0xA7,0x46,0x9B,0x95,0x7F,0x75,
0xB1,0x33,0xFB,0xDE,0xB1,0x9E,0x51,0x9A,0x4C,0x33,0xB4,0xEE,0xEA,0x62,0x7E,0x54,0xCA,0x86,0xF9,0xD,0xAA,0x5,0xCB,
0xFD,0xC,0xB9,0xFA,0xC1,0x24,0xE6,0xAF,0x19,0xE9,0x9A,0xDC,0x99,0x7C,0xBA,0xFF,0xC1,0x27,0x56,0x17,0x3B,0x93,
0xA9,0xBE,0x3B,0x4B,0x93,0x97,0xD6,0xEA,0x62,0x82,0xE2,0x37,0x65,0xC1,0x82,0x86,0x79,0x65,0xC8,0xFD,0xD0,0x66,0xC4,0xE3,
0xCD,0xFE,0x62,0xF1,0x4B,0xCF,0x86,0x45,0xA3,0x5C,0xA1,0x35,0x5A,0xDD,0xA8,0xD5,0xC5,0xA4,0x7E,0x9C,0x95,
0x7F,0x69,0xAD,0x2E,0xC6,0x30,0x48,0xC,0x11,0xFF,0x30,0xDF,0x56,0x8A,0x9F,0x93,0xBA,0xE3,0x94,0x28,0xF,0xBB,
0x41,0x3B,0x6F,0x12,0x78,0x95,0x13,0xE3,0x97,0x9E,0x2A,0x46,0x61,0x95,0xAB,0x8B,0xFD,0x68,0xED,0xF1,0xE6,0x7B,
0xF,0xA3,0xDC,0x55,0xDA,0x19,0x7F,0x46,0xD0,0xEA,0x62,0xC9,0xD8,0x93,0x6E,0x17,0xF1,0xE5,0xE2,0x9D,0xAE,
0xA6,0x3C,0x81,0xC5,0x7,0x73,0xD8,0x79,0x1};
const char message228[]={0x3E,0xB1,0x96,0x29,0xA4,0x3D,0xE9,0xD8,0x5C,0xB0,0x5C,0x76,0xF0,0xDB,0x33,0x70,0x5D,0x47,0x1A,0x54,0x7A,0x2E,
0xDE,0xE9,0x6A,0x57,0x69,0x46,0x7E,0xA1,0xF7,0x2};
const char message229[]={0xB6,0x35,0xA5,0xC5,0xE8,0xE6,0xAF,0x19,0x17,0x68,0x7B,0x7,0x61,0x3F,0x5B,0x53,0x36,0x77,0xDE,0x20,0x52,
0x3A,0xEC,0x23,0xE4,0xB3,0xCA,0xBD,0x31,0x1C,0xD3,0xA9,0x28,0x42,0xCE,0xD0,0xBA,0x8B,0xF5,0x29,0xD1,0xD6,0xFD,0x63,0x7D,
0xF7,0x4E,0xF9,0xEC,0xFD,0xEC,0xCC,0x38,0xEF,0xDB,0x69,0x93,0xF8,0xE4,0xBD,0x0};
const char message230[]={0xF6,0x17,0xFB,0xD9,0x9A,0xB2,0xB9,0xF3,0x6,0x91,0xD2,0x94,0xC6,0x59,0xAB,0x8B,0x8F,0x5,0x3F,0x7D,0x7E,
0x1C,0x56,0x17,0xB3,0x94,0x95,0x2E,0xE4,0xCE,0xF8,0xB4,0xF8,0xD8,0x1B,0xE1,0x4A,0x2D,0xD7,0xEC,0xEC,0x18,0xA1,
0xB5,0x18,0xE1,0x4C,0x96,0xC7,0x4F,0x69,0x75,0xA3,0x16,0x93,0xE0,0x5A,0xF2,0xEA,0x62,0xA4,0x12,0x4B,0x6B,
0x75,0xB1,0x77,0x32,0xA3,0x96,0xD6,0xEA,0x62,0xDD,0x3A,0xF6,0x58,0x1,0x67,0x4B,0xD3,0x5A,0x5D,0xEC,0x83,0x5C,0xAB,
0xA5,0xB5,0xBA,0xD8,0xF9,0x83,0xEE,0x9E,0x74,0xBB,0x88,0x2F,0x5,0x7C,0x1};
const char message231[]={0x47,0xE9,0xD6,0xC7,0xB3,0xFA,0xCF,0x61,0x6F,0x57,0xD3,0x9A,0xA1,0xAD,0x4D,0xFC,0xF9,0x8E,0x77,0x7B,0xC6,0x59,0x33,
0xF2,0xB,0xBD,0x17};
const char message232[]={0xC7,0xB8,0xDA,0xB0,0x27,0xDD,0xE2,0x63,0xF1,0x4E,0x57,0xAB,0x5C,0x90,0x70,0xBE,0x5C,0xC8,0xC5,0x3B,0x5D,0xAD,
0x2E,0xC6,0xA9,0x84,0xC3,0x9E,0x74,0x73,0x2C,0xF1,0xA9,0x82,0xE5,0xB4,0xA6,0xB4,0x37,0xAA,0xF0,0xC7,
0x59,0xAB,0x9C,0x54,0x2A,0xF7,0xDF,0xBB,0xDA,0x8F,0xD3,0xF0,0xE6,0xCB,0x85,0xDC,0x83,0xD6,0x68,0x51,0xAB,
0x8B,0x19,0xF9,0x85,0x74,0x53,0x5C,0x10,0x29,0x55,0x70,0xAD,0x72,0x26,0x6A,0x75,0xB1,0x9F,0xAD,0x29,0x9B,0x3B,
0x6F,0x10,0x29,0xAD,0x2E,0x3E,0xBC,0x1D,0x23,0x68,0x75,0xA3,0x56,0x17,0xA3,0x74,0x2C,0x97,0xD6,0x62,0xE7,
0xF,0xBA,0x7B,0xD2,0x4D,0x10,0x47,0xB5,0x8B,0xF8,0x52,0xC0,0xF9,0x72,0x21,0xF7,0x43,0x9,0xB4,0xE0,0xE1,0xC1,
0xFB,0xA7,0xE1,0xCD,0xD7,0x2A,0xFC,0xC5,0x8C,0xAB,0xD,0x87,0xF9,0x89,0x7F,0xA2,0x35,0xE5,0x9C,0xE8,0xE8,0x82,0x16,
0xFB,0xD9,0x9A,0xB2,0xB9,0xF3,0x6,0x91,0xD2,0xEA,0xE2,0xE3,0x30,0xE3,0x2A,0x55,0x53,0x36,0xBD,0x17};
const char message233[]={0x3E,0x31,0xA5,0x3D,0xE9,0xD8,0x5C,0xB0,0xDC,0x31,0x9D,0x16,0xD6,0x42,0xA0,0xE7,0x30,0x74,0xF0,0x9F,0x77,0xCA,0x67,0x67,
0xB4,0x46,0xBB,0xDA,0xCF,0xDF,0x3B,0x4F,0x8D,0x83,0xBF,0x29,0x4F,0x0,0x85,0xEC,0x93,0xB,0x4,0x6F,0x3E,0x31,0xA5,
0x5,0x2F,0xBF,0x78,0x83,0x17,0x2C,0xF7,0xA4,0x9B,0x90,0xD3,0x98,0x2F,0x17,0x72,0xCA,0xA4,0x54,0x90,0x4B,
0xDE,0xD5,0xAF,0x6C,0xEE,0x6A,0xBF,0xCA,0x51,0x74,0xB0,0xAB,0xFD,0xAC,0x9F,0xFD,0xC4,0xEC,0xE0,0xD7,0xE3,0xBD,0x0};
const char message234[]={0x47,0xE9,0xFE,0xAC,0xA8,0x8B,0x3F,0xA5,0xC5,0x7A,0x95,0xB2,0x41,0x70,0x98,0x90,0xEB,0x83,0xF,0xFB,0x68,0x51,
0xDA,0x41,0x7B,0x56,0xD1,0xDA,0x82,0xE5,0xC,0xAD,0xBB,0xF7,0x57,0xF3,0xD6,0xF0,0x80,0xBC,0xD9,0x5F,0xFD,0x5,
0xF0,0x1E,0xC4,0xA7,0x85,0x99,0x33,0xB4,0xEE,0xAE,0xD2,0xDE,0x3F,0xEB,0xE2,0xEF,0x62,0x56,0x3A,0x96,0x90,
0x8B,0x51,0x21,0xFA,0x9D,0xF1,0x77,0x66,0x2F,0x6,0x3F,0x87,0x9D,0xD1,0x1A,0xE4,0x6C,0xED,0x7D,0xF,0x53,0xF,0xDE,0x6C,0x59,
0x3A,0xAA,0xAF,0x31,0xFB,0xFC,0xCA,0x20,0xCC,0xD7,0x55,0xF6,0xF9,0xD6,0xA6,0xDE,0x7C,0x62,0x4A,0x8B,0xF5,0x38,
0x6F,0xB0,0x9E,0xD1,0x66,0x82,0xD5,0xD1,0x82,0xE5,0x62,0xA7,0x6B,0xA5,0x9D,0x28,0xC8,0xF5,0xC1,0xDE,0xB};
const char message235[]={0x82,0xE7,0x27,0xFE,0x89,0xD6,0x94,0xF3,0xB0,0x9B,0xC6,0xE2,0x63,0x4F,0x3A,0x1,0x6D,0x6C,0x4,0xCF,0x2E,0x65,0x1C,0xE6,0x27,0x64,
0xF4,0x76,0x5E,};
const char message236[]={0x47,0xE9,0x56,0xFF,0x59,0xE5,0xCE,0x68,0x6D,0x4F,0xBA,0x3F,0xC7,0x67,0xC3,0x61,0x6F,0x57,0xBB,0x98,0x4C,0xD0,
0x38,0x6B,0x17,0xF1,0xF7,0xA4,0xB3,0xB3,0xA3,0x74,0xE3,0x2C,0x3D,0xB1,0xD8,0xDB,0x55,0x25,0x8F,0x11,0xFF,0xFD,
0x78,0x2F};
const char message237[]={0x47,0xE9,0x26,0x3A,0xBA,0xAB,0x8B,0xBD,0x5D,0x55,0xF2,0x61,0x6F,0x57,0xE3,0xAC,0xAB,0x6C,0xEE,0x86,0x28,0x82,
0xC9,0xDB,0x51,0xBA,0x71,0x96,0x9E,0x58,0xF0,0x42,0x7F,0x53,0xC6,0xF1,0xAB,0xAB,0xB4,0xBA,0xCA,0xE6,0x8C,0xFC,
0x42,0x9A,0xA1,0x75,0x77,0x66,0x2F,0x7E,0x10,0x41,0x2E,0xF4,0x2F,0x58,0xAE,0x2E,0x3E,0xA6,0x34,0xCE,0x89,
0x1F,0x44,0xEE,0x63,0x82,0x38,0xAA,0x71,0x1A,0xDE,0xB};
const char message238[]={0x47,0xE9,0x16,0x24,0x5C,0xE5,0xBA,0xAB,0xD9,0x9,0xE6,0x58,0xBC,0xD3,0xD5,0xEA,0x62,0x67,0xF6,0xE2,0x7,0x11,
0xE4,0x42,0xFF,0xF1,0x36,0x36,0x82,0xE7,0xC3,0x3D,0xEC,0x1,0x1D,0x66,0xBB,0xE8,0x67,0xA6,0xB2,0xB9,0xCA,0x31,0x20,0xA7,0x75,
0x58,0x65,0xDA,0x59,0x77,0x73,0x95,0xAB,0x8B,0x9D,0xE9,0x7E,0x3D,0xF1,0xE5,0x61,0x4F,0xBA,0xAE,0xD6,0x66,0x29,0xCB,
0xD5,0xC5,0xCE,0xEC,0xC5,0xF,0xA2,0xFC,0x63,0xD8,0x5D,0xAB,0x5C,0x5D,0x8C,0xA,0xD1,0xF,0x6C,0x2A,0xE3,
0x30,0xD1,0xB5,0xB6,0xBA,0x58,0x43,0x7,0x7F,0xC9,0xD3,0x5A,0xB0,0x9C,0xD6,0xC,0x6D,0x6D,0x46,0x7E,0xA1,0x37,0x9F,
0xF8,0x98,0xD2,0xEA,0x62,0x42,0x3C,0xB3,0xF2,0xAF,0x2E,0xF6,0x8E,0xCF,0x5D,0x34,0x99,0xF9,0x3D,0x1B,0x1B,0xFF,0x17,
0xBB,0xC1,0x92,0xF6,0xA4,0x5B,0xAC,0xC5,0x37,0xB1,0xEF,0xA8,0x20,0x27,0xC4,0xE3,0xBD,0x0};
const char message239[]={0x47,0xE9,0x26,0xBA,0xD6,0x56,0x17,0x6B,0xE8,0xE0,0x1F,0x16,0x34,0x65,0xAA,0xEF,0xCE,0x82,0xDC,0xFB,0x59,0x77,0x35,
0x3B,0xC1,0x1C,0x87,0xBD,0x5D,0xED,0x49,0x37,0xED,0x7B,0x48,0x8D,0x42,0x7B,0x76,0x11,0x7F,0xB1,0xB7,0xFB,0xEF,0xA6,
0x6C,0x8E,0xD2,0xB1,0x5C,0xDD,0xA8,0x3D,0xE9,0x26,0x93,0xBB,0x6A,0x4D,0x85,0xF0,0x76,0x94,0x6E,0x64,0x68,0x9D,
0x77,0x5A,0x4B,0xCB,0xF2,0x5E,};
const char message240[]={0xB6,0xD5,0x45,0x8B,0x91,0xF6,0x62,0xC3,0xCE,0xEC,0xC5,0xF,0xA2,0xFC,0xA3,0x87,0xA,0xFD,0x61,0x75,0xB1,0x86,
0xE,0xFE,0xCE,0xE4,0xFA,0xD9,0x68,0xB1,0xB3,0xB9,0x3A,0xEF,0xEA,0x46,0xD,0x6C,0x86,0x9,0x5A,0xF2,0xEA,
0x62,0x7D,0x28,0xAF,0x29,0x83,0x6E,0x58,0xB5,0x3E,0x3B,0x90,0x7B,0x3F,0xAB,0x8B,0x51,0x21,0xFA,0x81,0x4D,
0x65,0x78,0xB3,0xBF,0xF8,0x98,0xD2,0x62,0x9D,0x68,0x1D,0x2C,0x79,0x75,0xB1,0x77,0x56,0x65,0xBF,0xB4,0x56,0x17,
0x3B,0xB3,0x17,0x3F,0x88,0xF2,0x7B,0x2F};
const char message241[]={0x47,0xE9,0x96,0x22,0x78,0x75,0xB1,0x4E,0xB4,0xE,0x66,0xE5,0x5F,0xCC,0xB8,0xDA,0xE0,0xCD,0x7F,0xF6,0xD8,0x77,
0x54,0xCF,0x8C,0x28,0xFC,0x59,0x2D,0xD,0x5A,0xBA,0x9A,0x95,0x7F,0x31,0xE3,0x6A,0x83,0x37,0xFB,0x1B,0xB5,0x33,
0x7B,0xF1,0x83,0x28,0xFF,0xEA,0xBB,0xF6,0x8C,0x1,0x9,0xB9,0xBA,0x51,0xDE,0x8E,0xD2,0xED,0x6C,0x49,0x58,0x5D,
0xAC,0x13,0xAD,0x3,0xEF,0x5};
const char message242[]={0xC7,0xB8,0xE0,0x3D,0xE9,0x26,0xBA,0xD6,0x56,0x17,0x6B,0xE8,0xE0,0x1F,0x56,0x17,0xA3,0x74,0x2C,0x97,0xD6,0xEA,
0x62,0x67,0xF6,0xE2,0x7,0x51,0xFE,0x29,0xAD,0x77,0xE7,0x5D,0x9F,0x1F,0xFB,0x8,0x22,0xF7,0x95,0x4D,0x6F,0x47,
0xE9,0x46,0xC0,0x62,0xC,0xC8,0x86,0x29,0x4B,0x3D,0xA3,0x94,0xCD,0xD5,0xC5,0xC4,0xF,0x22,0xF7,0x71,
0x18,0xB5,0x34,0xDA,0xB3,0xAF,0xA4,0x6C,0x7A,0xB3,0xBF,0x51,0x33,0xB4,0xB5,0xC9,0xB4,0xF3,0x2};
const char message243[]={0xF6,0x17,0x93,0x99,0x7F,0x4A,0x6B,0x79,0xA,0x21,0xBD,0x17};
const char message244[]={0x47,0xE9,0x26,0x3A,0xBA,0xAB,0x8B,0xBD,0x5D,0x55,0xF2,0x82,0xE5,0x9E,0x74,0x6B,0x4A,0x5,0x5E,0xE5,0x9E,
0x74,0x7F,0x8E,0xCF,0x86,0x2E,0x5A,0x27,0xF5,0xC4,0xAC,0x9F,0xFD,0xEA,0x62,0x9D,0xD4,0x13,0xA2,0x8A,0xF0,0x5E,};
const char message245[]={0xB6,0xD5,0x45,0xB3,0x1C,0xF3,0xB3,0xBA,0x51,0x8B,0x9,0xF1,0x8C,0x72,0x2D,0xBE,0x89,0xA5,0x8,0xA6,0xC5,
0x64,0xE6,0x1F,0xE5,0xA8,0x8F,0xD6,0xEC,0xBC,0x0};
const char message246[]={0xB6,0xD5,0x45,0x8B,0xB5,0xF8,0x26,0x26,0x33,0xFF,0x94,0x67,0xFC,0x74,0xE6,0xAD,0xE9,0x4F,0x1E,0xE5,0x1B,0xBF,
0x3D,0x93,0x38,0xF3,0x47,0x41,0x1E,0x66,0x68,0xDD,0xB5,0xF8,0x26,0x66,0xB6,0x20,0x9A,0xA1,0x2C,0xD3,0x20,0xEF,0x5};
const char message247[]={0x47,0xE9,0x46,0xC0,0x62,0xE7,0xD5,0x9E,0xF1,0x78,0xB3,0xAD,0xF5,0x8E,0x6A,0x67,0x72,0x85,0xF2,0xEA,0x62,
0x7D,0x28,0x8F,0xA,0xD1,0xF,0x6C,0x2A,0x63,0x69,0xAD,0x2E,0x66,0xC5,0x59,0xF9,0x1F,0xEF,0x5};
const char message248[]={0xB6,0xD5,0x45,0xAB,0x8B,0xBD,0xE3,0x73,0x17,0x4D,0x66,0x7E,0xEF,0x5};
const char message249[]={0xB6,0xD5,0x45,0x8B,0x51,0x1F,0xAD,0x1D,0xE6,0x38,0x88,0x5C,0xAF,0x6C,0xEE,0xED,0xAA,0x92,0xF,0x3B,0x5B,0x12,0x56,
0xB9,0xBA,0x58,0x27,0xF5,0x84,0xA8,0x22,0xBC,0x17};
const char message250[]={0xF6,0x17,0xCF,0x8C,0xFC,0xC2,0xDD,0xF8,0xD2,0xCE,0xB};
const char message251[]={0x47,0xE9,0x26,0x93,0xBB,0x6A,0x46,0x70,0xAD,0x72,0x52,0xA9,0xDC,0x7F,0xAF,0x2E,0x7A,0xEF,0x5};
const char message252[]={0xF6,0x17,0xCF,0x28,0x93,0x67,0x68,0x6B,0x7B,0x63,0x74,0x95,0x9F,0x31,0x8C,0x9D,0xF1,0xC9,0x7B,0x1};
const char message253[]={0x47,0xE9,0x46,0xC0,0xEA,0x62,0xEF,0xAF,0xE6,0xAD,0x91,0xE3,0xA6,0xE6,0xAD,0x99,0xA8,0x52,0x36,0x57,0xF7,
0xA7,0x33,0xEF,0xEA,0x62,0x86,0xB2,0x4C,0x83,0xF6,0x61,0xFD,0x38,0xB,0x72,0x75,0x7F,0x3A,0xF3,0xAE,0x93,0x2D,0x4A,
0x1B,0x26,0x1D,0xD5,0x48,0xC4,0x29,0x24,0xEF,0x5};
const char message254[]={0x3E,0x30,0x96,0xD6,0xEA,0x26,0x61,0xF5,0x55,0xDC,0x8D,0xBE,0xC7,0xA7,0x29,0xED,0xD,0x65,0x73,0x8E,0x20,
0xF7,0x7E,0xE6,0xCB,0x85,0x5C,0xB0,0x9C,0xD2,0x3A,0xF8,0xCF,0x38,0x95,0x1E,0xEF,0x5};
const char message255[]={0xF6,0x37,0x9,0x2B,0x23,0x57,0x5F,0xC5,0xDD,0xE8,0x7B,0x7C,0x5A,0x7C,0x8C,0xB3,0xF6,0x86,0xB2,0x39,0x47,
0x90,0x87,0x71,0x1A,0xDE,0xB};
const char message256[]={0xDD,0x53,0x6,0xDD,0xB0,0x8A,0x76,0x1D,0x9B,0xB3,0x7E,0xF6,0xAB,0x8B,0xFD,0x4C,0x6B,0x52,0xA9,0xBE,0xBE,0x5D,
0x61,0x62,0x1A,0xF8,0x53,0x5E,0x5D,0xCC,0x8A,0xB3,0xF2,0x3F,0xB,0x96,0x8B,0x8F,0xF5,0xD9,0x81,0xDC,0xFB,0x59,
0xAC,0xC5,0x37,0x31,0x2A,0x44,0x3F,0xB0,0xA9,0xC,0x6F,0xC7,0xB8,0xE0,0x3D,0xE9,0x66,0xE0,0x63,0x31,0xA1,
0xCA,0xC3,0x9E,0x74,0x33,0x92,0x25,0x3E,0xE4,0x6E,0x1A,0xAB,0x8B,0xBD,0xD1,0x8A,0xC6,0xE8,0xE0,0xCF,0x88,0x26,
0x84,0x5C,0x5A,0xD6,0xEA,0x62,0xA2,0x6B,0xD,0xF,0x79,0x3B,0x4A,0xF7,0x67,0x45,0x5D,0xFC,0x25,0x9F,0x18,0xDD,0x34,
0x20,0xF7,0xA4,0x5B,0xDD,0xA8,0xD5,0xC5,0xE4,0xD7,0x8E,0xB2,0x39,0xD1,0xB5,0x86,0x87,0x16,0x1F,0x3B,0x7F,0x1A,
0xC,0xB9,0x60,0xB9,0xBA,0xD8,0x1B,0xAD,0x46,0x68,0x96,0xE0,0x13,0x5C,0x1F,0xB4,0xE4,0x69,0x79,0x2F};
const char message257[]={0x3E,0xA6,0xB7,0xA3,0x74,0x93,0xC9,0x5D,0x35,0x6,0xE4,0x2A,0xD7,0x32,0x85,0x8B,0xDA,0xBB,0x39,0x88,0x5F,0xB9,
0xE8,0xB0,0x7,0xE5,0xBD,0x0};
const char message258[]={0xF6,0x57,0x69,0x4A,0x8B,0x19,0x68,0x4D,0x30,0x8E,0xE9,0x54,0x14,0x21,0x67,0xC5,0x59,0xF9,0x1F,0x3B,0x2F};
const char message259[]={0xC7,0xE5,0x1B,0xBF,0x62,0x4,0xD0,0x9E,0x74,0xB,0x96,0xA3,0x78,0xE8,0x78,0x1B,0x1B,0xC1,0xF3,0x13,0x32,0xFA,0xC3,0xC,
0x4C,0x10,0x47,0xB5,0x8F,0x13,0xDA,0x81,0x5C,0x5D,0xA5,0x15,0x1A,0xCC,0x1F,0xFD,0xAC,0xFC,0x7B,0xD2,0x79,0x36,0x36,0xFE,
0x2F,0x76,0x83,0x25,0x4D,0x6B,0x95,0x7B,0xD2,0x79,0x2F};
const char message260[]={0xB6,0x35,0x8A,0x87,0x8E,0x9F,0xBF,0x6E,0xF8,0xF5,0x3D,0x6E,0x7E,0xFD,0xD8,0x76,0xCF,0xD6,0x77,0xFE,0xED,0x7D,0x10,0x60,0xB6,0x5D,0x7E,0xE6,0x6B,0x3F,0xFF,0xBE,0xDD,0x39,0xCE,0x77,
0xFE,0x7D,0x7D,0x9C,0x1F,0xDB,0xEE,0xF8,0xF4,0xDB,0x3D,0xBF,0xF3,0x6F,0xEF,0x83,0x0,0xEB,0x8E,0xF,0x7E,0xFC,0xCE,0xDE,0x87,0xF9,0xF7,0xEB,0x77,0x7E,0xFC,0xCE,0xD6,0xAE,0x1D,0xF9,0xD0,0x6D,0xD7,
0x1D,0x5F,0x1F,0xBD,0xD9,0xE5,0x6B,0xEF,0xD3,0xEF,0x71,0xF3,0x63,0xDB,0x3D,0x5B,0xBF,0xC7,0xD9,0x7A,0xFE,0xE6,0xC3,0x3D,0xEC,0x1,0x1D,0x66,0x57,0xD4,0xC5,0x9F,0x2F,
0x57,0xB2,0xE6,0xFC,0x68,0x53,0x7C,0x9D,0x11,0xB4,0x98,0x5D,0x3F,0xF8,0x54,0x3A,0x83,0xD7,0x2B,0x91,0x26,0xC7,0x7F,
0xA6,0xBC,0xEE,0x39,0xBB,0xF3,0x7B,0x3B,0x4A,0x37,0x21,0xC3,0xD8,0xD5,0x7E,0xD2,0x7D,0x65,0x73,0x4F,0xBA,0x3F,0xAA,0x78,
0xA6,0x3C,0xBF,0xE6,0x23,0xD6,0x61,0x17,0xBB,0x68,0x22,0xE4,0x9E,0x74,0x8B,0xB5,0xAC,0x49,0xF7,0x95,0xCD,0xD5,
0xC5,0xE2,0x9F,0x17,0xD9,0xD2,0xD4,0x33,0xDA,0x8,0xF1,0xCF,0xB,0xF2,0x66,0x7F,0x31,0xFF,0x71,0xFE,0x38,0x2C,0xFF,
0xEA,0x62,0xFE,0x43,0xB9,0xE6,0x47,0xCF,0x1B,0x68,0x5D,0x34,0xDF,0xF7,0x1B,0xCF,0x94,0xC6,0x59,0xB3,0xE2,0xCF,0xFA,
0xD9,0xCF,0xDE,0x7D,0x65,0xEF,0x5};
const char message261[]={0x47,0xE9,0x66,0xE6,0x2A,0x57,0x17,0x3,0x9B,0xCA,0xD8,0x8D,0xD6,0x16,0x2C,0xF7,0xA4,0x5B,0x90,0x70,0xDD,
0xD5,0xEC,0x4,0x73,0xCC,0xCA,0x3F,0x11,0xBF,0x57,0x22,0x4D,0x5E,0xE5,0xA,0x54,0x82,0xE5,0xD7,0xE,0x96,0x8C,
0xA5,0xB5,0xBA,0x98,0xA5,0xAC,0x74,0x21,0x77,0xC6,0x27,0x6F,0xFE,0x2F,0x26,0xFE,0x14,0x93,0x40,0x7B,0xD2,0xAD,
0x42,0x88,0xD5,0xC5,0xFA,0x94,0x68,0xEB,0xFE,0xB1,0xBE,0x87,0x19,0x57,0xCF,0x3B,0xA5,0x29,0x8F,0x1,0xB9,0xB4,0x56,
0xA0,0x52,0x36,0xF7,0x86,0x95,0x1F,0x7B,0x43,0xD9,0x1C,0x5D,0x15,0x45,0x48,0x6F,0xFE,0x2F,0x16,0xE6,0x7,0x68,
0x86,0xD6,0xDD,0x93,0x6E,0x75,0xA3,0x16,0xAB,0xAF,0xE2,0x2A,0x57,0x17,0xF3,0x1F,0xCA,0x35,0x3F,0x7A,0xDE,
0x40,0x9B,0xEF,0xFB,0x8D,0x67,0x86,0xB6,0xB6,0x37,0x26,0xE2,0x5B,0x38,0x6B,0x56,0xFE,0xD5,0x8D,0xF2,0x66,0x7F,0xB1,0xFA,
0x2A,0xAE,0x2E,0x3E,0x56,0x21,0x4,0x2D,0x19,0xBB,0xE9,0xFE,0x82,0xE5,0xEA,0x62,0x67,0xFC,0x19,0xDA,
0xDA,0x92,0xDB,0xB3,0x8F,0x63,0x3A,0xFD,0x58,0xAF,0x9C,0x7F,0x21,0x5,0x71,0x54,0x3D,0xB8,0x68,0x95,0xAB,0x8B,0xBD,
0x7F,0x8,0x41,0x9E,0xCD,0xB};
const char message262[]={0x76,0x45,0x5D,0xFC,0xF9,0xD1,0xA6,0xF8,0x3A,0xEA,0xB5,0x81,0xF6,0xFE,0x19,0xB2,0x3D,0x33,0x2E,0x78,0x17,0x23,
0x80,0xF6,0xA4,0x3B,0x7E,0x5A,0x5D,0xB4,0xBA,0x98,0xA5,0x9F,0x6A,0xA5,0x3D,0xF6,0xA4,0xDB,0x8D,0xE,0xD6,0xA3,
0x46,0xCA,0x27,0xF6,0xA4,0x9B,0x91,0x5F,0x8,0x39,0xE5,0xF9,0x35,0x1F,0xB1,0x56,0xF7,0x3,0x7B,0x10,0x9F,0x16,
0x66,0x7A,0x3B,0x4A,0xB7,0xF8,0xD8,0xD,0x51,0x7C,0x56,0x39,0x2,0x76,0xB5,0x5F,0x65,0x7A,0xF3,0x89,0x2E,0x5A,
0x8C,0xF5,0xC4,0xFA,0x60,0xCF,0xC6,0x46,0xF0,0xFC,0xF6,0xDA,0x34,0xE,0xB3,0xED,0xEA,0x47,0xB9,0x1B,0xA2,0xF8,0xAC,0x6E,0xD4,
0xBA,0x9B,0x72,0xD1,0x5A,0x1A,0x90,0xEB,0xB1,0xCA,0xF5,0x40,0xED,0x49,0xB7,0x30,0x43,0xD9,0x8E,0x8D,0xCD,0x51,0xBA,
0xDD,0xE8,0x60,0x31,0xEB,0x2B,0x58,0xB6,0x67,0xE7,0x8D,0x9A,0x95,0x7F,0x31,0xB,0xC6,0x7A,0x65,0x57,0x20,0x6F,0x76,
0x45,0x5D,0xFC,0xF9,0xD1,0xA6,0xF8,0x3A,0xA5,0xC5,0xEC,0xFA,0xC1,0xA7,0xD2,0x19,0x7C,0xD8,0xDB,0xD5,0x5A,0x76,0x40,
0xAB,0x8B,0xF9,0xBE,0xDF,0x78,0x16,0x2C,0x77,0x95,0x66,0x7D,0x5,0x4B,0x5A,0x5D,0xEC,0xB8,0xA4,0x5E,0x59,0x83,
0x69,0xF1,0xB1,0x1B,0xA2,0xF8,0xAC,0x72,0x37,0x3A,0xD8,0xD5,0x7E,0x75,0xF1,0x31,0xE3,0x82,0x77,0xB1,0x33,
0x7B,0xD0,0xDE,0x71,0xA,0x67,0xFD,0xEC,0xE7,0xD7,0x7C,0xC4,0xF2,0x66,0x7F,0xC1,0xB3,0x2B,0xEA,0xE2,0xCF,0x8F,0x36,0xC5,
0xD7,0x15,0x5A,0xA3,0x3D,0xE9,0x56,0x37,0x6A,0xA4,0x7C,0x62,0x2D,0xA8,0xF6,0x20,0xFE,0xEA,0x62,0xA4,0xE5,
0xA2,0x34,0x79,0x37,0x68,0x46,0x7E,0x2,0x43,0x4E,0x79,0x7E,0xCD,0x47,0x2C,0x6F,0xFE,0xB3,0xC7,0x38,0x4A,0x93,
0x69,0xC1,0x72,0xE8,0x45,0xFD,0xA0,0xDD,0xE8,0x60,0x4,0xAE,0xF5,0xC1,0xCF,0x48,0x54,0xD0,0x2A,0x8D,0xF8,
0x72,0x75,0x31,0xFF,0xE,0x2,0xED,0xBC,0xC1,0x8C,0x46,0x87,0x55,0x8E,0xDC,0xEF,0xE0,0x59,0x5D,0xE8,0x9F,0x72,
0xE1,0x83,0x8A,0xBC,0xF9,0x9,0x7E,0x66,0xE4,0xFF,0x8F,0xB2,0xB9,0xBA,0xCA,0x26,0x2D,0x3E,0x56,0x21,0x54,0x36,
0x27,0xB6,0x38,0x31,0xE5,0xF9,0x35,0x1F,0xB1,0xC6,0x69,0x78,0xB3,0xBF,0xE0,0xC3,0xEC,0x8A,0xBA,0xF8,0xF3,0xA3,0x4D,0xF1,
0x75,0x14,0xF,0xED,0x62,0x37,0x68,0x95,0x33,0x73,0xEF,0x38,0x85,0xAB,0xDC,0x55,0x1A,0x89,0xFA,0xB5,0x5C,
0xB4,0xC1,0x6E,0xFC,0x53,0x9,0xE4,0xD9,0xD8,0x8,0x9E,0x9F,0x67,0x12,0xF1,0xE7,0xB7,0xD7,0xA6,0x71,0xFC,0xD4,0xDA,0x93,0x6E,0x66,
0x4E,0x79,0x7E,0xCD,0x47,0xAC,0xC3,0xC4,0x86,0x20,0xEC,0x8D,0x9D,0xF1,0x61,0xB9,0x66,0xE7,0x5};
const char message263[]={0x76,0x45,0x5D,0xFC,0xF9,0xD1,0xA6,0xF8,0x3A,0xA5,0xC5,0x2A,0x5A,0x5B,0x1F,0x7C,0x58,0xBC,0xD3,0xD5,0x4,0x7E,0xF7,0xF7,
0x20,0x3E,0x2D,0x9B,0x3C,0xCC,0xD0,0xBA,0x33,0xAE,0x16,0x76,0x43,0xFF,0x82,0xE5,0x62,0x6F,0xC4,0x97,0xDE,0x7C,
0x62,0x37,0x68,0x4D,0x3B,0x90,0xB3,0xF2,0x2F,0x3B,0xF8,0xEB,0xE6,0xB1,0x7B,0x10,0x9F,0xA6,0xBC,0xEE,0x39,0xBB,0xF3,0x1F,
0xA6,0x3C,0xBF,0xE6,0x23,0xD6,0x82,0xE5,0x9E,0x74,0xEB,0x51,0xBB,0xDA,0xAF,0x2E,0x3E,0x26,0xDD,0x57,0x36,0xF7,
0xA4,0xFB,0xEB,0x95,0x48,0x93,0xA7,0xBC,0x6E,0x75,0x9B,0x63,0x5,0x8E,0xF7,0x2};
const char message264[]={0xF6,0x17,0xEB,0xFE,0xB1,0xBE,0x53,0x9A,0xC4,0xD7,0xE,0xE4,0xAC,0x9F,0xFD,0xEA,0x62,0x7D,0x4A,0xB4,0x75,0xFF,0xD8,0xC3,0xB4,
0xBA,0x68,0x4D,0xCD,0x5B,0xB,0x96,0x23,0x31,0x7F,0x3D,0xDE,0x8E,0xD2,0xAD,0xA9,0x10,0xAB,0xAB,0xB4,0x33,0xBE,0xF7,
0x2};
const char message265[]={0xF6,0x37,0x9,0x8B,0x8F,0x9D,0xF9,0x45,0x2,0x2D,0xAD,0x59,0xF9,0x7B,0xFC,0xF5,0xC9,0x42,0x3A,0xAC,0x77,0x7D,0xAF,
0x96,0x42,0x1E,0x76,0xB3,0x49,0x65,0x73,0xB1,0xF3,0x27,0x91,0x37,0x81,0xE1,0x3F,0xD3,0x5E,0xFC,0x20,0xD2,0xE,0x8E,
0x9F,0xBF,0xE3,0xD0,0xA3,0x7F,0xE3,0xAF,0x6E,0xD4,0x9E,0x74,0xBB,0xD1,0xC1,0x2A,0x27,0x15,0x9E,0xBF,0xBD,0x0};
const char message266[]={0xB6,0xD5,0x45,0xAB,0x8B,0xF5,0xE9,0xB8,0x42,0x99,0x54,0xC2,0x9B,0xF,0xBC,0xBA,0x58,0xA5,0xB8,0xB4,0xA6,
0xB5,0xBA,0xF8,0x98,0xD2,0xEA,0x62,0xE7,0x75,0xFF,0xBC,0x4B,0x6B,0x75,0xB1,0x78,0xBF,0xF1,0x78,0x2F};
const char message267[]={0xB6,0x35,0xA5,0x51,0x39,0x66,0x65,0xB3,0x3D,0x93,0x38,0xF3,0x47,0x41,0xCE,0xD0,0xBA,0xB,0xAA,0x9F,0x2D,
0x4D,0x3D,0xA3,0x8D,0xD4,0x64,0x5A,0xB0,0x9C,0xA5,0xA6,0xFB,0xA0,0xC3,0x2C,0x65,0xB4,0x67,0x67,0xFC,0xE,0xE4,0x94,
0xD7,0xC7,0x7F,0x37,0x78,0xEB,0x4E,0x88,0x5A,0xD1,0x68,0x1F,0xE2,0x7,0x81,0x6B,0xD1,0x1A,0xCC,0xFC,0x7A,0x46,
0x1B,0x9D,0x60,0xD0,0x2C,0xD7,0xDA,0xD2,0x5A,0x5D,0xCC,0x8F,0x4A,0xD9,0x30,0x5F,0x13,0xA3,0xA7,0x7F,0x67,0x53,0xEA,
0xBD,0x17};
const char message268[]={0xC7,0xB8,0xE0,0x3D,0xE9,0x56,0xFF,0x59,0xE5,0xC0,0x85,0xBF,0xBA,0x98,0xEF,0xFB,0x8D,0xE7,0xB0,0xBA,0xD8,0xD,
0x96,0x4F,0x1F,0x3C,0xBA,0xE9,0x8A,0x16,0xB5,0x27,0xDD,0xF1,0x7B,0xD2,0x4D,0x26,0x77,0xD5,0x1C,0x4B,0x7C,0xAA,
0x60,0xB9,0x98,0x91,0x5F,0x1E,0xF6,0x76,0xB5,0x8B,0x9D,0xD,0xF1,0xDB,0x33,0x99,0xA0,0x71,0xD6,0x8C,0xE0,0xDA,
0x93,0x6E,0x95,0x33,0x73,0xCA,0xA4,0x12,0xDE,0xB};
const char message269[]={0x47,0xE9,0x56,0xFF,0x19,0x89,0x8,0xA1,0xB2,0x39,0x43,0xEB,0xAE,0x2E,0x76,0x83,0xE5,0xD3,0x7,0x1F,0xE6,0x58,
0xE2,0x53,0x5,0x4B,0x65,0x73,0xD6,0xCF,0x7E,0x57,0x69,0x62,0x54,0x2A,0xED,0x2A,0x8D,0xA3,0xC7,0x94,0xE6,0x3F,
0x5A,0x27,0x2A,0x3F,0x16,0x2C,0xC7,0x59,0xEB,0xDD,0x79,0xD7,0xE7,0x87,0x37,0x9F,0x98,0x4C,0xD0,0x38,0x6B,
0x4,0xF4,0xEB,0xE0,0x3F,0xA3,0x3E,0x7E,0x1D,0xF6,0x7E,0x56,0x17,0x33,0xE2,0xF1,0x3C,0xEF,0x5};
const char message270[]={0x3E,0xB1,0x1B,0x34,0xCE,0x55,0x32,0xB9,0x8F,0xC3,0xC4,0x9F,0xEF,0x78,0xB7,0x67,0x17,0x53,0x1A,0x67,0x2D,
0xD6,0x27,0xB,0xBD,0xF9,0xC4,0x7A,0x47,0xB5,0x37,0x16,0xBC,0xFC,0xE2,0xD,0xDE,0xF,0x25,0xC8,0x29,0xAF,0x2E,
0x16,0xEF,0x37,0x9E,0xC3,0x2A,0x77,0xD1,0xC4,0x59,0x5F,0xE3,0xD3,0xC,0xAD,0xBB,0x8B,0xE8,0x3C,0x33,0xF2,0xB,0xBD,
0xF9,0xC4,0x94,0x26,0xB6,0x74,0xE6,0x55,0x36,0x17,0xA3,0x3E,0x5A,0x9B,0x19,0x5F,0x82,0xF,0x3B,0x5B,0x12,0x56,
0xB9,0xBA,0x18,0xB8,0x7E,0xF0,0x89,0xC3,0x2E,0xA6,0x34,0x32,0x10,0xA5,0x6C,0x2E,0x58,0xAE,0x77,0x54,0xBB,
0xD1,0xC1,0x1A,0xAC,0xDA,0x55,0xDA,0x8D,0xB7,0xD6,0xD0,0x8,0xC6,0xC5,0x87,0x37,0x9F,0x18,0x89,0x8,0x21,
0x4D,0x8C,0x4A,0xA5,0xC3,0x2E,0x26,0xFE,0x7C,0xC7,0xBB,0x3D,0x3B,0xB3,0x7,0xCD,0xFA,0xD9,0xAF,0x2E,0x76,0xD5,0xBC,
0xEB,0x44,0x6B,0x78,0xBC,0x17};
const char message271[]={0xFE,0xA3,0x75,0xA2,0xF2,0x63,0x62,0x38,0x2,0xED,0x2A,0xCD,0xC8,0x2F,0x5C,0xB0,0x1C,0x67,0xE9,0x9,0x5A,
0x5D,0xEC,0x8C,0x7F,0xFC,0x2E,0x46,0xE7,0x47,0xF4,0x34,0x43,0xEB,0x4E,0x90,0x7C,0x16,0x2C,0xF7,0x1D,0xD3,0x2A,0x77,
0xA3,0x83,0xC5,0xCE,0x96,0x84,0xBF,0x96,0x29,0x5C,0xE5,0xB4,0xBC,0x17};
const char message272[]={0x3E,0xB1,0xF,0x11,0x51,0xB4,0x98,0x91,0x5F,0x1E,0x3F,0x7F,0x7D,0x74,0x9D,0x57,0x39,0xFC,0x1D,0xE6,0xAF,0x8F,0xAE,0xF3,0x2A,
0x87,0x3F,0x6F,0x3E,0x31,0x2,0x7A,0xDA,0x47,0xB4,0xF6,0xC,0x76,0x9F,0x5A,0x90,0x7B,0x3F,0xAB,0x8B,0xD9,0xDA,0xFB,0xAE,0xFB,0xC7,
0xFA,0x7A,0x2F};
const char message273[]={0x47,0xE9,0xD6,0x87,0x10,0xBB,0xDA,0xCF,0xB1,0xC4,0xA7,0xA,0x96,0xAB,0x1B,0xB5,0x27,0xDD,0xCE,0xE0,0x55,0x8,
0xB1,0xAB,0xFD,0xAC,0xFC,0x8B,0xC9,0xAF,0x1D,0x78,0xF3,0x89,0x69,0xDF,0x43,0x6A,0x14,0xDA,0x33,0x41,0x5C,0x2F,0xD2,
0x92,0xDF,0x19,0x5F,0x7A,0x3B,0x4A,0x37,0x13,0x35,0xE5,0xCA,0xD5,0xC5,0xE4,0xD7,0xE,0x7E,0x17,0x8D,0x10,
0xB5,0x60,0x39,0xF9,0xB5,0x83,0x55,0x1A,0xF1,0x25,0xAD,0x2E,0xC6,0x88,0xFF,0x7E,0xD6,0x9D,0x6C,0xD,0x13,0xF4,0x87,
0xCA,0x38,0xAC,0xD2,0x88,0x2F,0x69,0xDD,0xD5,0xE8,0x80,0x73,0x75,0xC1,0xBB,0x8,0xB9,0x77,0x9C,0xC2,0x55,0x1A,0xF1,
0x25,0xAD,0x2E,0xE6,0xDB,0x51,0xB3,0x69,0x70,0xAC,0x85,0x10,0xB4,0x60,0xB9,0xCA,0xD5,0xC5,0xFC,0xC7,0xF9,0x63,
0x61,0x86,0xB2,0x37,0x5B,0x5E,0x5D,0xEC,0x6,0x4B,0x5A,0x5A,0x8B,0x89,0xDA,0xB2,0xD6,0x54,0x88,0x3D,0xE9,0xE,
0xD3,0xEA,0xA2,0xC5,0xC4,0x8F,0xAA,0x67,0xB0,0xFB,0xD4,0x52,0x36,0xF7,0x55,0x62,0xC9,0xAB,0x9B,0x84,0x95,0xA1,
0x54,0xCF,0x7E,0x86,0x24,0x6F,0xFE,0xA3,0x75,0xA2,0xF2,0x63,0x4A,0x93,0x68,0x6A,0xDE,0x82,0xB4,0x33,0xDF,0x5A,
0x5D,0xC,0x2C,0x77,0x31,0xEA,0xB5,0x81,0x56,0xB9,0x27,0xDD,0x61,0x17,0x33,0xB4,0xB5,0x35,0xD4,0x9E,0x74,
0x3,0x17,0xFE,0xEA,0x62,0xF1,0x7E,0xE3,0xF1,0x76,0x94,0x6E,0x37,0x3A,0x58,0x5D,0x4C,0x7B,0xF1,0x83,0x48,0x93,
0x97,0xD6,0x2E,0xE2,0x2B,0x9B,0x8B,0xF5,0xA8,0x68,0x4D,0xCF,0x51,0x3A,0x96,0x33,0x2E,0x78,0x17,0x33,0x51,
0xB4,0x74,0x35,0xEB,0x67,0xBF,0xBA,0xD8,0x19,0xDF,0x7B,0x1};
const char message274[]={0xF6,0x17,0xCF,0xE2,0x63,0xE2,0x8F,0x47,0xD9,0xF4,0x76,0x94,0x6E,0x32,0xB9,0x66,0x4,0xD7,0x2A,0x27,0x95,0xCA,
0xFD,0xF7,0xEA,0xA2,0xF7,0x5E,};
const char message275[]={0x47,0xE9,0x76,0xA3,0x83,0xC5,0xCE,0x86,0xF8,0xEB,0x28,0x8C,0xA5,0xB5,0xBA,0xD8,0x1B,0xE1,0x4A,0x2D,0xD7,0xE6,
0xDB,0x51,0xB3,0x69,0x70,0xEC,0xC,0xAA,0x86,0x5,0xCB,0xD5,0xC5,0x5A,0x8,0x41,0x7B,0x83,0x54,0x62,0x5A,
0xDE,0x8E,0xD2,0x2D,0x1A,0xE5,0x8,0x98,0xBD,0xFB,0xCA,0xB,0x96,0xF3,0xEF,0x44,0x7C,0x33,0x96,0xBC,0xBA,0xD8,
0xD5,0xD6,0xF6,0xC6,0x55,0x96,0xAB,0x8B,0x9D,0x5A,0x8F,0xF7,0x2};
const char message276[]={0xF6,0x17,0xA3,0xA,0xFD,0xB4,0xF8,0x58,0x1F,0x12,0x4B,0x6B,0x54,0xC9,0x58,0xB0,0xDC,0xD9,0xB4,0x7F,0xAF,
0xD2,0x88,0x2F,0x69,0x75,0x31,0x70,0xFD,0xE0,0x13,0x4B,0x6B,0x75,0xB1,0x78,0xBF,0xF1,0x78,0x2F};
const char message277[]={0xB6,0x35,0x2,0x7A,0x1A,0x65,0x53,0x79,0xD8,0xDB,0xD5,0xB4,0xA6,0xB4,0x14,0xC1,0xE3,0x34,0xBC,0x17};
const char message278[]={0x3E,0x31,0x99,0xA0,0x71,0xD6,0x5A,0xA6,0x70,0xCA,0x85,0xF,0x2A,0x48,0xEF,0x5};
const char message279[]={0xBE,0xB5,0xBA,0x4A,0xBB,0xE9,0xFE,0x61,0xB1,0x1F,0xCF,0xD2,0x5A,0x53,0xF3,0xD6,0xC0,0x85,0xAF,0x6C,0xCE,0xFA,
0xD9,0xAF,0x2E,0x26,0xE6,0xAF,0x68,0xD3,0xD6,0x5C,0xAF,0x1C,0x5,0x9A,0xD4,0x8F,0xB3,0xDA,0xB3,0xBA,0x18,
0x9,0xD1,0x50,0xC9,0xE4,0x4D,0xD0,0xFF,0xED,0xBC,0x0};
const char message280[]={0xB6,0x35,0x2,0x7A,0x5A,0xCB,0x33,0xDA,0xFA,0xF8,0xEF,0x6,0xEF,0x5};
const char message281[]={0xB6,0xD5,0x45,0x8B,0xB1,0x9E,0x98,0xD8,0xE2,0x84,0xF7,0x2};
const char message282[]={0x47,0xE9,0x46,0xC0,0x62,0x7D,0x98,0xAC,0x96,0x9E,0xE0,0x5A,0x47,0x61,0x2C,0xAD,0xD5,0xC5,0xBA,0xFB,0x43,0x83,
0x17,0x2C,0xD7,0x9D,0xAC,0xD2,0xE0,0xF9,0x36,0x91,0x96,0xBC,0xBA,0x58,0x19,0x39,0x52,0x9,0x5A,0x5A,0xAB,
0x8B,0x75,0xA2,0x35,0x3C,0xDE,0xEC,0x2F,0x76,0x5C,0x9E,0xA7,0x46,0x8F,0x96,0x8C,0x29,0xAD,0x2E,0x76,0xD5,0xBC,
0xA0,0x5A,0x9F,0x8E,0x2B,0x94,0xC7,0x88,0xFF,0x7E,0x16,0x2C,0xA7,0xB4,0xE,0xFE,0x33,0x4,0x3D,0xAB,0xDC,
0xC7,0x99,0x26,0xAB,0x40,0xD8,0xFB,0x99,0x16,0x8D,0x6E,0x88,0xF0,0x5E,};
const char message283[]={0x47,0xE9,0xF6,0x11,0x72,0x94,0x3D,0x8C,0x8B,0x8F,0xD5,0xC5,0xB3,0xF8,0xD8,0x1B,0xCA,0xE6,0xDE,0x4E,0x9B,
0x54,0x36,0x17,0x63,0x18,0xEB,0x84,0x6B,0x75,0xFC,0xEA,0x62,0xD9,0xE4,0x92,0xB1,0xBA,0x1F,0x51,0x60,0xC8,
0x55,0xEE,0xCC,0xD6,0x42,0x24,0x2C,0x58,0xCE,0x8,0x9A,0x44,0x9F,0x4D,0xE9,0x42,0x7A,0x2F};
const char message284[]={0xF6,0x17,0x1F,0x8B,0x8F,0xD5,0xFD,0xC0,0x42,0x24,0xD0,0x61,0x75,0xB1,0x13,0x5C,0x3F,0xDA,0x92,0x31,
0xA5,0x1D,0xD3,0x69,0x61,0x2D,0xBE,0x89,0x5,0xCB,0x29,0xAD,0x69,0xED,0xFD,0xCC,0x50,0x96,0x69,0xD0,0x82,0xE5,
0xCE,0x60,0xD9,0x40,0xDE,0xB};
const char message285[]={0xC7,0x65,0x1F,0xC,0x3A,0xA6,0xC3,0x61,0xF5,0x83,0x49,0x4B,0x93,0xA3,0xED,0xB8,0xEC,0x83,0x41,0xC7,0x74,0x58,0xB0,
0x5C,0x77,0xB3,0xAE,0x9E,0xDE,0xB};
const char message286[]={0xF6,0x17,0x1F,0x8B,0x8F,0x51,0xFD,0x60,0x13,0x6B,0x30,0xC1,0x92,0x96,0xBC,0xBA,0x98,0x1F,0x47,0xCA,0xE8,
0x5A,0x9F,0x8E,0x2B,0x94,0xBD,0xF9,0xCF,0x1E,0xA3,0x78,0x56,0x17,0x1F,0x8B,0x8F,0x19,0x5A,0xE7,0x5,0xAD,
0x2E,0x3E,0xE,0xCB,0xBA,0xF8,0xA3,0x78,0x16,0x4D,0xC1,0xB4,0x1B,0x1D,0xAC,0x5,0x4B,0xC8,0xD5,0xC5,0x87,
0xE7,0x79,0x13,0xD4,0xF1,0x79,0x97,0xD6,0x38,0x99,0xC0,0x4,0x3B,0x2F};
const char message287[]={0xF6,0x17,0x93,0x5F,0x3B,0x58,0xA5,0x11,0x5F,0xD2,0xEC,0xDD,0x57,0x9E,0xD2,0x1C,0xA3,0x3,0x2E,0xCB,0x35,0x6F,0x47,
0xE9,0x66,0x6A,0x7,0xAB,0x8B,0x75,0xFF,0x58,0xDF,0x9D,0xF1,0xF7,0x8E,0x53,0xB8,0xCA,0x75,0x57,0xB3,0x13,0xCC,0xB1,0x60,
0xB9,0x42,0x6B,0xBB,0xF8,0x8B,0x77,0xBA,0x5A,0x5D,0xEC,0xFD,0x43,0x88,0x85,0x14,0xC4,0x51,0xF5,0xE0,0x22,0x6F,0x47,
0xE9,0x46,0x22,0x58,0xAE,0x2E,0xC6,0xB0,0xBB,0x66,0xC1,0x98,0x8C,0x87,0x26,0x7E,0x88,0xF1,0x95,0xCD,0x3D,0xE9,
0x3E,0xA1,0x59,0xAB,0x5C,0x85,0x10,0x8B,0x59,0xF8,0xFF,0x59,0xA5,0x11,0x5F,0xD2,0xFC,0x9A,0x8F,0x58,0xB,0x96,
0xAB,0xAB,0x2C,0x54,0x36,0x17,0xEF,0x74,0xB5,0xBA,0x98,0x7F,0x6D,0xC2,0x75,0xC3,0x51,0xED,0x47,0x6B,0xCF,0x82,0xE5,
0x8C,0x1B,0x35,0xBB,0xA2,0x2E,0xFE,0xFC,0x68,0x53,0x7C,0x1D,0x85,0xCA,0xC5,0x3B,0x5D,0xAD,0x2E,0x46,0xA2,0x82,
0x3C,0x1B,0x1B,0x1,0x82,0xC8,0xC8,0x2F,0x67,0xE5,0x9F,0x18,0xBF,0x26,0x70,0x8F,0x9F,0x7F,0x9F,0xB6,0x82,0xA,0xEA,0x43,0xF7,0xFC,0xDA,0xFB,0x9C,0x5D,0x7E,0xFD,0xF8,0xF5,0xD1,
0xAF,0x8F,0xC7,0xD9,0xFA,0x7D,0x1};
const char message288[]={0xF6,0x37,0x9,0x8B,0x8F,0x19,0xDA,0xE4,0x44,0x24,0x2B,0xC8,0x7B,0x1};
const char message289[]={0xB6,0xD5,0x45,0x8B,0x59,0xA1,0xFF,0x59,0x8B,0x6F,0x62,0xC1,0x72,0x62,0x1A,0xF8,0x96,0x6B,0xA3,0x42,0xF4,0x3,
0x9B,0xCA,0xF0,0x66,0x5B,0x5D,0xB4,0xE4,0x5,0xCB,0x69,0x75,0xD1,0xFA,0xEC,0x28,0x9B,0xAB,0x8B,0x35,0x65,0xD0,
0xD,0xAB,0x68,0xCA,0x8B,0xD6,0x96,0xD6,0xEA,0x62,0x56,0x9C,0x95,0xFF,0x19,0xA7,0xE1,0xBD,0x0};
const char message290[]={0xB6,0xD5,0x45,0x8B,0xF5,0xC1,0x2E,0xDA,0x3A,0xD1,0x3A,0x58,0xF2,0xEA,0x62,0xEF,0xAC,0xCA,0x7E,0x69,0xAD,0x2E,
0x16,0xFA,0x77,0x66,0x2F,0x7E,0x10,0xE5,0x5F,0x5,0xB,0xBD,0x17};
const char message291[]={0xFE,0xEC,0xCA,0x3F,0xE5,0xD5,0x8D,0x1A,0x35,0x40,0x5C,0x5A,0x93,0x88,0xBA,0x87,0x19,0x37,0x6A,0xF2,0x23,0x7A,
0x5A,0x1F,0xCF,0xCE,0xEC,0x71,0xB0,0x39,0xC6,0x5,0xCF,0xC0,0x6E,0x74,0x30,0xBA,0xCE,0xB2,0x1A,0xE4,0xD2,0xB2,0x56,0x57,
0x69,0x7D,0xFE,0x8A,0xB6,0x33,0xB5,0x79,0x9E,0xE7,0xEF,0x5};
const char message292[]={0xB6,0xD5,0x45,0xA3,0x72,0xA7,0xD0,0xCE,0xB};
const char message293[]={0x47,0xE9,0x26,0xBA,0x1A,0x65,0x8F,0xC9,0x9F,0x22,0x2D,0xAD,0xA5,0xB6,0x29,0xAF,0x2E,0xD6,0x89,0xD6,0x81,0xF7,
0x2};
const char message294[]={0xF6,0x17,0x1F,0x8B,0x8F,0x19,0x1F,0x7C,0x5E,0xD0,0xD2,0x9A,0x54,0xCB,0xC2,0x7,0xD7,0x48,0x5,0x2,0x2D,
0x58,0x2E,0x78,0xA9,0xD,0xDF,0x7B,0x1};
const char message295[]={0x3E,0xA6,0x9D,0xF9,0x18,0xCC,0xB1,0x3E,0x9E,0x31,0x20,0xA7,0xE5,0xBD,0x0};
const char message296[]={0x82,0xE7,0x63,0x30,0xC7,0x61,0x67,0xF0,0x6C,0x27,0x36,0x4,0x61,0xEF,0xFC,0x3F,0x8D,0x3D,0xE9,0x46,0xD9,0x63,0x95,
0xD9,0x48,0x40,0x1B,0xC1,0x3B,0x2,0x1D,0xF6,0x76,0x35,0x99,0xE3,0xAC,0x35,0x44,0x7,0xAB,0x8B,0x7E,0xF1,0xD3,0xB1,
0x5C,0x58,0x85,0xBF,0x27,0xDD,0x2C,0x65,0xA5,0xEB,0xBD,0x0};
const char message297[]={0xFE,0xAF,0xF2,0x63,0xE7,0x5};
const char message298[]={0x2,0x7C,0x54,0x3D,0xCB,0x2F,0x95,0xE3,0x3F,0xDE,0xB};
const char message299[]={0x3E,0xE6,0x61,0x4F,0xBA,0x59,0x40,0xDB,0x93,0x6E,0x46,0xBA,0x26,0xF7,0xFE,0x8,0xE1,0xB4,0xBC,0x17};
const char message300[]={0x47,0xE9,0x76,0x55,0x62,0x4F,0xBA,0x4F,0x68,0xD6,0xAC,0x9F,0xFD,0xEA,0x62,0x37,0x58,0x6A,0x1F,0xBC,0x60,
0xB9,0xFA,0xCF,0x2A,0x97,0x22,0x78,0x75,0x31,0x99,0xF9,0x97,0xD6,0xEA,0x62,0x74,0x21,0xF,0x7B,0xBB,0x9A,
0xD6,0x94,0xD6,0xF2,0x14,0x42,0x7A,0x2F};
const char message301[]={0x47,0xE9,0x6,0xBB,0xA3,0x57,0xC6,0xEA,0x62,0x67,0xFC,0x5,0xCB,0x3D,0xE9,0x66,0x29,0xCB,0xC5,0xA8,0x8F,0xD6,
0x26,0xC4,0xE3,0x4D,0x80,0x9F,0xEF,0x78,0xB7,0x67,0xFE,0xA3,0x75,0xA2,0xF2,0x63,0x2D,0xA9,0xA6,0x35,0xE3,0x82,0x77,
0x31,0x33,0x6B,0xE9,0x6A,0x69,0xAD,0x2E,0x76,0xC6,0xF7,0x5E,};
const char message302[]={0x36,0xBE,0xEB,0x93,0x85,0x23,0x80,0xF6,0xA4,0x5B,0xB0,0xDC,0x1B,0xA6,0x32,0xAD,0x72,0x74,0xD3,0xD5,0xFC,0xA5,
0x2B,0x52,0x89,0xC3,0xD2,0x15,0xA9,0x84,0x1D,0x7F,0x3B,0x4A,0x37,0x9,0x4B,0x59,0xB,0xED,0xD9,0x19,0xDC,0x55,0x33,
0x51,0x53,0xDE,0x57,0xF3,0xD6,0x38,0x8D,0x6E,0x6F,0x4F,0xBA,0xD1,0x4D,0xD7,0xE4,0xE4,0x7,0xD1,0x94,0x47,0xD9,
0xA3,0xAE,0xB2,0xB9,0xCA,0x45,0x27,0x55,0xEE,0xD,0x65,0x73,0xDA,0xF7,0x90,0x1A,0x85,0xF6,0xEC,0xE3,0x4C,0x93,
0x55,0x20,0xC8,0x5,0x8D,0xB2,0x47,0x32,0x66,0xE5,0x87,0x9A,0xBC,0xCA,0xD5,0xC5,0xE2,0xFD,0xC6,0xE3,0xCD,0x27,
0x6,0x3A,0xF3,0x17,0xED,0x49,0xB7,0x74,0xB5,0xB4,0x56,0x17,0xEB,0x43,0x79,0xE0,0xFA,0xC1,0x27,0x96,0xD6,
0xEA,0x62,0xE7,0x75,0xFF,0xBC,0x9E,0xCD,0xB};
const char message303[]={0xFE,0xA3,0x75,0xA2,0xF2,0x63,0x15,0x42,0xD0,0xEA,0x62,0x42,0x3C,0xB,0x96,0xA3,0x5E,0x1B,0xC8,0x9B,0x4F,0x8C,
0x80,0x9E,0x56,0xB9,0x37,0x76,0x43,0x14,0x9F,0xD5,0x8D,0xDA,0x93,0x6E,0xEF,0x9F,0xCE,0xBC,0x35,0xAD,0xBD,0xE3,
0x14,0x7A,0x2F};
const char message304[]={0x47,0xE9,0x66,0x1,0x6D,0x4F,0xBA,0xC5,0xC7,0xAC,0xFC,0x26,0xAA,0x94,0xCD,0x51,0xF6,0xA8,0xAB,0x6C,0x1E,0xF6,
0x76,0xB5,0x27,0xDD,0x64,0x72,0x57,0x4D,0xC8,0x69,0xCC,0xB8,0x51,0xDE,0xB};
const char message305[]={0x47,0xE9,0x56,0x57,0x59,0x38,0xAD,0x2E,0xDA,0x1B,0x55,0xF8,0xF3,0x1F,0xAD,0x13,0x95,0x1F,0x93,0x9,0x1A,0x67,
0x8D,0x80,0x3D,0xE9,0x66,0x20,0xBE,0xB2,0xB9,0xAB,0xB4,0x72,0xAC,0xE7,0x82,0xE5,0x9E,0x74,0xAB,0x10,0x62,
0x5A,0x4B,0xCB,0xF2,0x5E,};
const char message306[]={0xB6,0xD5,0x45,0xF3,0x1F,0xAD,0x13,0x95,0x1F,0x5D,0xB4,0x72,0xAC,0xE7,0x61,0x1D,0xFC,0x67,0xA4,0xBD,0xD8,0xB0,0x60,
0x39,0x43,0xEB,0x2E,0x76,0x86,0xB8,0xBA,0x51,0x3B,0xB3,0x83,0x4F,0xAB,0x8B,0x5D,0x84,0xF4,0x5E,};
const char message307[]={0xB6,0xD5,0x45,0xAB,0x8B,0x35,0xAD,0x6A,0x98,0x10,0xCF,0xFC,0x47,0xEB,0x44,0xE5,0xC7,0x6E,0xD0,0x5A,0x52,0x4D,
0x79,0x4F,0xBA,0xBF,0x33,0xBE,0xF7,0x2};
const char message308[]={0x47,0xE9,0x76,0x6,0xCF,0xCC,0xD5,0xC5,0xC7,0x2A,0x65,0x3C,0x53,0x6B,0x4F,0xBA,0x59,0xCA,0x72,0xB1,0x33,
0xBE,0xE7,0x79,0xB3,0xAD,0x19,0xC9,0x5D,0xB5,0x37,0x26,0xD5,0xB2,0xF4,0x74,0xAD,0xEC,0xBC,0x0};
const char message309[]={0x47,0xE9,0xC6,0x49,0x18,0x39,0xD3,0x4,0x15,0xAD,0x72,0x4F,0xBA,0xD5,0xC5,0xCA,0xB1,0x9E,0x7B,0xD2,0x2D,
0x3E,0x66,0x20,0xBE,0xB2,0x39,0x23,0x5D,0x93,0x7B,0x83,0x61,0x69,0xCD,0xFA,0xD9,0x2F,0x66,0x66,0xCA,0x9D,0xD,
0xC1,0xDE,0xB};
const char message310[]={0xF6,0x17,0xB3,0xBE,0xC6,0xA7,0xC5,0xC7,0xDE,0xEE,0xB3,0xB2,0x39,0xE5,0x13,0x4C,0x38,0xEC,0xE2,0xC3,0x7B,0x1};
const char message311[]={0x47,0xE9,0x46,0xC0,0xEA,0x62,0x67,0xB,0x22,0x3D,0x57,0x99,0x8D,0xF6,0xA4,0x1B,0xEC,0x16,0x71,0xD6,0x2A,
0x67,0xE4,0x17,0x4E,0x79,0x31,0x33,0xBE,0x4,0x1F,0xBF,0x18,0xF5,0xD1,0xDA,0xE8,0x66,0x7,0xED,0xB0,0xD8,0xF,0x21,
0x16,0x2C,0x17,0xA3,0x8B,0xF8,0xDE,0x8E,0xD2,0x75,0xB5,0xB6,0x86,0xE8,0x60,0x75,0xD1,0xEF,0xE2,0xC3,0x7B,0x1};
const char message312[]={0xB6,0xD5,0x45,0x8B,0x75,0x14,0xC6,0xD2,0x5A,0x77,0x2E,0x7E,0xD0,0x99,0xDE,0x7C,0x60,0x2C,0xAD,0x3D,0xE9,0xFE,0xCC,0x1F,
0x2C,0xAD,0xA8,0x8B,0x4F,0x73,0x4,0xB9,0xCA,0x35,0xED,0x60,0x75,0xF1,0xE1,0xBD,0x0};
const char message313[]={0x47,0xE9,0xFE,0x1C,0x9F,0xD,0x53,0x9A,0xFC,0x61,0x28,0x9B,0x8B,0xB5,0x60,0x19,0xAE,0xA1,0xA,0x7B,0xA7,0x7C,
0x66,0xE5,0x5F,0xAC,0x4F,0x89,0xB6,0x6E,0x1D,0x7B,0xAC,0xF7,0x2};
const char message314[]={0x47,0xE9,0xFE,0x1C,0x9F,0xD,0x13,0x2,0x22,0xED,0x2A,0x4D,0x82,0x84,0x2B,0x95,0xCF,0x82,0xE5,0xCE,0x86,
0x60,0xEF,0x5};
const char message315[]={0xF6,0xB9,0x27,0xDD,0x9F,0x1,0xAA,0xC3,0x9E,0x74,0x23,0x60,0x75,0xB1,0x16,0xDF,0xC4,0xDE,0x4E,0x9B,0x54,0x36,
0x57,0x37,0x6A,0x37,0xA9,0x68,0x75,0x31,0xEB,0x6B,0x7C,0xEA,0xDA,0x89,0xD6,0xC8,0xDB,0x51,0xBA,0x9,0x39,0x4F,
0xE1,0xA2,0x56,0x17,0x93,0x99,0xFF,0xB0,0xB7,0xAB,0x71,0xBE,0x53,0x3E,0xB,0x26,0x3,0x9F,0xBC,0x9,0xF0,0xF3,0x1D,
0xEF,0xF6,0xAC,0x2E,0x9E,0xC5,0xC7,0xC4,0x1F,0x8F,0xB2,0x39,0xE5,0xD5,0xC5,0xCE,0xEB,0xFE,0x79,0x97,0xD6,0xEA,
0x62,0xF1,0x7E,0xE3,0xF1,0x5E,};
const char message316[]={0x3E,0x31,0x2,0x7A,0x1A,0xC2,0xC4,0x5F,0xE5,0x2A,0x9A,0x70,0x86,0xD6,0xDD,0x93,0xEE,0xB0,0xB7,0xAB,0x3D,0xE9,
0x26,0x93,0xBB,0x6A,0x8E,0x25,0x3E,0x55,0xB0,0x5C,0xEF,0xCE,0xBB,0x78,0xA7,0xAB,0x19,0x37,0x6A,0x17,0xA3,0x78,
0xC8,0x7B,0x1};
const char message317[]={0x47,0xE9,0xE6,0xB8,0xE5,0x29,0x5C,0x5D,0xAC,0x32,0x1B,0x5D,0xC8,0x2E,0x9A,0xCC,0xFC,0x33,0xB4,0xEE,0xFC,0x47,0xEB,
0x44,0xE5,0x47,0x17,0x4D,0x88,0xC7,0x5B,0xF7,0xDC,0x29,0xD4,0xF6,0x1C,0x76,0xB1,0x33,0x78,0x9C,0x35,0x2,0xF6,0xA4,
0x5B,0xF2,0xEA,0x2A,0x8D,0x54,0xC2,0xCE,0xB};
const char message318[]={0xBE,0xBC,0x20,0xCA,0x5F,0x90,0x23,0xD4,0xD2,0x9A,0xF1,0xC1,0xE7,0x5,0x79,0x2F};
const char message400[]={0x3E,0xA6,0xB7,0xA3,0x74,0x8B,0xF,0xEE,0xAA,0x95,0x7E,0xC8,0x71,0x1A,0xDE,0xB};
const char message401[]={0x3E,0xE6,0x18,0x90,0xAB,0x9C,0xCC,0xD5,0x8D,0x1A,0xA7,0xE1,0xBD,0x0};
const char message402[]={0xDD,0x96,0xB0,0xAE,0xF7,0x83,0xAE,0x55,0x8E,0x2A,0xC5,0x89,0x2D,0x1E,0x65,0xD3,0x7B,0x1};
const char message403[]={0x3E,0xDC,0xC3,0x38,0xF,0x33,0xB0,0xF8,0x18,0x67,0xCD,0x4C,0x65,0x73,0x95,0xA3,0x8A,0x67,0x17,0x1F,0x8B,
0xD6,0x26,0xE3,0xB1,0xF3,0x2};
const char message407[]={0xF6,0x57,0x69,0x4A,0x8B,0x15,0xEC,0xAE,0x85,0xEC,0x80,0xCB,0x7D,0xCC,0x8C,0x1E,0xDE,0x8E,0x43,0xC8,0x49,0xD0,
0xF9,0x55,0x2C,0x4D,0xA6,0x9D,0xF1,0x61,0xB9,0xD6,0x9E,0x5,0xCB,0xD5,0x23,0x62,0x67,0xF6,0x7D,0xB0,0xA4,0x91,0x3B,
0xEF,0x82,0xD6,0x5,0xBB,0xA3,0x57,0xC6,0xDE,0x90,0x5D,0xDE,0xEC,0x1F,0x11,0xF3,0xC7,0xF9,0xEB,0xFA,0x3B,0xCC,0x1F,0xA5,0xAB,
0xEB,0xEF,0x30,0xCF,0xF3,0x56,0xB9,0x3E,0x3B,0x98,0xF2,0xEA,0x62,0x12,0xA4,0x1F,0x72,0x52,0x3F,0xCE,0xD2,0x64,
0xCF,0x9B,0xEF,0xFB,0xFD,0xD1,0xD1,0x28,0x4D,0xA6,0xC5,0xC7,0xC4,0x24,0xD2,0x77,0xC3,0xFC,0xD9,0xED,0x6F,0x56,0xFE,0xF9,0x83,0xDD,
0xD1,0x2B,0xC3,0xDF,0x61,0xFE,0x9A,0xBF,0x55,0xCE,0x5F,0xCB,0x14,0xFA,0x9B,0xC0,0x53,0xF,0xDE,0x24,0xE8,0xFC,0xFA,0xC6,0x9E,0x74,
0x7F,0xA7,0xFB,0x1F,0x5C,0x6B,0x79,0x46,0x69,0xF2,0xC2,0xC,0xE5,0x6E,0xF7,0x30,0x7F,0xEA,0x6F,0x56,0xFE,0xF9,0x53,0xEE,
0x80,0x2B,0xFF,0x73,0xF0,0x37,0x7F,0xEC,0x6F,0x56,0xFE,0xF9,0xE3,0xFC,0x75,0xFD,0x2D,0x58,0x8E,0x72,0xC9,0xDE,0xEC,0x73,0xC7,0x74,
0x5A,0xAB,0x8B,0x99,0xD1,0xE3,0xB0,0x7A,0x44,0xCC,0xDF,0xFB,0x81,0x3F,0x6F,0xF6,0xB9,0xF,0xAA,0xF8,0x35,0xAD,0xC3,
0xEA,0x11,0x31,0x7F,0x1F,0x54,0xF1,0xCB,0x9F,0xF7,0x2};
const char message408[]={0x2,0x34,0x4,0xE1,0xB0,0x7A,0x44,0x2C,0xD6,0xE7,0xC7,0x48,0xC4,0xA9,0x96,0x9E,0x8B,0xB3,0x34,0xD9,0xF3,0xBC,0x17};
const char message504[]={0x2,0x34,0x4,0x61,0x16,0xD0,0x66,0x7D,0x60,0x95,0x3B,0x93,0x4B,0xD9,0xE1,0x30,0xB5,0xF6,0xA4,0x9B,0xA1,
0x74,0x57,0xE9,0x79,0xDE,0x6C,0xBB,0x3A,0xD8,0x1B,0x67,0xF6,0x98,0xF6,0x22,0x7E,0x47,0xD3,0xD1,0x2A,0x47,0x6,0xE2,
0x2B,0x9B,0xB,0x96,0x13,0x7F,0x5A,0xC1,0x5A,0xCF,0x62,0x2D,0xD9,0x5C,0x69,0x8F,0x85,0x99,0xDE,0xB};
const char message505[]={0x3E,0xE6,0x61,0x4F,0xBA,0xC9,0xE4,0xAE,0x9A,0x5,0xB4,0xD5,0xC5,0x18,0x90,0xDE,0xB};
const char message518[]={0x47,0xE9,0xBA,0x5A,0x1B,0xEC,0x8E,0x5E,0x19,0x7B,0xD2,0x7D,0x42,0xB3,0xD6,0xBB,0xF3,0xEE,0x8D,0x2A,0xFC,0x19,0x5A,
0x77,0xB1,0x5E,0xFF,0xCF,0xEF,0xBD,0x0};
const char message996[]={0x47,0xE9,0x46,0xC0,0x38,0xEB,0x2A,0x9B,0x53,0x2E,0x7C,0x50,0x29,0x9B,0xDE,0xB};
const char message997[]={0x47,0xE9,0x26,0x93,0xBB,0x6A,0xD4,0xA3,0xB5,0x5,0x3F,0x75,0x95,0xCD,0x29,0x4F,0x8C,0x5F,0x7A,0xBA,0x16,0xFF,
0xB0,0x10,0xE3,0xD7,0xAC,0x9F,0xFD,0x62,0xEF,0xF8,0x68,0xCF,0x44,0xFC,0x13,0x62,0xE9,0xBB,0x61,0x74,0x82,0x6B,0x69,
0xAD,0x45,0x7,0x2C,0xF1,0xF,0x3B,0xB3,0x57,0x36,0x67,0xFD,0xEC,0xF7,0xA4,0xFB,0x3B,0x5B,0xD6,0x5,0x79,0x2F};
const char message998[]={0x47,0xE9,0x76,0xA3,0x83,0xC5,0xA8,0x7E,0xB0,0x89,0x11,0x98,0xA2,0x34,0xF9,0xB0,0x68,0x7D,0x52,0x2D,0x68,
0x6A,0xED,0x49,0x37,0x3,0x1F,0x7B,0xE3,0xCC,0x5E,0xD9,0x5C,0x53,0xF3,0x16,0xFE,0x82,0xE5,0x9A,0x9A,0xB7,0xF0,
0xBD,0xF9,0x5A,0x85,0xBF,0x98,0x71,0xB5,0xE1,0x30,0x74,0xF0,0x9F,0xBA,0xCA,0xE6,0xDE,0x38,0xB3,0x7,0x8D,0xF3,0xF7,
0xD1,0xE,0xB,0x33,0x94,0xBD,0x17};
const char message999[]={0x3E,0xE6,0x4A,0x7B,0xCC,0xCA,0xBF,0xBA,0x51,0x87,0x71,0x1A,0xDE,0xB};
const char message1000[]={0x3E,0x8,0xE3,0xF1,0x5E,};
const char message1001[]={0xDD,0x48,0x86,0xF7,0x2};
const char message1002[]={0xDD,0x48,0x86,0xF7,0x2};
const char message1003[]={0xF1,0x2};
const char message1004[]={0xF1,0x2};
const char message1005[]={0x47,0xE9,0x76,0x6,0x77,0xD5,0x2A,0x84,0x58,0xDD,0x28,0x3B,0x2F};
const char message1006[]={0x47,0xE9,0x76,0x6,0x77,0xD5,0x64,0xAE,0x6E,0x94,0x9D,0x17};
const char message1007[]={0x47,0xE9,0x26,0x93,0xBB,0x6A,0x37,0x3A,0x58,0xDD,0xA8,0x19,0x5A,0x77,0x4F,0x3A,0x3B,0x2F};
const char message1008[]={0x47,0xE9,0x76,0x6,0x77,0xD5,0xCC,0x5C,0xDD,0xA8,0x19,0xF1,0xD8,0x79,0x1};
const char message1009[]={0xB6,0x7B,0xC3,0xDC,0x93,0xEE,0x4F,0x8C,0x2F,0x93,0x5,0x7C,0x1};
const char message1010[]={0x47,0xE9,0x76,0x6,0x77,0x95,0xF7,0x2};
const char message1011[]={0x47,0xE9,0x16,0xED,0x23,0xE4,0xB3,0x1B,0x1D,0xAC,0x6E,0xD4,0xC,0xAD,0xBB,0x27,0x9D,0x9D,0x17};
const char message1012[]={0xC7,0xB8,0x51,0x93,0xB9,0x27,0xDD,0x8C,0xE0,0x5A,0xE5,0x64,0xA,0xF8,0x2};
const char message1013[]={0x2F};
const char message1018[]={0x2,0xCF,0xC8,0xCF,0xDD,0xEE,0xB};
const char message1019[]={0x2F};
const char message1020[]={0x47,0xE9,0x76,0x6,0xCF,0xCC,0xE3,0xF7,0x2};
const char message1021[]={0x9C,0xBF,0xEE,0xB};
const char message1022[]={0x94,0xAE,0xEE,0xB};
const char message1023[]={0x8,0xAA,0x17};
const char message1024[]={0x6,0xA8,0x5E,};
const char message1025[]={0x4E,0x7C,0x1};
const char message1026[]={0x32,0xD,0x7E,0x1};
const char message1027[]={0x2F};
const char message1028[]={0x2F};
const char message1029[]={0x2F};
const char message1030[]={0x2F};
const char message1031[]={0x47,0xE9,0xC6,0x59,0x7A,0xE2,0xF8,0xBD,0x0};
const char message1032[]={0x47,0xE9,0x76,0xA3,0x83,0x19,0x5A,0x77,0x4F,0xBA,0xE3,0xF7,0x2};
const char message1033[]={0x9C,0x75,0x95,0x4D,0xEF,0x5};
const char message1035[]={0x2F};
const char* dir[6]={
    message1021,
    message1022,
    message1023,
    message1024,
    message1025,
    message1026};

const char desc_l43[]={0x47,0xE9,0xFE,0x1C,0x9F,0xD,0xB3,0x77,0xAD,0x69,0xBE,0x0};
const char desc_l44[]={0x47,0xE9,0xFE,0xAC,0xA8,0x8B,0x3F,0x5F,0x67,0x3A,0xAA,0x7C,0x1};
const char desc_l45[]={0xC7,0xA9,0x40,0x8A,0x9F,0x3B,0x4E,0x5,0x12,0x48,0xB,0xAD,0xE9,0x61,0x31,0x41,0xD2,0x7D,0x8E,0xA6,0x54,0x2F};
const char desc_l46[]={0xBE,0x6B,0xA8,0xC2,0x7F,0x1};
const char desc_l47[]={0xC7,0xE5,0x1B,0xBF,0xE2,0x5};
const char desc_l48[]={0xDD,0xD5,0xEC,0x4,0x73,0xBC,0x0};
const char desc_l49[]={0x2,0xE0,0x53,0x72,0xB4,0xF5,0x20,0xA,0x13,0x2F};
const char desc_l170[]={0xBE,0x5C,0xC8,0xC3,0xEA,0x62,0xE7,0x55,0x58,0x3B,0x33,0xCE,0xFB,0x76,0xDA,0x24,0xFE,0xB};
const char desc_l171[]={0xBE,0x63,0x18,0x24,0x86,0x88,0xFF,0x2};
const char desc_l172[]={0xB6,0xF6,0xBE,0xEB,0x53,0xA2,0xAD,0x5B,0xC7,0x1E,0xFB,0x2};
const char desc_l173[]={0xC7,0x65,0x6B,0xCA,0xE6,0xCE,0x1B,0x44,0x4A,0x2F};
const char desc_l174[]={0xB6,0xF6,0xBE,0xEB,0x53,0xA2,0xAD,0xFB,0xC7,0xFA,0xBE,0x0};
const char desc_l175[]={0x7E,0xE2,0x9F,0x68,0x4D,0x39,0xF,0xAB,0x8B,0x19,0xF9,0x85,0x74,0x53,0x5C,0x10,0x29,0x55,0x70,0xBD,0x0};
const char desc_l176[]={0xBE,0x7B,0xBB,0xAA,0xE4,0xC3,0xCE,0x96,0x84,0x55,0xAE,0x2E,0xD6,0x49,0x3D,0x21,0xAA,0x88,0x17};
const char desc_l177[]={0xBE,0x6B,0xF1,0x4D,0xEC,0x3B,0x2A,0xC8,0x9,0xF1,0xBC,0x0};
const char desc_l178[]={0xF6,0x17,0xA3,0x42,0xF4,0x3,0x9B,0xCA,0x78,0x1};
const char desc_l179[]={0xF6,0x17,0x3B,0xB3,0x17,0x3F,0x88,0xF2,0xBF,0x0};
const char desc_l180[]={0xBE,0xEB,0x44,0xEB,0xE0,0x5};
const char desc_l181[]={0xBE,0x2B,0x34,0x98,0x3F,0xFA,0x17};
const char desc_l182[]={0x76,0x45,0x5D,0xFC,0xF9,0x72,0x25,0x6B,0xCE,0x8F,0x36,0xC5,0xD7,0x17};
const char desc_l183[]={0xF6,0x17,0xBB,0xC1,0xF2,0xE9,0x83,0x5F,};
const char desc_l184[]={0x76,0x7D,0x8D,0x4F,0x2F};
const char desc_l185[]={0x3E,0x68,0xC3,0x7F,0x1};
const char desc_l186[]={0xC7,0xF8,0xE0,0xF3,0x82,0x5E,};
const char desc_l187[]={0xBE,0xB3,0xBE,0xC6,0xEF,0xA2,0x95,0x63,0x3D,0x5F,};
const char desc_l188[]={0xBE,0x6B,0x5A,0xD5,0x30,0x21,0x9E,0x17};
const int original_position[26 ]={
    36,34,36,0,35,32,0,33,0,30,30,30,33,0,0,37,37,0,0,45,40,44,0,0,47,0,};
object obj[26 ]={
    {43,desc_l43,36,0+ 2 },
    {44,desc_l44,34,0+ 2 },
    {45,desc_l45,36,0+ 2 },
    {46,desc_l46,0,0+ 1 + 2 },
    {47,desc_l47,35,0+ 2 },
    {48,desc_l48,32,0+ 2 },
    {49,desc_l49,0,0+ 1 + 2 },
    {170,desc_l170,33,0+ 2 },
    {171,desc_l171,0,0+ 1 + 2 },
    {172,desc_l172,30,0+ 2 },
    {173,desc_l173,30,0+ 2 },
    {174,desc_l174,30,0+ 2 },
    {175,desc_l175,33,0+ 2 },
    {176,desc_l176,0,0+ 2 },
    {177,desc_l177,0,0+ 1 + 2 },
    {178,desc_l178,37,0+ 2 },
    {179,desc_l179,37,0+ 2 },
    {180,desc_l180,0,0+ 2 },
    {181,desc_l181,0,0+ 1 + 2 },
    {182,desc_l182,45,0+ 2 },
    {183,desc_l183,40,0+ 2 },
    {184,desc_l184,44,0+ 2 },
    {185,desc_l185,0,0+ 1 + 2 },
    {186,desc_l186,0,0+ 1 + 2 },
    {187,desc_l187,47,0+ 1 + 2 },
    {188,desc_l188,0,0+ 1 + 2 }
};

room_code current_position;
room_code next_position;
boolean retv;
extern unsigned char  ls;
extern char playerInput[];
boolean marker[129];
int counter[129];
object *odummy;

char *searchw(unsigned int w)  ;
boolean unwear(unsigned int o)  ;
void printnewline(void)
{
    writesameln("\n");
}

void printspace(void)
{
    writesameln(" ");
}

unsigned char  search_object(unsigned int o)  
{
    unsigned char  idx;
    for(idx=0; idx< 26 ;++idx)
        if(obj[idx].code==o)
            return idx;
    return 0;
}

object *search_object_p(unsigned int o)  
{
    return &obj[search_object(o)];
}
unsigned char  search_room(unsigned char  r)  
{
    for(cdummy=0; cdummy< 18 ;++cdummy)
        if(world[cdummy].code==r)
            return cdummy;
    return 0;
}

void restart(void)
{
    unsigned char  j;
    for(cdummy=1;cdummy<129;++cdummy){
        marker[cdummy]=0;
        counter[cdummy]=0;
    }
    for(j=0; j< 18 ;++j)
        for(cdummy=0; cdummy< 6 ;++cdummy)
            world[j].directions[cdummy]=original_connections[j][cdummy];
    marker[124]= 1 ;
    next_position=110;
    for(j=0; j< 26 ;++j)
        obj[j].position=original_position[j];
}

void show_messagenlf(const char *m)  
{
    boolean o;
    cpointer=0;
    bpointer=0;
    compressed=(char *)m;
    do{
        o=decode();
        writesameln(decompress_b);
    } while(o);
}

void show_message(const char *m)  
{
    show_messagenlf(m);
    printnewline();
}

boolean are_you_sure(void)
{
    show_message(areyousure);
    fgets(( playerInput ),( 128  ),(_impure_ptr ->_stdin) ); ;
    if(playerInput[0]=='Y' || playerInput[0]=='y') {
        return 1;
    }
    return 0;
}


# 1427 "silkdust2_no_UTF8.c"

void move(unsigned char  dir)  
{
    unsigned char  p;
    p=cr->directions[dir];
    if(p) {
        next_position=p;
        marker[120]= 0 ;
    } else 
        show_message(message1008);

}

boolean get(unsigned int o)  {

    odummy=search_object_p(o);
    if(odummy->position!=current_position) {
        show_message(message1006);
    } else if((odummy->attributes& 1 )==0) {
        show_message(message1005);
    } else {
        odummy->position= 1500 ;
        return 0 ;
    }
    return 1 ;
}
boolean vov(unsigned int v1, unsigned int v2);
boolean vovn(unsigned int v1, unsigned int v2, unsigned int n);
boolean vovn100_0(unsigned char  n)  ;
boolean non1(unsigned int n1, unsigned int n2);
void ok(void);
boolean check_verb_noun(unsigned int v, unsigned int n);
boolean cvn70(unsigned char  n)  ;
boolean check_verb_actor(unsigned int v, unsigned char  n);
boolean check_verb75_actor(unsigned char  n)  ;
boolean check_verb75_actor_available(unsigned char  n)  ;
boolean check_verb70_actor(unsigned char  n)  ;
boolean check_verb70_actor_available(unsigned char  n)  ;
unsigned char ams(unsigned char  v, unsigned char n, char* m);



    

void sendallroom(unsigned int s)  ;
# 1485 "silkdust2_no_UTF8.c"

    
    
    

boolean object_is_available(obj_code c)  
{
    return (search_object_p( c )->position==current_position) || (search_object_p( c )->position== 1500 ) ;
}
void set_object_position(obj_code c, int pos)
{
    search_object_p(c)->position=pos;
}
void set_object_position0(obj_code c)  
{
    set_object_position(c,0);
}
void set_object_positionC(obj_code c)  
{
    set_object_position(c,1500 );
}
void bring_object_here(obj_code c)  
{
    set_object_position(c,current_position);
}
void amsm(unsigned char  p, unsigned char  c, boolean v, const char *m);
boolean cvna(unsigned int v, unsigned int n, unsigned int o);
boolean cvna70(unsigned char  n, unsigned char  o);
boolean cvna70neq(unsigned char  n)  ;
boolean drop(unsigned int o)  
{
    odummy=search_object_p(o);    if(odummy->position== 1500 ){        odummy->position=current_position;    } else {        show_message(message1007);        return 1 ;    }    return 0 ;}
# 1525 "silkdust2_no_UTF8.c"

void jump(unsigned char  p)  
{
    next_position=p;
    marker[120]= 0 ;
}

void hold(unsigned int p)  ;
char iscarrsome(void);
char iswearsome(void);








char check_position_marker_on(unsigned int p, unsigned char f);
char check_position_marker_off(unsigned int p, unsigned char f);
void hi_cond(void)
{
    retv= 1 ;
     
    if(current_position==101) {
        wait_key(); ;
        jump(30);
        return;
    }

     
    if(current_position==35) if(marker[33]) if(marker[34]== 0 ) {
        show_message(message259);
        marker[34]= 1 ;
        set_object_positionC(181);
        return;
    }

     
    if(current_position==40) if(marker[41]== 0 ) {
        if(counter[40]>0) --counter[40];
    }

     
    if(current_position==40) if(counter[40]==0) if(marker[42]== 0 ) {
        show_message(message271);
        marker[42]= 1 ;
    }

     
    if(current_position==44) if(search_object_p( 187 )->position != 1600 ) {
        show_message(message302);
        jump(43);
        return;
    }

     
    if(current_position==40) if(search_object_p( 187 )->position == 1600 ) {
        show_message(message305);
        if(unwear(187)) return;
    }

    retv= 0 ;    return;
}
void low_cond(void)
{
    retv= 1 ;
     
    if(check_verb_noun(70,409)) {
        show_message(message518);
        return;
    }

     
    if(verb==( 73 ) ) {
        if(are_you_sure()) {
             ; exit(0);
        }
        return;
    }

     
    if(vovn(74,0,72)) {
        { boolean gs= 0 ; show_message(message1032); for(cdummy = 0; cdummy< 26 ; ++cdummy) { dummy=obj[cdummy].position; if(dummy== 1500 ||dummy== 1600 ) { gs= 1 ;  ; show_messagenlf(obj[cdummy].desc);  ; if(dummy== 1600 ){ printspace(); show_messagenlf(message1018); } printnewline(); } } if(gs== 0 ) show_message(message1033);} ;
        return;
    }

     
    if(verb==987) {
        if(are_you_sure())
            restart();
        return;
    }

     
    if(verb==( 110 ) ) {
        marker[120]= 0 ;
        return;
    }

     
    if(vovn100_0(80)) {
        move(0);
        return;
    }

     
    if(vovn100_0(81)) {
        move(1);
        return;
    }

     
    if(vovn100_0(82)) {
        move(2);
        return;
    }

     
    if(vovn100_0(83)) {
        move(3);
        return;
    }

     
    if(vovn100_0(84)) {
        move(4);
        return;
    }

     
    if(vovn100_0(85)) {
        move(5);
        return;
    }

     
    if(verb==( 201 ) ) {
        show_message(message400);
        return;
    }

     
    if(verb==( 122 ) ) {
        show_message(message403);
        return;
    }

     
    if(check_verb_noun(12,10)) {
        show_message(message401);
        return;
    }

     
    if(verb==1000) {
        show_message(message998);
        return;
    }

     
    if(verb==400) {
        show_message(message504);
        return;
    }

     
    if(verb==401) {
        show_message(message61);
        return;
    }

     
    if(cvna70neq(174)) {
        show_message(message264);
        return;
    }

     
    if(cvna70neq(177)) {
        show_message(message245);
        return;
    }

     
    if(check_verb70_actor_available(175)) {
        show_message(message233);
        return;
    }

     
    if(check_verb75_actor_available(175)) {
        show_message(message235);
        return;
    }

     
    if(cvna70neq(173)) {
        show_message(message229);
        return;
    }

     
    if(cvna70neq(171)) {
        show_message(message227);
        marker[27]= 1 ;
        return;
    }

     
    if(check_verb70_actor_available(170)) {
        show_message(message218);
        return;
    }

     
    if(cvna70neq(185)) {
        show_message(message297);
        return;
    }

     
    if(cvna70neq(186)) {
        show_message(message298);
        return;
    }

     
    if(cvna70neq(187)) {
        show_message(message306);
        return;
    }

     
    if(cvna70(177,188)) {
        show_message(message307);
        return;
    }

     
    if(check_verb75_actor_available(170)) {
        show_message(message220);
        return;
    }

     
    if(check_verb70_actor_available(43)) {
        show_message(message212);
        return;
    }

     
    if(check_verb_noun(66,46)) if(actor==43) if(object_is_available(46)) if(object_is_available(43)) {
        show_message(message225);
        set_object_position0(46);
        marker[26]= 1 ;
        return;
    }

     
    if(cvna70neq(49)) {
        show_message(message209);
        return;
    }

     
    if(cvna70neq(181)) if(current_position<40) {
        show_messagenlf(message260);
        show_message(message308);
        marker[35]= 1 ;
        return;
    }

     
    if(cvna70neq(181)) {
        show_message(message260);
        marker[35]= 1 ;
        return;
    }

     
    if(cvna70neq(46)) if(marker[22]) {
        show_message(message208);
        return;
    }

     
    if(cvna70neq(46)) {
        show_message(message201);
        marker[22]= 1 ;
        set_object_positionC(49);
        return;
    }

     
    if(check_verb75_actor_available(43)) if(object_is_available(46)) if(marker[23]== 0 ) {
        show_message(message215);
        marker[23]= 1 ;
        return;
    }

     
    if(check_verb_noun(66,46)) if(actor==43) if(object_is_available(43)) if(object_is_available(46)) if(marker[23]== 0 ) {
        show_message(message215);
        marker[23]= 1 ;
        return;
    }

     
    if(check_verb75_actor_available(43)) if(marker[23]) {
        show_message(message216);
        return;
    }

     
    if(check_verb70_actor_available(45)) {
        show_message(message228);
        return;
    }

     
    if(check_verb75_actor_available(45)) {
        show_message(message226);
        set_object_positionC(171);
        set_object_position0(45);
        marker[33]= 1 ;
        return;
    }

     
    if(current_position>30) if(current_position<34) if(verb==( 143 ) ) {
        show_message(message217);
        return;
    }

     
    if(verb==( 143 ) ) if(search_object_p( 187 )->position == 1600 ) {
        show_message(message309);
        return;
    }

     
    if(cvna(69,176,176)) if(marker[29]) {
        show_message(message244);
        return;
    }

     
    if(cvna(69,176,176)) {
        show_message(message237);
        marker[28]= 1 ;
        return;
    }

     
    if(cvna70neq(176)) {
        show_message(message249);
        return;
    }

     
    if(check_verb70_actor_available(183)) if(marker[42]) {
        show_message(message272);
        return;
    }

     
    if(check_verb70_actor_available(183)) {
        show_message(message270);
        return;
    }

     
    if(check_verb75_actor_available(183)) if(marker[41]) {
        show_message(message316);
        return;
    }

     
    if(check_verb75_actor_available(183)) if(marker[42]) if(marker[41]== 0 ) {
        show_message(message273);
        marker[41]= 1 ;
        return;
    }

     
    if(cvna(66,177,188)) if(actor==183) if(marker[40]) if(marker[44]== 0 ) if(        search_object_p( 187 )->position ==47) {
        show_message(message303);
        set_object_position0(188);
        marker[44]= 1 ;
        return;
    }

     
    if(cvna(66,177,188)) if(actor==183) {
        show_message(message505);
        return;
    }

     
    if(check_verb_actor(66,183)) {
        show_message(message278);
        return;
    }

     
    if(check_verb75_actor_available(183)) {
        show_message(message269);
        counter[40]=5;
        return;
    }

     
    if(check_verb_noun(120,187)) {
        dummy=search_object(187);
        odummy=&obj[dummy];
        if((odummy->attributes& 2 )!=0&&(odummy->position== 1500 ||odummy->position==current_position)){
            odummy->position= 1600 ;
            ++counter[118];
        } else if(odummy->position== 1600 ) {
            show_message(message1019);
            return;
        } else {
            show_message(message1010);
            return;
        }
        ok();
        return;
    }

     
    if(check_verb_noun(121,187)) {
        if(unwear(187)) return;
        ok();
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message997);
        return;
    }

     
    if(verb==( 66 ) ) {
        show_message(message401);
        return;
    }

     
    if(vov(211,406)|| verb==( 67 ) ) {
        show_message(message401);
        return;
    }

     
    if(verb==( 50 ) ) if(noun1>24) if(noun1<50) {
        if(get(noun1)) return;
        ok();
        return;
    }

     
    if(verb==( 55 ) ) if(noun1>24) if(noun1<50) {
        if(drop(noun1)) return;
        ok();
        return;
    }

     
    if(verb==( 50 ) ) if(noun1>169) if(noun1<200) {
        if(get(noun1)) return;
        ok();
        return;
    }

     
    if(verb==( 55 ) ) if(noun1>169) if(noun1<200) {
        if(drop(noun1)) return;
        ok();
        return;
    }

     
    if(verb==407) {
        show_message(message407);
        return;
    }

     
    if(cvn70(79)) {
        marker[120]= 0 ;
        return;
    }

     
    if(verb==( 210 ) ) {
        show_message(message231);
        return;
    }

     
    if(verb==( 70 ) ) {
        show_message(message996);
        return;
    }

     
    if(verb==( 15 ) ) {
        show_message(message408);
        return;
    }

     
    if(verb==( 78 ) ) {
        show_message(message122);
        return;
    }

     
    if(verb==988) {
        { _pcos_dstring( "Enter file name: " ) ; fgets(( playerInput ),(  128  ),(_impure_ptr ->_stdin) ); ; loadgame(playerInput); }  ;
        return;
    }

     
    if(verb==989) {
        { _pcos_dstring( "Enter file name: " ) ; fgets(( playerInput ),(  128  ),(_impure_ptr ->_stdin) ); ; savegame(playerInput); }  ;
        return;
    }

     
    if(verb==( 76 ) ) {
        show_message(message402);
        return;
    }

    retv= 0 ;
    return;
}
void local_cond(void)
{
    retv= 1 ;
    switch(current_position) {
    case 30:
     
    if(cvn70(237)) {
        show_message(message246);
        return;
    }

     
    if(cvn70(238)) {
        show_message(message247);
        return;
    }

     
    if(cvna70(29,173)) {
        show_message(message222);
        return;
    }

     
    if(cvn70(29)) {
        show_message(message230);
        marker[25]= 1 ;
        return;
    }

     
    if(check_verb70_actor_available(170)) {
        show_message(message218);
        show_message(message224);
        return;
    }

     
    if(check_verb_noun(12,4)) if(!object_is_available(177)) {
        show_message(message243);
        return;
    }

     
    if(cvn70(4)) {
        show_message(message248);
        return;
    }

     
    if(check_verb_noun(12,4)) {
        show_message(message245);
        world[0].directions[(3)-1]=37;
        return;
    }

     
    if(verb==( 56 ) ) if(non1(173,29)) if(marker[35]) {
        restart();
        set_object_positionC(49);
        set_object_positionC(181);
        set_object_positionC(171);
        show_message(message261);
        set_object_position(174,40);
        counter[40]=100;
        jump(40);
        return;
    }

     
    if(check_verb_noun(56,29)) {
        show_message(message401);
        return;
    }

    break;
    case 31:
     
    if(cvn70(212)) {
        show_message(message250);
        return;
    }

     
    if(noun1==212) {
        show_message(message251);
        return;
    }

     
    if(cvn70(173)) {
        show_message(message252);
        return;
    }

     
    if(non1(10,216)) if(verb==( 70 ) ) {
        show_message(message253);
        return;
    }

    break;
    case 32:
     
    if(check_verb70_actor(48)) {
        show_message(message205);
        return;
    }

     
    if(check_verb75_actor(48)) if(marker[20]== 0 ) {
        show_message(message207);
        return;
    }

     
    if(check_verb75_actor(48)) if(marker[28]== 0 ) {
        show_message(message206);
        return;
    }

     
    if(check_verb75_actor(48)) if(marker[31]== 0 ) {
        show_message(message238);
        set_object_positionC(177);
        marker[31]= 1 ;
        return;
    }

     
    if(check_verb75_actor(48)) {
        show_message(message207);
        return;
    }

     
    if(cvn70(206)) {
        show_message(message258);
        return;
    }

     
    if(cvn70(240)) {
        show_message(message256);
        return;
    }

     
    if(cvn70(51)) if(marker[37]== 0 ) {
        show_message(message294);
        bring_object_here(185);
        bring_object_here(186);
        marker[37]= 1 ;
        return;
    }

     
    if(verb==( 50 ) ) if(non1(185,186)) if(marker[38]== 0 ) {
        show_message(message295);
        return;
    }

     
    if(verb==( 50 ) ) if(non1(185,186)) {
        show_message(message296);
    }

    break;
    case 33:
     
    if(cvn70(240)) {
        show_message(message256);
        return;
    }

     
    if(cvn70(239)) if(marker[24]== 0 ) {
        show_message(message254);
        return;
    }

     
    if(cvn70(239)) {
        show_message(message255);
        return;
    }

     
    if(cvn70(240)) {
        show_message(message256);
        return;
    }

     
    if(check_verb70_actor_available(170)) if(marker[24]== 0 ) {
        show_message(message218);
        show_message(message219);
        return;
    }

     
    if(check_verb75_actor_available(170)) if(marker[25]== 0 ) if(!object_is_available(173)) if(marker[39]) {
        show_message(message232);
        bring_object_here(173);
        return;
    }

     
    if(check_verb75_actor(170)) if(marker[25]) if(object_is_available(170)) {
        show_message(message223);
        marker[24]= 1 ;
        set_object_position(170,30);
        set_object_position0(175);
        return;
    }

     
    if(cvn70(97)) {
        show_message(message210);
        return;
    }

     
    if(check_verb_noun(75,97)) if(marker[22]) if(marker[24]) if(marker[29]) {
        show_message(message211);
        bring_object_here(43);
        return;
    }

     
    if(check_verb_noun(75,97)) if(marker[22]) if(marker[29]== 0 ) {
        show_message(message236);
        bring_object_here(176);
        marker[30]= 1 ;
        return;
    }

     
    if(check_verb_noun(75,97)) if(marker[22]) {
        show_message(message221);
        marker[39]= 1 ;
        return;
    }

     
    if(check_verb_noun(75,97)) {
        show_message(message213);
        return;
    }

    break;
    case 34:
     
    if(check_verb70_actor(44)) {
        show_message(message234);
        return;
    }

     
    if(check_verb75_actor(44)) if(marker[20]== 0 ) {
        marker[20]= 1 ;
        show_message(message200);
        set_object_positionC(46);
        return;
    }

     
    if(check_verb75_actor(44)) {
        show_message(message66);
        return;
    }

    break;
    case 35:
     
    if(check_verb70_actor(47)) {
        show_message(message203);
        return;
    }

     
    if(verb==( 70 ) ) if(non1(241,242)) {
        show_message(message257);
        return;
    }

     
    if(vovn100_0(83)) if(marker[21]== 0 ) if(marker[23]== 0 ) {
        show_message(message202);
        return;
    }

     
    if(check_verb75_actor(47)) if(marker[23]== 0 ) if(marker[33]== 0 ) {
        show_message(message204);
        return;
    }

     
    if(check_verb75_actor(47)) if(marker[33]== 0 ) {
        show_message(message207);
        return;
    }

     
    if(check_verb_noun(66,46)) if(actor==47) if(object_is_available(46)) {
        show_message(message214);
        return;
    }

    break;
    case 36:
     
    if(cvn70(61)) {
        show_message(message312);
        return;
    }

     
    if(cvn70(9)) {
        show_message(message313);
        return;
    }

     
    if(cvn70(51)) {
        show_message(message314);
        return;
    }

    break;
    case 37:
     
    if(check_verb_noun(69,179)) if(marker[32]== 0 ) {
        show_message(message239);
        return;
    }

     
    if(check_verb_noun(69,179)) {
        show_message(message242);
        marker[29]= 1 ;
        return;
    }

     
    if(cvn70(179)) {
        show_message(message240);
        bring_object_here(180);
        return;
    }

     
    if(cvn70(178)) {
        show_message(message289);
        return;
    }

     
    if(cvn70(180)) {
        show_message(message290);
        return;
    }

     
    if(verb==( 12 ) ) if(noun1==180) if(noun2==186) {
        show_message(message299);
        return;
    }

     
    if(check_verb_noun(12,180)) if(marker[36]) {
        show_message(message241);
        marker[32]= 1 ;
        return;
    }

     
    if(check_verb_noun(12,180)) {
        show_message(message292);
        marker[38]= 1 ;
        return;
    }

     
    if(vov(71,15)) if(noun1==185) if(noun2==180) {
        marker[36]= 1 ;
        show_message(message293);
        return;
    }

     
    if(vov(71,15)) if(noun1==186) if(noun2==180) {
        show_message(message299);
        return;
    }

    break;
    case 40:
     
    if(vovn100_0(83)) {
        show_message(message315);
        return;
    }

     
    if(cvn70(53)) {
        show_message(message275);
        return;
    }

     
    if(cvn70(7)) {
        show_message(message276);
        return;
    }

     
    if(cvn70(4)) {
        show_message(message277);
        return;
    }

     
    if(vovn100_0(84)) if(marker[41]== 0 ) {
        show_message(message268);
        return;
    }

     
    if(vovn100_0(82)) if(marker[41]== 0 ) {
        show_message(message268);
        return;
    }

     
    if(check_verb_noun(56,29)) if(marker[40]) if(marker[44]) if(        search_object_p( 187 )->position ==47) {
        show_message(message287);
        { show_message(exitrestart); fgets(( playerInput ),( 128  ),(_impure_ptr ->_stdin) ); ; if(playerInput[0]=='E' || playerInput[0]=='e'){  ; exit(0); }} ;
        restart(); return;
    }

     
    if(check_verb_noun(56,29)) if(marker[40]) {
        show_message(message304);
        return;
    }

     
    if(vovn100_0(81)) if(!object_is_available(188)) {
        show_message(message300);
        return;
    }

     
    if(vovn100_0(81)) if(marker[45]== 0 ) {
        marker[45]= 1 ;
        show_message(message317);
    }

     
    if(verb==( 70 ) ) if(non1(174,29)) if(marker[41]) if(marker[43]== 0 ) {
        show_message(message301);
        bring_object_here(188);
        marker[43]= 1 ;
        return;
    }

     
    if(check_verb_noun(50,177)) {
        if(get(188)) return;
        ok();
        return;
    }

    break;
    case 41:
     
    if(verb==( 70 ) ) if(non1(161,165)) {
        show_message(message265);
        return;
    }

     
    if(verb==( 75 ) ) if(non1(161,165)) {
        show_message(message291);
        return;
    }

     
    if(cvn70(4)) {
        show_message(message279);
        return;
    }

     
    if(cvn70(102)) {
        show_message(message266);
        return;
    }

    break;
    case 42:
     
    if(cvn70(102)) {
        show_message(message280);
        return;
    }

     
    if(verb==( 70 ) ) if(non1(4,166)) {
        show_message(message267);
        return;
    }

    break;
    case 43:
     
    if(verb==( 70 ) ) if(non1(53,167)) {
        show_message(message282);
        return;
    }

    break;
    case 44:
     
    if(check_verb70_actor(184)) {
        show_message(message274);
        return;
    }

     
    if(cvn70(168)) {
        show_message(message283);
        return;
    }

     
    if(cvn70(169)) {
        show_message(message284);
        return;
    }

     
    if(cvn70(122)) {
        show_message(message285);
        return;
    }

     
    if(verb==( 143 ) ) {
        show_message(message310);
        return;
    }

    break;
    case 45:
     
    if(cvn70(167)) {
        show_message(message286);
        return;
    }

     
    if(actor==182||actor==44) if(verb==( 75 ) ) if(marker[40]== 0 ) {
        show_message(message262);
        marker[40]= 1 ;
        return;
    }

     
    if(actor==182||actor==44) if(verb==( 75 ) ) {
        show_message(message66);
        return;
    }

     
    if(actor==182||actor==44) if(verb==( 70 ) ) {
        show_message(message263);
        return;
    }

    break;
    case 46:
     
    if(cvn70(62)) {
        show_message(message288);
        return;
    }

    break;
    case 47:
     
    if(cvn70(206)) {
        show_message(message311);
        return;
    }

    break;
    case 110:
     
    if(check_verb_noun(230,231)) {
        restart();
        jump(101);
        return;
    }

    }
    retv= 0 ;    return;
}

void game_cycle(void)
{
    unsigned char k;
    boolean ve,pa;
    while(1){
        current_position=next_position;
        if(marker[120]== 0 ) {
            printnewline();
             ;
            cr=&world[search_room(current_position)];
            show_messagenlf(cr->short_d);
            printspace();
             ;
             ;
            printspace();
            show_message(cr->long_d);
            printnewline();
            marker[120]= 1 ;
            ve= 0 ;
            for(k=0;k< 26 ;++k)
                if(obj[k].position==current_position) {
                    if(ve== 0 ) {
                        show_message(message1031);
                        ve= 1 ;
                         ;
                    }
                    show_message(obj[k].desc);
                }
             ;
            if(marker[124]) {
                pa= 0 ;
                for(k=0; k< 6 ; ++k)
                    if(cr->directions[k]) {
                        if(pa== 0 ) {
                            show_messagenlf(message1020);
                            pa= 1 ;
                        }
                     ;
                    show_messagenlf(dir[k]);
                    printspace();
                }
                 ;
                printnewline();
            }
        }
        ++counter[125];
        --counter[126];
        --counter[127];
        --counter[128];
        hi_cond();
        if(retv) continue;
        printnewline();
        if(ls==0 && counter[125]<5) show_message(message1012);
        interrogationAndAnalysis();
        local_cond();
        if(retv) continue;
        low_cond();
        if(retv) continue;
        show_message(verb==( 0 ) ?message1009:message1010);
    }
}

int main(void)
{
    restart();
    {showsplash();} ;
     ;
    show_message(header);
     ;
    wait_key(); ;
    game_cycle();
    return 0;
}
boolean unwear(unsigned int o)  
{
    dummy=search_object(o);
    odummy=&obj[dummy];
    if(odummy->position== 1600 ){
        odummy->position= 1500 ;
        --counter[118];
    } else {
        show_message(message1010);
        return 1 ;
    }
    return 0 ;
}






boolean vov(unsigned int v1, unsigned int v2)
{
    return verb==v1||verb==v2;
}
boolean vovn(unsigned int v1, unsigned int v2, unsigned int n)
{
    return vov(v1,v2)&&noun1==n;
}
boolean vovn100_0(unsigned char  n)  
{
    return vovn(100,0,n);
}
boolean non1(unsigned int n1, unsigned int n2)
{
    return noun1==n1||noun1==n2;
}
void ok(void)
{
        show_message(message1000);
}
boolean check_verb_noun(unsigned int v, unsigned int n)
{
    return verb==v&&noun1==n;
}
boolean cvn70(unsigned char  n)  
{
    return check_verb_noun(70,n);
}
boolean check_verb_actor(unsigned int v, unsigned char  n)
{
    return verb==v&&actor==n;
}
boolean check_verb75_actor(unsigned char  n)  
{
    return check_verb_actor(75,n);
}
boolean check_verb70_actor(unsigned char  n)  
{
    return check_verb_actor(70,n);
}
boolean check_verb70_actor_available(unsigned char  n)  
{
    return check_verb_actor(70,n)&&object_is_available(n);
}
boolean check_verb75_actor_available(unsigned char  n)  
{
    return check_verb_actor(75,n)&&object_is_available(n);
}
boolean cvna(unsigned int v, unsigned int n, unsigned int o)
{
    dummy= search_object_p( o )->position ;
    return check_verb_noun(v,n)&&(dummy==current_position||dummy== 1500 );
}
boolean cvna70(unsigned char  n, unsigned char  o)
{
   return cvna(70,n,o);
}
boolean cvna70neq(unsigned char  n)  
{
   return cvna70(n,n);
}
